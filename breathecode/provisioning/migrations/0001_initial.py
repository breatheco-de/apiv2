# Generated by Django 5.2 on 2025-05-16 04:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0002_initial"),
        ("authenticate", "0002_initial"),
        ("payments", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProvisioningConsumptionKind",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("product_name", models.CharField(max_length=100)),
                ("sku", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningVendor",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200)),
                ("api_url", models.URLField(blank=True)),
                (
                    "workspaces_url",
                    models.URLField(help_text="Points to the place were you can see all your containers"),
                ),
                (
                    "invite_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="Some vendors (like Gitpod) allow to share invite link to automatically join",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningBill",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("total_amount", models.DecimalField(blank=True, decimal_places=9, default=0, max_digits=14)),
                ("fee", models.DecimalField(decimal_places=9, default=0, max_digits=14)),
                ("hash", models.CharField(blank=True, db_index=True, default=None, max_length=64, null=True)),
                ("currency_code", models.CharField(default="USD", max_length=3)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DUE", "Due"),
                            ("DISPUTED", "Disputed"),
                            ("IGNORED", "Ignored"),
                            ("PENDING", "Pending"),
                            ("PAID", "Paid"),
                            ("ERROR", "Error"),
                        ],
                        db_index=True,
                        default="DUE",
                        max_length=20,
                    ),
                ),
                ("paid_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("archived_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("status_details", models.TextField(blank=True, default=None, null=True)),
                (
                    "stripe_id",
                    models.CharField(blank=True, default=None, help_text="Stripe id", max_length=32, null=True),
                ),
                ("stripe_url", models.URLField(blank=True, default=None, null=True)),
                ("started_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("ended_at", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="This title should describe what the Bill is about. I.e.: April's bill. (MAX 64 chars)",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="provisioning.provisioningvendor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningContainer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("web_url", models.URLField()),
                (
                    "status",
                    models.CharField(help_text="We have no control over this. Reported by the vendor", max_length=50),
                ),
                ("display_name", models.CharField(max_length=50)),
                ("last_used_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("provisioned_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("has_unpushed_changes", models.BooleanField(default=False)),
                ("has_uncommitted_changes", models.BooleanField(default=False)),
                ("branch_name", models.CharField(blank=True, default=None, max_length=100, null=True)),
                (
                    "task_associated_slug",
                    models.SlugField(
                        help_text="What assignment was the the student trying to complete with this", max_length=100
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningPrice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("unit_type", models.CharField(max_length=100)),
                (
                    "price_per_unit",
                    models.DecimalField(
                        decimal_places=9, help_text="Price paid to the provisioning vendor, E.g: Github", max_digits=13
                    ),
                ),
                (
                    "multiplier",
                    models.DecimalField(
                        decimal_places=2, default=1, help_text="To increase price in a certain percentage", max_digits=4
                    ),
                ),
                ("currency", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="payments.currency")),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningConsumptionEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "registered_at",
                    models.DateTimeField(
                        help_text="When the activity happened, this field comes form the provisioning vendor"
                    ),
                ),
                ("external_pk", models.CharField(blank=True, default=None, max_length=100, null=True)),
                ("csv_row", models.IntegerField()),
                (
                    "quantity",
                    models.DecimalField(decimal_places=9, help_text="Quantity of the product consumed", max_digits=15),
                ),
                ("repository_url", models.URLField(null=True)),
                (
                    "task_associated_slug",
                    models.SlugField(
                        help_text="What assignment was the the student trying to complete with this",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "price",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="provisioning.provisioningprice"),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="provisioning.provisioningvendor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningUserConsumption",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "username",
                    models.CharField(
                        help_text="Native username in the provisioning platform, E.g: github username", max_length=80
                    ),
                ),
                ("hash", models.CharField(blank=True, db_index=True, default=None, max_length=64, null=True)),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=9, default=0, help_text="Amount of the product consumed", max_digits=15
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=9, default=0, help_text="Quantity of the product consumed", max_digits=15
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PERSISTED", "Persisted"),
                            ("IGNORED", "Ignored"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("status_text", models.CharField(blank=True, max_length=255)),
                ("processed_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("bills", models.ManyToManyField(blank=True, to="provisioning.provisioningbill")),
                (
                    "events",
                    models.ManyToManyField(blank=True, editable=False, to="provisioning.provisioningconsumptionevent"),
                ),
                (
                    "kind",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="provisioning.provisioningconsumptionkind"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningProfile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "cohorts",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If set, only these cohorts will be provisioned with this vendor in this academy",
                        to="admissions.cohort",
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If set, only these members will be provisioned with this vendor in this academy",
                        to="authenticate.profileacademy",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="provisioning.provisioningvendor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningMachineTypes",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=80)),
                ("description", models.CharField(max_length=255)),
                ("cpu_cores", models.IntegerField()),
                ("ram_in_bytes", models.IntegerField()),
                ("disk_in_bytes", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vendor",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="provisioning.provisioningvendor",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProvisioningAcademy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("credentials_key", models.CharField(blank=True, max_length=200)),
                ("credentials_token", models.CharField(blank=True, max_length=200)),
                (
                    "container_idle_timeout",
                    models.IntegerField(
                        default=15, help_text="If the container is idle for X amount of minutes, it will be shut down"
                    ),
                ),
                (
                    "max_active_containers",
                    models.IntegerField(
                        default=2,
                        help_text="If you already have X active containers you wont be able to create new ones. ",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "allowed_machine_types",
                    models.ManyToManyField(blank=True, to="provisioning.provisioningmachinetypes"),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="provisioning.provisioningvendor",
                    ),
                ),
            ],
        ),
    ]
