# Generated by Django 5.2 on 2025-05-16 04:21

import datetime
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0002_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("title", models.CharField(blank=True, max_length=255)),
                ("lang", models.CharField(blank=True, default="en", max_length=3)),
                (
                    "max_session_duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=1800),
                        help_text="No more answers will be accepted after X amount of minutes",
                    ),
                ),
                ("private", models.BooleanField(default=False)),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="If assessments have answers, they cannot be deleted but will be archived instead",
                    ),
                ),
                ("next", models.URLField(blank=True, default=None, null=True)),
                (
                    "is_instant_feedback",
                    models.BooleanField(
                        default=True, help_text="If true, users will know immediately if their answer was correct"
                    ),
                ),
                ("comment", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Not all assesments are triggered by academies",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "original",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The original translation (will only be set if the quiz is a translation of another one)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="translations",
                        to="assessment.assessment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssessmentLayout",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=200, unique=True)),
                (
                    "additional_styles",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="This stylesheet will be included in the assessment if specified",
                        null=True,
                    ),
                ),
                (
                    "variables",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="Additional params to be passed into the assessment content",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.CreateModel(
            name="AssessmentThreshold",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "title",
                    models.CharField(
                        blank=True, default=None, help_text="Title is good for internal use", max_length=255, null=True
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Ideal to group thresholds under a taxonomy, that way you can have several groups of thresholds for the same quiz",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "score_threshold",
                    models.IntegerField(
                        help_text="You can set a threshold to determine if the user score is successfull"
                    ),
                ),
                ("success_message", models.TextField(blank=True, default=None, null=True)),
                ("fail_message", models.TextField(blank=True, default=None, null=True)),
                ("success_next", models.URLField(blank=True, default=None, null=True)),
                ("fail_next", models.URLField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="If null it will be default, but if specified, the only this academy will have this threshold",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="score_thresholds",
                        to="assessment.assessment",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.TextField()),
                ("help_text", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("lang", models.CharField(blank=True, default="us", max_length=3)),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("TEXT", "Text"),
                            ("NUMBER", "Number"),
                            ("SELECT", "Select"),
                            ("SELECT_MULTIPLE", "Select Multiple"),
                        ],
                        default="SELECT",
                        max_length=15,
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Question collected answers cannot not be deleted, they will have this bullet true",
                    ),
                ),
                ("position", models.IntegerField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessment",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Option",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.TextField()),
                ("help_text", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("lang", models.CharField(blank=True, default="en", max_length=3)),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Options with collected answers cannot not be deleted, they will have this bullet true",
                    ),
                ),
                ("position", models.IntegerField(blank=True, default=None, null=True)),
                (
                    "score",
                    models.FloatField(
                        help_text="If picked, this value will add up to the total score of the assesment, you can have negative or fractional values"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserAssessment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=200)),
                ("lang", models.CharField(blank=True, default="en", max_length=3)),
                (
                    "owner_email",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="If there is not registered owner we can use the email as reference",
                        max_length=150,
                        null=True,
                    ),
                ),
                ("has_marketing_consent", models.BooleanField(default=False)),
                (
                    "conversion_info",
                    models.JSONField(
                        blank=True, default=None, help_text="UTMs and other conversion information.", null=True
                    ),
                ),
                (
                    "owner_phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("total_score", models.FloatField(help_text="Total sum of all chosen options in the assesment")),
                ("opened", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SENT", "Sent"),
                            ("ANSWERED", "Answered"),
                            ("ERROR", "Error"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="DRAFT",
                        max_length=15,
                    ),
                ),
                ("status_text", models.TextField(blank=True, default=None, null=True)),
                (
                    "token",
                    models.CharField(
                        help_text="Auto-generated when a user assignment is created", max_length=255, unique=True
                    ),
                ),
                ("comment", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("started_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("finished_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.assessment",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="How is answering the assessment",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "option",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Will be null if open question, no options to pick. Or if option was deleted historically",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="assessment.option",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.question",
                    ),
                ),
                (
                    "user_assessment",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assessment.userassessment",
                    ),
                ),
            ],
        ),
    ]
