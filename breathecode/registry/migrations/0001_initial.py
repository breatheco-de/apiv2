# Generated by Django 5.2 on 2025-05-16 04:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0002_initial"),
        ("assessment", "0001_initial"),
        ("marketing", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SyllabusVersionProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.syllabusversion",),
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="Asset must be unique within the entire database because they could be published into 4geeks.com (shared among all academies)",
                        max_length=200,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(blank=True, db_index=True, max_length=200)),
                (
                    "lang",
                    models.CharField(
                        blank=True, db_index=True, default=None, help_text="E.g: en, es, it", max_length=2, null=True
                    ),
                ),
                ("url", models.URLField(blank=True, default=None, null=True)),
                ("solution_url", models.URLField(blank=True, default=None, null=True)),
                (
                    "preview",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="This preview will be used when shared in social media",
                        null=True,
                    ),
                ),
                (
                    "preview_in_tutorial",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="Used in 4geeks.com before the tutorial is about to start",
                        null=True,
                    ),
                ),
                ("description", models.TextField(blank=True, default=None, null=True)),
                (
                    "requirements",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Brief for the copywriters, mainly used to describe what this lessons needs to be about",
                        null=True,
                    ),
                ),
                (
                    "learnpack_deploy_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="Only applies to LearnPack tutorials that have been published in the LearnPack cloud",
                        null=True,
                    ),
                ),
                (
                    "template_url",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="This template will be used to open the asset (only applied for projects). If project has no template it should state 'self' as template url",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "dependencies",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Automatically calculated based on the package.json, pipfile or alternatives. String like: python=3.10,node=16.0",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "readme_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="This will be used to synch only lessons from github. Projects, quizzes and exercises it will try README.md for english and README.lang.md for other langs",
                        null=True,
                    ),
                ),
                ("intro_video_url", models.URLField(blank=True, default=None, null=True)),
                ("solution_video_url", models.URLField(blank=True, default=None, null=True)),
                ("readme", models.TextField(blank=True, default=None, null=True)),
                ("readme_raw", models.TextField(blank=True, default=None, null=True)),
                ("readme_updated_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("html", models.TextField(blank=True, default=None, null=True)),
                ("config", models.JSONField(blank=True, default=None, null=True)),
                (
                    "external",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="External assets will open in a new window, they are not built using breathecode or learnpack tecnology",
                    ),
                ),
                (
                    "enable_table_of_content",
                    models.BooleanField(
                        default=True, help_text="If true, it shows a tabled on contents on top of the lesson"
                    ),
                ),
                (
                    "interactive",
                    models.BooleanField(
                        db_index=True, default=False, help_text="If true, it means is learnpack enabled"
                    ),
                ),
                ("with_solutions", models.BooleanField(db_index=True, default=False)),
                (
                    "feature",
                    models.BooleanField(
                        default=False,
                        help_text="If true, it will be shown in the landing pages of the website for marketing purposes",
                    ),
                ),
                ("with_video", models.BooleanField(db_index=True, default=False)),
                ("graded", models.BooleanField(db_index=True, default=False)),
                (
                    "gitpod",
                    models.BooleanField(
                        default=False,
                        help_text="If true, it means it can be opened on cloud provisioning vendors like Gitpod or Codespaces",
                    ),
                ),
                (
                    "agent",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="If value is vscode, then we recommend to open this exercise/project in vscode and instructions will be different. If it is standalone, then you can open it directly from the terminal",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("duration", models.IntegerField(blank=True, default=None, help_text="In hours", null=True)),
                (
                    "difficulty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HARD", "Hard"),
                            ("INTERMEDIATE", "Intermediate"),
                            ("EASY", "Easy"),
                            ("BEGINNER", "Beginner"),
                        ],
                        default=None,
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("PUBLIC", "Public"), ("UNLISTED", "Unlisted"), ("PRIVATE", "Private")],
                        db_index=True,
                        default="PUBLIC",
                        help_text="This is an internal property. It won't be shown internally to other academies unless is public",
                        max_length=20,
                    ),
                ),
                (
                    "asset_type",
                    models.CharField(
                        choices=[
                            ("PROJECT", "Project"),
                            ("STARTER", "Starter Template"),
                            ("EXERCISE", "Exercise"),
                            ("QUIZ", "Quiz"),
                            ("LESSON", "Lesson"),
                            ("VIDEO", "Video"),
                            ("ARTICLE", "Article"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not Started"),
                            ("PLANNING", "Planning"),
                            ("WRITING", "Writing"),
                            ("DRAFT", "Draft"),
                            ("OPTIMIZED", "Optimized"),
                            ("PUBLISHED", "Published"),
                        ],
                        db_index=True,
                        default="NOT_STARTED",
                        help_text="It won't be shown on the website until the status is published",
                        max_length=20,
                    ),
                ),
                (
                    "is_auto_subscribed",
                    models.BooleanField(
                        default=True,
                        help_text="If auto subscribed, the system will attempt to listen to push event and update the asset meta based on github",
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("OK", "Ok"),
                            ("WARNING", "Warning"),
                            ("NEEDS_RESYNC", "Needs Resync"),
                        ],
                        db_index=True,
                        default=None,
                        help_text="Internal state automatically set by the system based on sync",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("last_synch_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                (
                    "github_commit_hash",
                    models.CharField(blank=True, db_index=True, default=None, max_length=100, null=True),
                ),
                (
                    "test_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("OK", "Ok"),
                            ("WARNING", "Warning"),
                            ("NEEDS_RESYNC", "Needs Resync"),
                        ],
                        db_index=True,
                        default=None,
                        help_text="Internal state automatically set by the system based on test",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("published_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("last_test_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                (
                    "status_text",
                    models.TextField(
                        blank=True, default=None, help_text="Used by the sych status to provide feedback", null=True
                    ),
                ),
                (
                    "authors_username",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Github usernames separated by comma",
                        max_length=80,
                        null=True,
                    ),
                ),
                ("is_seo_tracked", models.BooleanField(db_index=True, default=True)),
                (
                    "optimization_rating",
                    models.FloatField(blank=True, default=None, help_text="Automatically filled (1 to 100)", null=True),
                ),
                ("last_seo_scan_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("seo_json_status", models.JSONField(blank=True, default=None, null=True)),
                ("last_cleaning_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("cleaning_status_details", models.TextField(blank=True, default=None, null=True)),
                (
                    "cleaning_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("OK", "Ok"),
                            ("WARNING", "Warning"),
                            ("NEEDS_RESYNC", "Needs Resync"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="Internal state automatically set by the system based on cleanup",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "delivery_instructions",
                    models.TextField(
                        blank=True, default=None, help_text="Tell students how to deliver this project", null=True
                    ),
                ),
                (
                    "delivery_formats",
                    models.CharField(
                        default="url",
                        help_text="Comma separated list of supported formats. Eg: url, image/png, application/pdf",
                        max_length=255,
                    ),
                ),
                (
                    "delivery_regex_url",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text='Will only be used if "url" is the delivery format',
                        max_length=255,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admissions.academy",
                    ),
                ),
                ("all_translations", models.ManyToManyField(blank=True, to="registry.asset")),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Connection with the assessment breathecode app",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="assessment.assessment",
                    ),
                ),
                (
                    "assets_related",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related assets used to get prepared before going through this asset.",
                        to="registry.asset",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Who wrote the lesson, not necessarily the owner",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The owner has the github premissions to update the lesson",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_lessons",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "superseded_by",
                    models.OneToOneField(
                        blank=True,
                        default=None,
                        help_text="The newer version of the article (null if it is the latest version). This is used for technology deprecation, for example, a new article to explain the new version of react router",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="previous_version",
                        to="registry.asset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetAlias",
            fields=[
                ("slug", models.SlugField(max_length=200, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("asset", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registry.asset")),
            ],
        ),
        migrations.CreateModel(
            name="AssetCategory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("lang", models.CharField(help_text="E.g: en, es, it", max_length=2)),
                ("description", models.TextField(blank=True, default=None, null=True)),
                ("auto_generate_previews", models.BooleanField(default=False)),
                (
                    "preview_generation_url",
                    models.URLField(
                        blank=True, default=None, help_text="Will be POSTed to get preview image", null=True
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("PUBLIC", "Public"), ("UNLISTED", "Unlisted"), ("PRIVATE", "Private")],
                        default="PUBLIC",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                ("all_translations", models.ManyToManyField(blank=True, to="registry.assetcategory")),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="category",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="registry.assetcategory"
            ),
        ),
        migrations.CreateModel(
            name="AssetComment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField()),
                ("resolved", models.BooleanField(default=False)),
                ("delivered", models.BooleanField(default=False)),
                ("urgent", models.BooleanField(default=False)),
                ("priority", models.SmallIntegerField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("asset", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registry.asset")),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Who wrote the comment or issue",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="In charge of resolving the comment or issue",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetContext",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ai_context", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "PENDING"),
                            ("PROCESSING", "PROCESSING"),
                            ("DONE", "DONE"),
                            ("ERROR", "ERROR"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="If pending, it means it hasn't been generated yet, processing means that is being generated at this moment, done means it has been generated",
                        max_length=20,
                    ),
                ),
                (
                    "status_text",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Status details, it may be set automatically if enough error information",
                        null=True,
                    ),
                ),
                ("asset", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="registry.asset")),
            ],
        ),
        migrations.CreateModel(
            name="AssetErrorLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "asset_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PROJECT", "Project"),
                            ("STARTER", "Starter Template"),
                            ("EXERCISE", "Exercise"),
                            ("QUIZ", "Quiz"),
                            ("LESSON", "Lesson"),
                            ("VIDEO", "Video"),
                            ("ARTICLE", "Article"),
                        ],
                        default=None,
                        max_length=20,
                        null=True,
                    ),
                ),
                ("slug", models.SlugField(max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[("ERROR", "Error"), ("FIXED", "Fixed"), ("IGNORED", "Ignored")],
                        default="ERROR",
                        max_length=20,
                    ),
                ),
                ("path", models.CharField(max_length=200)),
                (
                    "status_text",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Status details, it may be set automatically if enough error information",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "asset",
                    models.ForeignKey(
                        default=None,
                        help_text='Assign an asset to this error and you will be able to create an alias for it from the django admin bulk actions "create alias"',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="registry.asset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=None,
                        help_text="The user how asked for the asset and got the error",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AssetImage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
                ("mime", models.CharField(max_length=60)),
                ("bucket_url", models.URLField(max_length=255)),
                ("original_url", models.URLField(max_length=255)),
                ("hash", models.CharField(max_length=64)),
                ("last_download_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("download_details", models.TextField(blank=True, default=None, null=True)),
                (
                    "download_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("OK", "Ok"),
                            ("WARNING", "Warning"),
                            ("NEEDS_RESYNC", "Needs Resync"),
                        ],
                        default="PENDING",
                        help_text="Internal state automatically set by the system based on download",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("assets", models.ManyToManyField(blank=True, related_name="images", to="registry.asset")),
            ],
        ),
        migrations.CreateModel(
            name="AssetKeyword",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("lang", models.CharField(help_text="E.g: en, es, it", max_length=2)),
                (
                    "expected_monthly_traffic",
                    models.FloatField(
                        blank=True, default=None, help_text="You can get this info from Ahrefs or GKP", null=True
                    ),
                ),
                ("difficulty", models.FloatField(blank=True, default=None, help_text="From 1 to 100", null=True)),
                ("is_important", models.BooleanField(default=True)),
                ("is_urgent", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="seo_keywords",
            field=models.ManyToManyField(
                blank=True, help_text="Optimize for a max of two keywords per asset", to="registry.assetkeyword"
            ),
        ),
        migrations.CreateModel(
            name="AssetTechnology",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="Technologies are unified within all 4geeks.com", max_length=200, unique=True
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                (
                    "lang",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Leave blank if will be shown in all languages",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "is_deprecated",
                    models.BooleanField(
                        default=False, help_text="If True, the technology will be programmatically deleted."
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[("PUBLIC", "Public"), ("UNLISTED", "Unlisted"), ("PRIVATE", "Private")],
                        default="UNLISTED",
                        help_text="If public, the front-end will generate a landing page. If unlisted, it won't have a landing page but will be shown in assets. If private, it won't be shown anywhere of the front-end.",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True, default=None, null=True)),
                (
                    "icon_url",
                    models.URLField(blank=True, default=None, help_text="Image icon to show on website", null=True),
                ),
                (
                    "sort_priority",
                    models.IntegerField(
                        choices=[(1, 1), (2, 2), (3, 3)],
                        default=3,
                        help_text="Priority to sort technology (1, 2, or 3): One is more important and goes first than three.",
                    ),
                ),
                (
                    "marketing_information",
                    models.JSONField(
                        blank=True, default=None, help_text="JSON structure for marketing information", null=True
                    ),
                ),
                (
                    "featured_asset",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="registry.asset",
                    ),
                ),
                (
                    "featured_course",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The featured course for this technology",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="marketing.course",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="registry.assettechnology",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="asset",
            name="technologies",
            field=models.ManyToManyField(blank=True, to="registry.assettechnology"),
        ),
        migrations.CreateModel(
            name="ContentVariable",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=100)),
                ("value", models.TextField()),
                (
                    "default_value",
                    models.TextField(
                        help_text="If the variable type is fetch or code and the processing fails, the default value will be used"
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Leave blank if will be shown in all languages",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "var_type",
                    models.CharField(
                        choices=[
                            ("MARKDOWN", "Markdown"),
                            ("PYTHON_CODE", "Python"),
                            ("FETCH_JSON", "Fetch json from url"),
                            ("FETCH_TEXT", "Fetch text from url"),
                        ],
                        default="MARKDOWN",
                        help_text="Code vars accept python code, Fetch vars accept HTTP GET",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("ERROR", "Error"), ("COMPLETED", "Completed")],
                        default="PENDING",
                        help_text="Code vars accept python code, Fetch vars accept HTTP GET",
                        max_length=20,
                    ),
                ),
                (
                    "status_text",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="If the var is code or fetch here will be the error processing info",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsOriginality",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=255)),
                ("balance", models.FloatField(default=0)),
                ("usage", models.JSONField(default=dict)),
                ("last_call_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.CreateModel(
            name="KeywordCluster",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=200)),
                ("title", models.CharField(max_length=200)),
                ("lang", models.CharField(help_text="E.g: en, es, it", max_length=2)),
                (
                    "visibility",
                    models.CharField(
                        choices=[("PUBLIC", "Public"), ("UNLISTED", "Unlisted"), ("PRIVATE", "Private")],
                        default="PUBLIC",
                        max_length=20,
                    ),
                ),
                (
                    "landing_page_url",
                    models.URLField(
                        blank=True, default=None, help_text="All keyword articles must point to this page", null=True
                    ),
                ),
                (
                    "is_deprecated",
                    models.BooleanField(
                        default=False,
                        help_text="Used when you want to stop using this cluster, all previous articles will be kept but no new articles will be assigned",
                    ),
                ),
                ("is_important", models.BooleanField(default=True)),
                ("is_urgent", models.BooleanField(default=True)),
                (
                    "internal_description",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="How will be this cluster be used in the SEO strategy",
                        null=True,
                    ),
                ),
                (
                    "optimization_rating",
                    models.FloatField(blank=True, default=None, help_text="Automatically filled (1 to 100)", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.AddField(
            model_name="assetkeyword",
            name="cluster",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="registry.keywordcluster",
            ),
        ),
        migrations.CreateModel(
            name="OriginalityScan",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("success", models.BooleanField(blank=True, default=None, null=True)),
                ("score_original", models.FloatField(blank=True, default=None, null=True)),
                ("score_ai", models.FloatField(blank=True, default=None, null=True)),
                ("credits_used", models.IntegerField(default=0)),
                ("content", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("COMPLETED", "Completed"),
                            ("WARNING", "Warning"),
                        ],
                        default="PENDING",
                        help_text="Scan for originality",
                        max_length=20,
                    ),
                ),
                ("status_text", models.TextField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("asset", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registry.asset")),
            ],
        ),
        migrations.CreateModel(
            name="SEOReport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "report_type",
                    models.CharField(help_text="Must be one of the services.seo.action script names", max_length=40),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("OK", "Ok"),
                            ("WARNING", "Warning"),
                            ("NEEDS_RESYNC", "Needs Resync"),
                        ],
                        default="PENDING",
                        help_text="Internal state automatically set by the system",
                        max_length=20,
                    ),
                ),
                ("log", models.JSONField(blank=True, default=None, null=True)),
                ("how_to_fix", models.TextField(blank=True, default=None, null=True)),
                (
                    "rating",
                    models.FloatField(blank=True, default=None, help_text="Automatically filled (1 to 100)", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("asset", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="registry.asset")),
            ],
        ),
    ]
