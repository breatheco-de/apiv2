# Generated by Django 5.2 on 2025-10-22 19:24

import hashlib
import json
from django.db import migrations, models


def populate_pricing_hash(apps, schema_editor):
    """
    Populate pricing_hash for existing FinancingOption records.

    This ensures all existing records have their hash computed from
    their current pricing_ratio_exceptions value.
    """
    FinancingOption = apps.get_model("payments", "FinancingOption")

    def generate_hash(pricing_ratio_exceptions):
        """Generate hash for pricing exceptions."""
        if not pricing_ratio_exceptions:
            return hashlib.sha256(b"{}").hexdigest()

        normalized = json.dumps(pricing_ratio_exceptions, sort_keys=True, separators=(",", ":"))
        return hashlib.sha256(normalized.encode("utf-8")).hexdigest()

    # Update all existing records
    for financing_option in FinancingOption.objects.all():
        financing_option.pricing_hash = generate_hash(financing_option.pricing_ratio_exceptions)
        financing_option.save(update_fields=["pricing_hash"])

    print(f"Updated pricing_hash for {FinancingOption.objects.count()} FinancingOption records")


def reverse_populate_pricing_hash(apps, schema_editor):
    """
    Reverse operation - set all hashes to empty string.
    This is safe since the field will be removed in the reverse migration.
    """
    FinancingOption = apps.get_model("payments", "FinancingOption")
    FinancingOption.objects.all().update(pricing_hash="")


class Migration(migrations.Migration):

    dependencies = [
        ("payments", "0014_academyservice_foreignkey_fix"),
    ]

    operations = [
        migrations.AddField(
            model_name="financingoption",
            name="pricing_hash",
            field=models.CharField(
                db_index=True,
                default="",
                editable=False,
                help_text="SHA256 hash of pricing_ratio_exceptions for uniqueness checking",
                max_length=64,
            ),
        ),
        migrations.RunPython(populate_pricing_hash, reverse_populate_pricing_hash),
    ]
