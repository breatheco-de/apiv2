# Generated by Django 5.2 on 2025-05-16 04:20

import datetime

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import breathecode.payments.models
import breathecode.utils.validators.language


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("authenticate", "0001_initial"),
        ("events", "0001_initial"),
        ("mentorship", "0002_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Coupon",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField()),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("NO_DISCOUNT", "No discount"),
                            ("PERCENT_OFF", "Percent off"),
                            ("FIXED_PRICE", "Fixed price"),
                            ("HAGGLING", "Haggling"),
                        ],
                        db_index=True,
                        default="PERCENT_OFF",
                        max_length=13,
                    ),
                ),
                ("discount_value", models.FloatField(help_text="if type is PERCENT_OFF it's a percentage (range 0-1)")),
                (
                    "referral_type",
                    models.CharField(
                        choices=[
                            ("NO_REFERRAL", "No referral"),
                            ("PERCENTAGE", "Percentage"),
                            ("FIXED_PRICE", "Fixed price"),
                        ],
                        db_index=True,
                        default="NO_REFERRAL",
                        max_length=13,
                    ),
                ),
                ("referral_value", models.FloatField(default=0, help_text="If set, the seller will receive a reward")),
                (
                    "auto",
                    models.BooleanField(
                        db_index=True, default=False, help_text="Automatically apply this coupon (like a special offer)"
                    ),
                ),
                (
                    "how_many_offers",
                    models.IntegerField(
                        default=-1,
                        help_text="if -1 means no limits in the offers provided, if 0 nobody can't use this coupon",
                    ),
                ),
                ("offered_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("expires_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="AcademyPaymentSettings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "pos_vendor",
                    models.CharField(
                        choices=[("STRIPE", "Stripe")],
                        default="STRIPE",
                        help_text="Point of Sale vendor like Stripe, etc.",
                        max_length=20,
                    ),
                ),
                ("pos_api_key", models.CharField(blank=True, help_text="API key for the POS vendor", max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.OneToOneField(
                        help_text="Academy",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_settings",
                        to="admissions.academy",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CohortSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.CreateModel(
            name="CohortSetCohort",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "cohort",
                    models.ForeignKey(
                        help_text="Cohort", on_delete=django.db.models.deletion.CASCADE, to="admissions.cohort"
                    ),
                ),
                (
                    "cohort_set",
                    models.ForeignKey(
                        help_text="Cohort set", on_delete=django.db.models.deletion.CASCADE, to="payments.cohortset"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="cohortset",
            name="cohorts",
            field=models.ManyToManyField(
                blank=True,
                through="payments.CohortSetCohort",
                through_fields=("cohort_set", "cohort"),
                to="admissions.cohort",
            ),
        ),
        migrations.CreateModel(
            name="CohortSetTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the cohort set", max_length=60)),
                ("description", models.CharField(help_text="Description of the cohort set", max_length=255)),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the cohort set", max_length=255),
                ),
                (
                    "cohort_set",
                    models.ForeignKey(
                        help_text="Cohort set", on_delete=django.db.models.deletion.CASCADE, to="payments.cohortset"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Consumable",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "unit_type",
                    models.CharField(
                        choices=[("UNIT", "Unit")],
                        db_index=True,
                        default="UNIT",
                        help_text="Unit type (e.g. UNIT))",
                        max_length=10,
                    ),
                ),
                ("how_many", models.IntegerField(default=-1, help_text="How many units of this service can be used")),
                (
                    "sort_priority",
                    models.IntegerField(
                        default=1,
                        help_text="(e.g. 1, 2, 3, ...) It is going to be used to sort the items on the frontend",
                    ),
                ),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Valid until, this is null if the consumable is valid until resources are exhausted",
                        null=True,
                    ),
                ),
                (
                    "cohort_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Cohort set which the consumable belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.cohortset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ConsumptionSession",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "operation_code",
                    models.SlugField(
                        default="default", help_text="Code that identifies the operation, it could be repeated"
                    ),
                ),
                ("eta", models.DateTimeField(help_text="Estimated time of arrival")),
                ("duration", models.DurationField(default=datetime.timedelta, help_text="Duration of the session")),
                ("how_many", models.FloatField(default=0, help_text="How many units of this service can be used")),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("CANCELLED", "Cancelled")],
                        default="PENDING",
                        help_text="Status of the session",
                        max_length=12,
                    ),
                ),
                ("was_discounted", models.BooleanField(default=False, help_text="Was it discounted")),
                (
                    "request",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Request parameters, it's used to remind and recover and consumption session",
                    ),
                ),
                ("path", models.CharField(blank=True, help_text="Path of the request", max_length=200)),
                ("related_id", models.IntegerField(blank=True, default=None, help_text="Related id", null=True)),
                (
                    "related_slug",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Related slug, it's human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "consumable",
                    models.ForeignKey(
                        help_text="Consumable", on_delete=django.db.models.deletion.CASCADE, to="payments.consumable"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Currency",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.CharField(
                        db_index=True,
                        help_text="ISO 4217 currency code (e.g. USD, EUR, MXN)",
                        max_length=3,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Currency name (e.g. US Dollar, Euro, Mexican Peso)", max_length=20, unique=True
                    ),
                ),
                (
                    "decimals",
                    models.IntegerField(default=0, help_text="Number of decimals (e.g. 2 for USD and EUR, 0 for JPY)"),
                ),
                (
                    "countries",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Countries that use this currency officially",
                        related_name="currencies",
                        to="admissions.country",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Bag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount_per_month", models.FloatField(default=0, help_text="Amount per month")),
                ("amount_per_quarter", models.FloatField(default=0, help_text="Amount per quarter")),
                ("amount_per_half", models.FloatField(default=0, help_text="Amount per half")),
                ("amount_per_year", models.FloatField(default=0, help_text="Amount per year")),
                (
                    "status",
                    models.CharField(
                        choices=[("RENEWAL", "Renewal"), ("CHECKING", "Checking"), ("PAID", "Paid")],
                        db_index=True,
                        default="CHECKING",
                        help_text="Bag status",
                        max_length=8,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("BAG", "Bag"), ("CHARGE", "Charge"), ("PREVIEW", "Preview"), ("INVITED", "Invited")],
                        default="BAG",
                        help_text="Bag type",
                        max_length=7,
                    ),
                ),
                (
                    "chosen_period",
                    models.CharField(
                        choices=[
                            ("NO_SET", "No set"),
                            ("MONTH", "Month"),
                            ("QUARTER", "Quarter"),
                            ("HALF", "Half"),
                            ("YEAR", "Year"),
                        ],
                        default="NO_SET",
                        help_text="Chosen period used to calculate the amount and build the subscription",
                        max_length=7,
                    ),
                ),
                (
                    "how_many_installments",
                    models.IntegerField(
                        default=0, help_text="How many installments to collect and build the plan financing"
                    ),
                ),
                ("is_recurrent", models.BooleanField(default=False, help_text="will it be a recurrent payment?")),
                ("was_delivered", models.BooleanField(default=False, help_text="Was it delivered to the user?")),
                (
                    "pricing_ratio_explanation",
                    models.JSONField(
                        blank=True,
                        default=breathecode.payments.models._default_pricing_ratio_explanation,
                        help_text="Explanation of which exceptions were applied to calculate price",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        blank=True, db_index=True, default=None, help_text="Token of the bag", max_length=40, null=True
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Expiration date of the bag, used for preview bag together with the token",
                        null=True,
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Country code used for pricing ratio calculations",
                        max_length=2,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "coupons",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Coupons applied during the sale",
                        limit_choices_to=breathecode.payments.models.limit_coupon_choices,
                        to="payments.coupon",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        blank=True,
                        help_text="Currency",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.currency",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EventTypeSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                ("event_types", models.ManyToManyField(blank=True, help_text="Event types", to="events.eventtype")),
            ],
        ),
        migrations.AddField(
            model_name="consumable",
            name="event_type_set",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Event type set which the consumable belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.eventtypeset",
            ),
        ),
        migrations.CreateModel(
            name="EventTypeSetTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the event type set", max_length=60)),
                ("description", models.CharField(help_text="Description of the event type set", max_length=255)),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the event type set", max_length=255),
                ),
                (
                    "event_type_set",
                    models.ForeignKey(
                        help_text="Event type set",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.eventtypeset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FinancialReputation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "in_4geeks",
                    models.CharField(
                        choices=[("GOOD", "Good"), ("BAD", "BAD"), ("FRAUD", "Fraud"), ("UNKNOWN", "Unknown")],
                        default="GOOD",
                        help_text="4Geeks reputation",
                        max_length=17,
                    ),
                ),
                (
                    "in_stripe",
                    models.CharField(
                        choices=[("GOOD", "Good"), ("BAD", "BAD"), ("FRAUD", "Fraud"), ("UNKNOWN", "Unknown")],
                        default="GOOD",
                        help_text="Stripe reputation",
                        max_length=17,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Customer",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reputation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FinancingOption",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("monthly_price", models.FloatField(default=1, help_text="Monthly price (e.g. 1, 2, 3, ...)")),
                (
                    "pricing_ratio_exceptions",
                    models.JSONField(
                        blank=True, default=dict, help_text="Exceptions to the general pricing ratios per country"
                    ),
                ),
                (
                    "how_many_months",
                    models.IntegerField(
                        default=1, help_text="How many months and installments to collect (e.g. 1, 2, 3, ...)"
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MentorshipServiceSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                ("mentorship_services", models.ManyToManyField(blank=True, to="mentorship.mentorshipservice")),
            ],
        ),
        migrations.AddField(
            model_name="consumable",
            name="mentorship_service_set",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Mentorship service set which the consumable belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.mentorshipserviceset",
            ),
        ),
        migrations.CreateModel(
            name="AcademyService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("price_per_unit", models.FloatField(default=1, help_text="Price per unit (e.g. 1, 2, 3, ...)")),
                (
                    "bundle_size",
                    models.FloatField(
                        default=1,
                        help_text="Minimum unit size allowed to be bought, example: bundle_size=5, then you are allowed to buy a minimum of 5 units. Related to the discount ratio",
                    ),
                ),
                (
                    "max_items",
                    models.FloatField(
                        default=1, help_text="How many items can be bought in total, it doesn't matter the bundle size"
                    ),
                ),
                (
                    "max_amount",
                    models.FloatField(default=1, help_text="Limit total amount, it doesn't matter the bundle size"),
                ),
                (
                    "discount_ratio",
                    models.FloatField(default=1, help_text="Will be used when calculated by the final price"),
                ),
                (
                    "pricing_ratio_exceptions",
                    models.JSONField(
                        blank=True, default=dict, help_text="Exceptions to the general pricing ratios per country"
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "available_cohort_sets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Available cohort sets to be sold in this service and plan",
                        to="payments.cohortset",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
                    ),
                ),
                (
                    "available_event_type_sets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Available mentorship service sets to be sold in this service and plan",
                        to="payments.eventtypeset",
                    ),
                ),
                (
                    "available_mentorship_service_sets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Available mentorship service sets to be sold in this service and plan",
                        to="payments.mentorshipserviceset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MentorshipServiceSetTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the mentorship service set", max_length=60)),
                (
                    "description",
                    models.CharField(help_text="Description of the mentorship service set", max_length=255),
                ),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the mentorship service set", max_length=255),
                ),
                (
                    "mentorship_service_set",
                    models.ForeignKey(
                        help_text="Mentorship service set",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.mentorshipserviceset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentContact",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "stripe_id",
                    models.CharField(
                        help_text="The Stripe Customer ID (e.g., cus_xxxxxxxxxxxxxx). This links the user to their record in Stripe.",
                        max_length=255,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_contacts",
                        to=settings.AUTH_USER_MODEL,
                        help_text="The Django User associated with this Stripe contact.",
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The Academy associated with this Stripe contact. If null, the contact is typically managed under a default/central Stripe account. This determines which Stripe account the customer belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=120)),
                ("is_credit_card", models.BooleanField(default=False)),
                ("description", models.CharField(help_text="Description of the payment method", max_length=480)),
                (
                    "third_party_link",
                    models.URLField(
                        blank=True, default=None, help_text="Link of a third party payment method", null=True
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "included_country_codes",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="A list of country codes that represent countries that can use this payment method, comma separated",
                        max_length=255,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Academy owner",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        blank=True,
                        help_text="Currency",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.currency",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "amount",
                    models.FloatField(
                        default=0,
                        help_text="If amount is 0, transaction will not be sent to stripe or any other payment processor.",
                    ),
                ),
                ("paid_at", models.DateTimeField(help_text="Date when the invoice was paid")),
                (
                    "refunded_at",
                    models.DateTimeField(
                        blank=True, default=None, help_text="Date when the invoice was refunded", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FULFILLED", "Fulfilled"),
                            ("REJECTED", "Rejected"),
                            ("PENDING", "Pending"),
                            ("REFUNDED", "Refunded"),
                            ("DISPUTED_AS_FRAUD", "Disputed as fraud"),
                        ],
                        db_index=True,
                        default="PENDING",
                        help_text="Invoice status",
                        max_length=17,
                    ),
                ),
                (
                    "externally_managed",
                    models.BooleanField(
                        default=False, help_text="If the billing is managed externally outside of the system"
                    ),
                ),
                (
                    "stripe_id",
                    models.CharField(blank=True, default=None, help_text="Stripe id", max_length=32, null=True),
                ),
                (
                    "refund_stripe_id",
                    models.CharField(
                        blank=True, default=None, help_text="Stripe id for refunding", max_length=32, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "bag",
                    models.ForeignKey(
                        help_text="Bag",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invoices",
                        to="payments.bag",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency of the invoice",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.currency",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment method, null if it uses stripe",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.paymentmethod",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Plan",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "price_per_month",
                    models.FloatField(blank=True, default=None, help_text="Price per month", null=True),
                ),
                (
                    "price_per_quarter",
                    models.FloatField(blank=True, default=None, help_text="Price per quarter", null=True),
                ),
                ("price_per_half", models.FloatField(blank=True, default=None, help_text="Price per half", null=True)),
                ("price_per_year", models.FloatField(blank=True, default=None, help_text="Price per year", null=True)),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=60,
                        unique=True,
                    ),
                ),
                (
                    "is_renewable",
                    models.BooleanField(
                        default=True,
                        help_text="Is if true, it will create a renewable subscription instead of a plan financing",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("UNLISTED", "Unlisted"),
                            ("DELETED", "Deleted"),
                            ("DISCONTINUED", "Discontinued"),
                        ],
                        default="DRAFT",
                        help_text="Status",
                        max_length=12,
                    ),
                ),
                (
                    "time_of_life",
                    models.IntegerField(
                        blank=True, default=1, help_text="Plan lifetime (e.g. 1, 2, 3, ...)", null=True
                    ),
                ),
                (
                    "time_of_life_unit",
                    models.CharField(
                        blank=True,
                        choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                        default="MONTH",
                        help_text="Lifetime unit (e.g. DAY, WEEK, MONTH or YEAR)",
                        max_length=10,
                        null=True,
                    ),
                ),
                ("trial_duration", models.IntegerField(default=1, help_text="Trial duration (e.g. 1, 2, 3, ...)")),
                (
                    "trial_duration_unit",
                    models.CharField(
                        choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                        default="MONTH",
                        help_text="Trial duration unit (e.g. DAY, WEEK, MONTH or YEAR)",
                        max_length=10,
                    ),
                ),
                ("is_onboarding", models.BooleanField(db_index=True, default=False, help_text="Is onboarding plan?")),
                ("has_waiting_list", models.BooleanField(default=False, help_text="Has waiting list?")),
                (
                    "pricing_ratio_exceptions",
                    models.JSONField(
                        blank=True, default=dict, help_text="Exceptions to the general pricing ratios per country"
                    ),
                ),
                (
                    "add_ons",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Service item bundles that can be purchased with this plan",
                        to="payments.academyservice",
                    ),
                ),
                (
                    "cohort_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Cohort sets to be sold in this service and plan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payments.cohortset",
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
                    ),
                ),
                (
                    "event_type_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Event type set to be sold in this service and plan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payments.eventtypeset",
                    ),
                ),
                (
                    "financing_options",
                    models.ManyToManyField(
                        blank=True, help_text="Available financing options", to="payments.financingoption"
                    ),
                ),
                (
                    "invites",
                    models.ManyToManyField(
                        blank=True, help_text="Plan's invites", related_name="plans", to="authenticate.userinvite"
                    ),
                ),
                (
                    "mentorship_service_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Mentorship service set to be sold in this service and plan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payments.mentorshipserviceset",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Academy owner",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="coupon",
            name="plans",
            field=models.ManyToManyField(
                blank=True,
                help_text="Available plans, if refferal type is not NO_REFERRAL it should keep empty, so, in this case, all plans will be available",
                to="payments.plan",
            ),
        ),
        migrations.AddField(
            model_name="bag",
            name="plans",
            field=models.ManyToManyField(blank=True, help_text="Plans", to="payments.plan"),
        ),
        migrations.CreateModel(
            name="PlanFinancing",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FREE_TRIAL", "Free trial"),
                            ("ACTIVE", "Active"),
                            ("CANCELLED", "Cancelled"),
                            ("DEPRECATED", "Deprecated"),
                            ("PAYMENT_ISSUE", "Payment issue"),
                            ("ERROR", "Error"),
                            ("FULLY_PAID", "Fully paid"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        help_text="Status",
                        max_length=13,
                    ),
                ),
                (
                    "status_message",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Error message if status is ERROR",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "externally_managed",
                    models.BooleanField(
                        default=False, help_text="If the billing is managed externally outside of the system"
                    ),
                ),
                (
                    "conversion_info",
                    models.JSONField(
                        blank=True, default=None, help_text="UTMs and other conversion information.", null=True
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Country code used for pricing ratio calculations",
                        max_length=2,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("next_payment_at", models.DateTimeField(help_text="Next payment date")),
                (
                    "valid_until",
                    models.DateTimeField(
                        help_text="Valid until, before this date each month the customer must pay, after this date the plan financing will be destroyed and if it is belonging to a cohort, the certificate will be issued after pay every installments"
                    ),
                ),
                (
                    "plan_expires_at",
                    models.DateTimeField(
                        default=None,
                        help_text="Plan expires at, after this date the plan will not be renewed",
                        null=True,
                    ),
                ),
                (
                    "monthly_price",
                    models.FloatField(
                        default=0, help_text="Monthly price, we keep this to avoid we changes him/her amount"
                    ),
                ),
                (
                    "how_many_installments",
                    models.IntegerField(
                        default=0, help_text="How many installments to collect and build the plan financing"
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        blank=True,
                        help_text="Currency",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.currency",
                    ),
                ),
                ("invoices", models.ManyToManyField(blank=True, help_text="Invoices", to="payments.invoice")),
                (
                    "joined_cohorts",
                    models.ManyToManyField(
                        blank=True, help_text="Cohorts those that he/she joined", to="admissions.cohort"
                    ),
                ),
                ("plans", models.ManyToManyField(blank=True, help_text="Plans to be supplied", to="payments.plan")),
                (
                    "selected_cohort_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Cohort set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.cohortset",
                    ),
                ),
                (
                    "selected_event_type_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Event type set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.eventtypeset",
                    ),
                ),
                (
                    "selected_mentorship_service_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Mentorship service set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.mentorshipserviceset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlanOffer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("show_modal", models.BooleanField(default=False)),
                ("expires_at", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "original_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="plan_offer_from", to="payments.plan"
                    ),
                ),
                (
                    "suggested_plan",
                    models.ForeignKey(
                        help_text="Suggested plans",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_offer_to",
                        to="payments.plan",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlanOfferTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the plan offer", max_length=60)),
                ("description", models.CharField(help_text="Description of the plan offer", max_length=255)),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the plan offer", max_length=255),
                ),
                (
                    "offer",
                    models.ForeignKey(
                        help_text="Plan offer", on_delete=django.db.models.deletion.CASCADE, to="payments.planoffer"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlanTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the plan", max_length=60)),
                ("description", models.CharField(help_text="Description of the plan", max_length=255)),
                ("plan", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="payments.plan")),
            ],
        ),
        migrations.CreateModel(
            name="ProofOfPayment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "provided_payment_details",
                    models.TextField(
                        blank=True, default="", help_text="These details are provided by the user as proof of payment"
                    ),
                ),
                (
                    "confirmation_image_url",
                    models.URLField(
                        blank=True, default=None, help_text="URL of the confirmation image for the payment", null=True
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True, default=None, help_text="Reference for the payment", max_length=32, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done")],
                        db_index=True,
                        default="PENDING",
                        help_text="Bag status",
                        max_length=8,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who provided these details",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="invoice",
            name="proof",
            field=models.OneToOneField(
                blank=True,
                help_text="Proof of payment",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.proofofpayment",
            ),
        ),
        migrations.CreateModel(
            name="Seller",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Company name or person name", max_length=30)),
                (
                    "type",
                    models.CharField(
                        choices=[("INDIVIDUAL", "Individual"), ("BUSINESS", "Business")],
                        db_index=True,
                        default="INDIVIDUAL",
                        max_length=13,
                    ),
                ),
                ("is_active", models.BooleanField(default=True, help_text="Is the seller active to be selected?")),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"is_active": True},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="coupon",
            name="seller",
            field=models.ForeignKey(
                blank=True,
                help_text="Seller",
                limit_choices_to={"is_active": True},
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.seller",
            ),
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=60,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(blank=True, default=None, max_length=60, null=True)),
                (
                    "private",
                    models.BooleanField(db_index=True, default=True, help_text="If the asset is private or not"),
                ),
                ("trial_duration", models.IntegerField(default=1, help_text="Trial duration (e.g. 1, 2, 3, ...)")),
                (
                    "trial_duration_unit",
                    models.CharField(
                        choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                        default="MONTH",
                        help_text="Trial duration unit (e.g. DAY, WEEK, MONTH or YEAR)",
                        max_length=10,
                    ),
                ),
                ("icon_url", models.URLField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session_duration",
                    models.DurationField(
                        blank=True, default=None, help_text="Session duration, used in consumption sessions", null=True
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("COHORT_SET", "Cohort set"),
                            ("MENTORSHIP_SERVICE_SET", "Mentorship service set"),
                            ("EVENT_TYPE_SET", "Event type set"),
                            ("VOID", "Void"),
                        ],
                        default="COHORT_SET",
                        help_text="Service type",
                        max_length=22,
                    ),
                ),
                (
                    "consumer",
                    models.CharField(
                        choices=[
                            ("ADD_CODE_REVIEW", "Add code review"),
                            ("LIVE_CLASS_JOIN", "Live class join"),
                            ("EVENT_JOIN", "Event join"),
                            ("JOIN_MENTORSHIP", "Join mentorship"),
                            ("READ_LESSON", "Read lesson"),
                            ("AI_INTERACTION", "AI Interaction"),
                            ("NO_SET", "No set"),
                        ],
                        default="NO_SET",
                        help_text="Service type",
                        max_length=15,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups that can access the customer that bought this service",
                        to="auth.group",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Academy owner",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="academyservice",
            name="service",
            field=models.OneToOneField(
                help_text="Service", on_delete=django.db.models.deletion.CASCADE, to="payments.service"
            ),
        ),
        migrations.CreateModel(
            name="ServiceItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "unit_type",
                    models.CharField(
                        choices=[("UNIT", "Unit")],
                        db_index=True,
                        default="UNIT",
                        help_text="Unit type (e.g. UNIT))",
                        max_length=10,
                    ),
                ),
                ("how_many", models.IntegerField(default=-1, help_text="How many units of this service can be used")),
                (
                    "sort_priority",
                    models.IntegerField(
                        default=1,
                        help_text="(e.g. 1, 2, 3, ...) It is going to be used to sort the items on the frontend",
                    ),
                ),
                (
                    "is_renewable",
                    models.BooleanField(
                        default=False,
                        help_text="If it's marked, the consumables will be renewed according to the renew_at and renew_at_unit values.",
                    ),
                ),
                (
                    "renew_at",
                    models.IntegerField(
                        default=1,
                        help_text="Renew at (e.g. 1, 2, 3, ...) it going to be used to build the balance of customer",
                    ),
                ),
                (
                    "renew_at_unit",
                    models.CharField(
                        choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                        default="MONTH",
                        help_text="Renew at unit (e.g. DAY, WEEK, MONTH or YEAR)",
                        max_length=10,
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Service", on_delete=django.db.models.deletion.CASCADE, to="payments.service"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlanServiceItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "plan",
                    models.ForeignKey(
                        help_text="Plan", on_delete=django.db.models.deletion.CASCADE, to="payments.plan"
                    ),
                ),
                (
                    "service_item",
                    models.ForeignKey(
                        help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="plan",
            name="service_items",
            field=models.ManyToManyField(
                blank=True,
                through="payments.PlanServiceItem",
                through_fields=("plan", "service_item"),
                to="payments.serviceitem",
            ),
        ),
        migrations.AddField(
            model_name="consumable",
            name="service_item",
            field=models.ForeignKey(
                help_text="Service item, we remind the service item to know how many units was issued",
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.serviceitem",
            ),
        ),
        migrations.AddField(
            model_name="bag",
            name="service_items",
            field=models.ManyToManyField(blank=True, help_text="Service items", to="payments.serviceitem"),
        ),
        migrations.CreateModel(
            name="ServiceItemFeature",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "title",
                    models.CharField(default=None, help_text="Title of the service item", max_length=64, null=True),
                ),
                ("description", models.CharField(help_text="Description of the service item", max_length=255)),
                (
                    "one_line_desc",
                    models.CharField(help_text="One line description of the service item", max_length=64),
                ),
                (
                    "service_item",
                    models.ForeignKey(
                        help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServiceTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the service", max_length=60)),
                ("description", models.CharField(help_text="Description of the service", max_length=255)),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Service", on_delete=django.db.models.deletion.CASCADE, to="payments.service"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FREE_TRIAL", "Free trial"),
                            ("ACTIVE", "Active"),
                            ("CANCELLED", "Cancelled"),
                            ("DEPRECATED", "Deprecated"),
                            ("PAYMENT_ISSUE", "Payment issue"),
                            ("ERROR", "Error"),
                            ("FULLY_PAID", "Fully paid"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        help_text="Status",
                        max_length=13,
                    ),
                ),
                (
                    "status_message",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Error message if status is ERROR",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "externally_managed",
                    models.BooleanField(
                        default=False, help_text="If the billing is managed externally outside of the system"
                    ),
                ),
                (
                    "conversion_info",
                    models.JSONField(
                        blank=True, default=None, help_text="UTMs and other conversion information.", null=True
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Country code used for pricing ratio calculations",
                        max_length=2,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("paid_at", models.DateTimeField(help_text="Last time the subscription was paid")),
                ("is_refundable", models.BooleanField(default=True, help_text="Is it refundable?")),
                ("next_payment_at", models.DateTimeField(help_text="Next payment date")),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="Valid until, after this date the subscription will be destroyed",
                        null=True,
                    ),
                ),
                ("pay_every", models.IntegerField(default=1, help_text="Pay every X units (e.g. 1, 2, 3, ...)")),
                (
                    "pay_every_unit",
                    models.CharField(
                        choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                        default="MONTH",
                        help_text="Pay every unit (e.g. DAY, WEEK, MONTH or YEAR)",
                        max_length=10,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "currency",
                    models.ForeignKey(
                        blank=True,
                        help_text="Currency",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.currency",
                    ),
                ),
                ("invoices", models.ManyToManyField(blank=True, help_text="Invoices", to="payments.invoice")),
                (
                    "joined_cohorts",
                    models.ManyToManyField(
                        blank=True, help_text="Cohorts those that he/she joined", to="admissions.cohort"
                    ),
                ),
                ("plans", models.ManyToManyField(blank=True, help_text="Plans to be supplied", to="payments.plan")),
                (
                    "selected_cohort_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Cohort set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.cohortset",
                    ),
                ),
                (
                    "selected_event_type_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Event type set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.eventtypeset",
                    ),
                ),
                (
                    "selected_mentorship_service_set",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Mentorship service set which the plans and services is for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.mentorshipserviceset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PlanServiceItemHandler",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "handler",
                    models.ForeignKey(
                        help_text="Plan service item",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.planserviceitem",
                    ),
                ),
                (
                    "plan_financing",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Plan financing",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.planfinancing",
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Subscription",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.subscription",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubscriptionServiceItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("cohorts", models.ManyToManyField(blank=True, help_text="Cohorts", to="admissions.cohort")),
                (
                    "mentorship_service_set",
                    models.ForeignKey(
                        blank=True,
                        help_text="Mentorship service set",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.mentorshipserviceset",
                    ),
                ),
                (
                    "service_item",
                    models.ForeignKey(
                        help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        help_text="Subscription",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.subscription",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="subscription",
            name="service_items",
            field=models.ManyToManyField(
                blank=True,
                help_text="Service items to be supplied",
                through="payments.SubscriptionServiceItem",
                through_fields=("subscription", "service_item"),
                to="payments.serviceitem",
            ),
        ),
        migrations.CreateModel(
            name="ServiceStockScheduler",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "valid_until",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Valid until, after this date the consumables will be renewed",
                        null=True,
                    ),
                ),
                ("consumables", models.ManyToManyField(blank=True, help_text="Consumables", to="payments.consumable")),
                (
                    "plan_handler",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Plan service item handler",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.planserviceitemhandler",
                    ),
                ),
                (
                    "subscription_handler",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Subscription service item",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.subscriptionserviceitem",
                    ),
                ),
            ],
        ),
    ]
