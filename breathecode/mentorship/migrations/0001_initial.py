# Generated by Django 5.2 on 2025-05-16 04:20

import breathecode.utils.validators.language
import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AcademyMentorshipSettings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=3600),
                        help_text="Default duration for mentorship sessions of this service",
                    ),
                ),
                (
                    "max_duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=7200),
                        help_text="Maximum allowed duration or extra time, make it 0 for unlimited meetings",
                    ),
                ),
                (
                    "missed_meeting_duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=600),
                        help_text="Duration that will be paid when the mentee doesn't come to the session",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en",
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "allow_mentee_to_extend",
                    models.BooleanField(
                        default=True, help_text="If true, mentees will be able to extend mentorship session"
                    ),
                ),
                (
                    "allow_mentors_to_extend",
                    models.BooleanField(
                        default=True, help_text="If true, mentors will be able to extend mentorship session"
                    ),
                ),
                (
                    "video_provider",
                    models.CharField(
                        choices=[("DAILY", "Daily"), ("GOOGLE_MEET", "Google Meet")],
                        default="GOOGLE_MEET",
                        max_length=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.CreateModel(
            name="CalendlyOrganization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("username", models.CharField(help_text="Calendly username", max_length=100)),
                ("access_token", models.TextField(blank=True, default=None, null=True)),
                ("uri", models.URLField(help_text="Automatically collected from calendly API")),
                (
                    "max_concurrent_sessions",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="For example: Users will only be allowed to book 2 sessions per service at a time, they will have to wait for sessions to complete (or cancel) before booking again",
                        null=True,
                    ),
                ),
                ("hash", models.CharField(max_length=40, unique=True)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PERSISTED", "Persisted"),
                            ("ERROR", "Error"),
                            ("WARNING", "Warning"),
                            ("SYNCHED", "Synched"),
                        ],
                        default="PENDING",
                        help_text="One of: PENDING, PERSISTED or ERROR depending on how the calendly sync status",
                        max_length=9,
                    ),
                ),
                ("sync_desc", models.TextField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalendlyWebhook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("organization_hash", models.CharField(max_length=50)),
                ("created_by", models.CharField(max_length=2500)),
                ("event", models.CharField(max_length=100)),
                ("called_at", models.DateTimeField()),
                ("payload", models.JSONField()),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                ("status_text", models.TextField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mentorship.calendlyorganization",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatBot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, default=None, null=True)),
                ("api_key", models.CharField(blank=True, max_length=250)),
                ("api_organization", models.CharField(blank=True, max_length=250)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                ("syllabus", models.ManyToManyField(blank=True, to="admissions.syllabus")),
            ],
        ),
        migrations.CreateModel(
            name="MentorProfile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, default=None, max_length=150, null=True)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Will be used as unique public booking URL with the students, for example: 4geeks.com/meet/bob",
                        max_length=150,
                        unique=True,
                    ),
                ),
                ("price_per_hour", models.FloatField()),
                (
                    "one_line_bio",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Will be shown to showcase the mentor",
                        max_length=60,
                        null=True,
                    ),
                ),
                ("bio", models.TextField(blank=True, default=None, max_length=500, null=True)),
                (
                    "timezone",
                    models.CharField(
                        default=None,
                        help_text="Knowing the mentor's timezone helps with more accurrate booking",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "online_meeting_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="If set, it will be default for all session's unless the session.online_meeting_url is set",
                        null=True,
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        help_text="Used for inviting the user to become a mentor", max_length=255, unique=True
                    ),
                ),
                (
                    "booking_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="URL where this mentor profile can be booked, E.g: calendly.com/my_username",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INVITED", "Invited"),
                            ("ACTIVE", "Active"),
                            ("UNLISTED", "Unlisted"),
                            ("INNACTIVE", "Innactive"),
                        ],
                        default="INVITED",
                        help_text="Options are: INVITED, ACTIVE, UNLISTED, INNACTIVE",
                        max_length=15,
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Only use this if the user does not exist on breathecode already",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "availability_report",
                    models.JSONField(blank=True, default=list, help_text="Mentor availability report"),
                ),
                (
                    "calendly_uuid",
                    models.CharField(
                        blank=True, default=None, help_text="To be used by the calendly API", max_length=255, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rating",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Automatically filled when new survey responses are collected about this mentor",
                        null=True,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "syllabus",
                    models.ManyToManyField(
                        blank=True,
                        default=None,
                        help_text="What syllabis is this mentor going to be menting to?",
                        to="admissions.syllabus",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="If the user does not exist, you can use the email field instead",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MentorshipBill",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("RECALCULATE", "Recalculate"),
                            ("DUE", "Due"),
                            ("APPROVED", "Approved"),
                            ("PAID", "Paid"),
                            ("IGNORED", "Ignored"),
                        ],
                        default="DUE",
                        max_length=20,
                    ),
                ),
                (
                    "status_mesage",
                    models.TextField(
                        blank=True, default=None, help_text="Any important information about the bill", null=True
                    ),
                ),
                ("total_duration_in_minutes", models.FloatField(default=0)),
                ("total_duration_in_hours", models.FloatField(default=0)),
                ("total_price", models.FloatField(default=0)),
                (
                    "overtime_minutes",
                    models.FloatField(
                        default=0, help_text="Additional time mentorships took based on the expected default duration"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="The bill includes all sessions from started_at to ended_at",
                        null=True,
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="The bill includes all sessions from started_at to ended_at",
                        null=True,
                    ),
                ),
                ("paid_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="mentorship.mentorprofile"),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MentorshipService",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=150, unique=True)),
                ("name", models.CharField(max_length=150)),
                ("logo_url", models.CharField(blank=True, default=None, max_length=150, null=True)),
                ("description", models.TextField(blank=True, default=None, max_length=500, null=True)),
                (
                    "duration",
                    models.DurationField(
                        blank=True, default=None, help_text="Default duration for mentorship sessions of this service"
                    ),
                ),
                (
                    "max_duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="Maximum allowed duration or extra time, make it 0 for unlimited meetings",
                    ),
                ),
                (
                    "missed_meeting_duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="Duration that will be paid when the mentee doesn't come to the session",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("UNLISTED", "Unlisted"),
                            ("INNACTIVE", "Innactive"),
                        ],
                        default="DRAFT",
                        max_length=15,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "allow_mentee_to_extend",
                    models.BooleanField(
                        blank=True, default=None, help_text="If true, mentees will be able to extend mentorship session"
                    ),
                ),
                (
                    "allow_mentors_to_extend",
                    models.BooleanField(
                        blank=True, default=None, help_text="If true, mentors will be able to extend mentorship session"
                    ),
                ),
                (
                    "video_provider",
                    models.CharField(
                        blank=True,
                        choices=[("DAILY", "Daily"), ("GOOGLE_MEET", "Google Meet")],
                        default=None,
                        max_length=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
        migrations.AddField(
            model_name="mentorprofile",
            name="services",
            field=models.ManyToManyField(to="mentorship.mentorshipservice"),
        ),
        migrations.CreateModel(
            name="MentorshipSession",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, help_text="Room name, used on daily.co", max_length=255, null=True
                    ),
                ),
                ("is_online", models.BooleanField(default=False)),
                ("latitude", models.FloatField(blank=True, default=None, null=True)),
                ("longitude", models.FloatField(blank=True, default=None, null=True)),
                (
                    "online_meeting_url",
                    models.URLField(
                        blank=True, default=None, help_text="Overrides the mentor.online_meeting_url if set", null=True
                    ),
                ),
                (
                    "online_recording_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="We encourace the mentors to record the session and share them with the students",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("STARTED", "Started"),
                            ("COMPLETED", "Completed"),
                            ("CANCELED", "Canceled"),
                            ("FAILED", "Failed"),
                            ("IGNORED", "Ignored"),
                        ],
                        default="PENDING",
                        help_text="Options are: PENDING, STARTED, COMPLETED, CANCELED, FAILED, IGNORED. Ignored sessions will not be billed.",
                        max_length=15,
                    ),
                ),
                ("status_message", models.TextField(blank=True, default=None, null=True)),
                (
                    "allow_billing",
                    models.BooleanField(
                        default=True, help_text="If false it will not be included when generating mentorship bills"
                    ),
                ),
                (
                    "suggested_accounted_duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="The automatic suggested duration to be paid to the mentor for this session",
                        null=True,
                    ),
                ),
                (
                    "accounted_duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="The duration that will be paid to the mentor for this session",
                        null=True,
                    ),
                ),
                (
                    "agenda",
                    models.TextField(
                        blank=True, default=None, help_text="What will this mentorship be about", null=True
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="Describe briefly what happened at the mentorship session",
                        null=True,
                    ),
                ),
                (
                    "starts_at",
                    models.DateTimeField(blank=True, default=None, help_text="Scheduled start date", null=True),
                ),
                (
                    "ends_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Scheduled end date, will be used as meeting expiration as well",
                        null=True,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, default=None, help_text="Real start date (only if it started)", null=True
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True, default=None, help_text="Real end date (only if it started)", null=True
                    ),
                ),
                (
                    "mentor_joined_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Exact moment the mentor joined the meeting for the first time",
                        null=True,
                    ),
                ),
                (
                    "mentor_left_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Exact moment the mentor left the meeting for the last time",
                        null=True,
                    ),
                ),
                (
                    "mentee_left_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="Exact moment the mentee left the meeting for the last time",
                        null=True,
                    ),
                ),
                (
                    "calendly_uuid",
                    models.CharField(
                        blank=True, default=None, help_text="To be used by the calendly API", max_length=255, null=True
                    ),
                ),
                ("questions_and_answers", models.JSONField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bill",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="If null, it has not been billed by the mentor yet",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="mentorship.mentorshipbill",
                    ),
                ),
                (
                    "mentee",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="mentorship.mentorprofile"),
                ),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mentorship.mentorshipservice",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SupportAgent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "token",
                    models.CharField(
                        help_text="Used for inviting the user to become a support agent", max_length=255, unique=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("INVITED", "Invited"),
                            ("ACTIVE", "Active"),
                            ("UNLISTED", "Unlisted"),
                            ("INNACTIVE", "Innactive"),
                        ],
                        default="INVITED",
                        help_text="Options are: INVITED, ACTIVE, UNLISTED, INNACTIVE",
                        max_length=15,
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Only use this if the user does not exist on 4geeks already",
                        max_length=150,
                        null=True,
                    ),
                ),
                ("one_line_bio", models.TextField(blank=True, default=None, max_length=60, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        help_text="If the user does not exist, you can use the email field instead",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SupportChannel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=150)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
            ],
        ),
    ]
