# Generated by Django 5.2 on 2025-10-16 23:40

from django.db import migrations


def populate_academy_owner(apps, schema_editor):
    """
    Populate the owner field for all academies with their first admin from ProfileAcademy.
    """
    Academy = apps.get_model("admissions", "Academy")
    ProfileAcademy = apps.get_model("authenticate", "ProfileAcademy")
    Role = apps.get_model("authenticate", "Role")

    # Get the admin role
    admin_role = Role.objects.filter(slug="admin").first()
    if not admin_role:
        print("Warning: 'admin' role not found, skipping owner population")
        return

    # Process each academy
    academies = Academy.objects.all()
    updated_count = 0

    for academy in academies:
        # Find the first admin for this academy
        first_admin = (
            ProfileAcademy.objects.filter(academy=academy, role=admin_role, status="ACTIVE")
            .order_by("created_at")
            .first()
        )

        if first_admin and first_admin.user:
            academy.owner = first_admin.user
            academy.save(update_fields=["owner"])
            updated_count += 1

    print(f"Populated owner for {updated_count} academies")


def reverse_populate_academy_owner(apps, schema_editor):
    """
    Reverse migration: clear the owner field.
    """
    Academy = apps.get_model("admissions", "Academy")
    Academy.objects.update(owner=None)


class Migration(migrations.Migration):

    dependencies = [
        ("admissions", "0005_add_owner_to_academy"),
        ("authenticate", "0001_initial"),  # Ensure ProfileAcademy exists
    ]

    operations = [
        migrations.RunPython(populate_academy_owner, reverse_populate_academy_owner),
    ]
