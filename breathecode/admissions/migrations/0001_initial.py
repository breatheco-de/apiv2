# Generated by Django 5.2 on 2025-05-16 04:20

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Academy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("name", models.CharField(db_index=True, max_length=150)),
                ("legal_name", models.CharField(blank=True, db_index=True, default=None, max_length=150, null=True)),
                ("logo_url", models.CharField(max_length=255)),
                (
                    "icon_url",
                    models.CharField(
                        default="/static/icons/picture.png", help_text="It has to be a square", max_length=255
                    ),
                ),
                ("website_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("white_label_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("street_address", models.CharField(max_length=250)),
                ("marketing_email", models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ("feedback_email", models.EmailField(blank=True, default=None, max_length=254, null=True)),
                (
                    "marketing_phone",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=17,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("twitter_handle", models.CharField(blank=True, default=None, max_length=15, null=True)),
                ("facebook_handle", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("instagram_handle", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("github_handle", models.CharField(blank=True, default=None, max_length=20, null=True)),
                ("linkedin_url", models.URLField(blank=True, default=None, null=True)),
                ("youtube_url", models.URLField(blank=True, default=None, null=True)),
                ("latitude", models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True)),
                (
                    "longitude",
                    models.DecimalField(blank=True, db_index=True, decimal_places=6, max_digits=9, null=True),
                ),
                ("zip_code", models.IntegerField(blank=True, db_index=True, null=True)),
                ("white_labeled", models.BooleanField(default=False)),
                ("active_campaign_slug", models.SlugField(blank=True, default=None, max_length=100, null=True)),
                (
                    "available_as_saas",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Academies available as SAAS will be sold thru 4Geeks.com",
                    ),
                ),
                (
                    "is_hidden_on_prework",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Determines if the cohorts will be shown in the dashboard if it's status is 'PREWORK'",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("INACTIVE", "Inactive"), ("ACTIVE", "Active"), ("DELETED", "Deleted")],
                        db_index=True,
                        default="ACTIVE",
                        max_length=15,
                    ),
                ),
                ("timezone", models.CharField(blank=True, db_index=True, default=None, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("logistical_information", models.CharField(blank=True, max_length=150, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(db_index=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Cohort",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.CharField(db_index=True, max_length=150, unique=True)),
                ("name", models.CharField(db_index=True, max_length=150)),
                ("kickoff_date", models.DateTimeField(db_index=True)),
                ("ending_date", models.DateTimeField(blank=True, db_index=True, null=True)),
                (
                    "current_day",
                    models.IntegerField(
                        default=1, help_text="Each day the teacher takes attendancy and increases the day in one"
                    ),
                ),
                (
                    "current_module",
                    models.IntegerField(
                        blank=True,
                        default=None,
                        help_text="The syllabus is separated by modules, from 1 to N and the teacher decides when to start a new mobule (after a couple of days)",
                        null=True,
                    ),
                ),
                (
                    "stage",
                    models.CharField(
                        choices=[
                            ("INACTIVE", "Inactive"),
                            ("PREWORK", "Prework"),
                            ("STARTED", "Started"),
                            ("FINAL_PROJECT", "Final Project"),
                            ("ENDED", "Ended"),
                            ("DELETED", "Deleted"),
                        ],
                        db_index=True,
                        default="INACTIVE",
                        max_length=15,
                    ),
                ),
                (
                    "private",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="It will not show on the public API endpoints but you will still be able to add people manually",
                    ),
                ),
                (
                    "accepts_enrollment_suggestions",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="The system will suggest won leads to be added to this cohort",
                    ),
                ),
                ("never_ends", models.BooleanField(db_index=True, default=False)),
                (
                    "remote_available",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="True (default) if the students from other cities can take it from home",
                    ),
                ),
                ("online_meeting_url", models.URLField(blank=True, default=None, max_length=255, null=True)),
                ("timezone", models.CharField(blank=True, db_index=True, default=None, max_length=50, null=True)),
                (
                    "history_log",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="The cohort history will save attendancy and information about progress on each class",
                        null=True,
                    ),
                ),
                ("intro_video", models.URLField(blank=True, default=None, null=True)),
                (
                    "is_hidden_on_prework",
                    models.BooleanField(
                        blank=True,
                        db_index=True,
                        default=True,
                        help_text="Determines if the cohort will be shown in the dashboard if it's status is 'PREWORK'",
                        null=True,
                    ),
                ),
                (
                    "available_as_saas",
                    models.BooleanField(
                        blank=True,
                        db_index=True,
                        default=False,
                        help_text="Cohorts available as SAAS will be sold through plans at 4Geeks.com",
                        null=True,
                    ),
                ),
                ("language", models.CharField(db_index=True, default="en", max_length=2)),
                (
                    "cohorts_order",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="An IDs comma separated list to indicate the order in which the micro cohorts will be displayed",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Add the color with hexadecimal format, i.e.: #FFFFFF",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CohortTimeSlot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "starting_at",
                    models.BigIntegerField(
                        db_index=True,
                        default=202101010000,
                        help_text="The first 4 number are year, the next 2 number are month, the next 2 number are day, the next 2 number are hour and the last 2 number are second",
                        validators=[
                            django.core.validators.MaxValueValidator(300000000000),
                            django.core.validators.MinValueValidator(202101010000),
                        ],
                    ),
                ),
                (
                    "ending_at",
                    models.BigIntegerField(
                        db_index=True,
                        default=202101010000,
                        help_text="The first 4 number are year, the next 2 number are month, the next 2 number are day, the next 2 number are hour and the last 2 number are second",
                        validators=[
                            django.core.validators.MaxValueValidator(300000000000),
                            django.core.validators.MinValueValidator(202101010000),
                        ],
                    ),
                ),
                ("timezone", models.CharField(db_index=True, default="America/New_York", max_length=50)),
                ("recurrent", models.BooleanField(db_index=True, default=True)),
                (
                    "recurrency_type",
                    models.CharField(
                        choices=[("DAILY", "Daily"), ("WEEKLY", "Weekly"), ("MONTHLY", "Monthly")],
                        db_index=True,
                        default="WEEKLY",
                        max_length=10,
                    ),
                ),
                (
                    "removed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="This will be available until this date",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CohortUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("TEACHER", "Teacher"),
                            ("ASSISTANT", "Assistant"),
                            ("REVIEWER", "Reviewer"),
                            ("STUDENT", "Student"),
                        ],
                        db_index=True,
                        default="STUDENT",
                        max_length=9,
                    ),
                ),
                (
                    "watching",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="You can active students to the watch list and monitor them closely",
                    ),
                ),
                (
                    "history_log",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="The cohort user log will save attendancy and information about progress on each class",
                    ),
                ),
                (
                    "finantial_status",
                    models.CharField(
                        blank=True,
                        choices=[("FULLY_PAID", "Fully Paid"), ("UP_TO_DATE", "Up to date"), ("LATE", "Late")],
                        db_index=True,
                        default=None,
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "educational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACTIVE", "Active"),
                            ("POSTPONED", "Postponed"),
                            ("GRADUATED", "Graduated"),
                            ("SUSPENDED", "Suspended"),
                            ("DROPPED", "Dropped"),
                            ("NOT_COMPLETING", "Not Completing"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        max_length=15,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                ("code", models.CharField(db_index=True, max_length=3, primary_key=True, serialize=False)),
                ("name", models.CharField(db_index=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="Syllabus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, default=None, max_length=100, null=True)),
                ("name", models.CharField(blank=True, db_index=True, default=None, max_length=150, null=True)),
                (
                    "main_technologies",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Coma separated, E.g: HTML, CSS, Javascript",
                        max_length=150,
                        null=True,
                    ),
                ),
                ("github_url", models.URLField(blank=True, default=None, max_length=255, null=True)),
                ("duration_in_hours", models.IntegerField(default=None, null=True)),
                ("duration_in_days", models.IntegerField(default=None, null=True)),
                ("week_hours", models.IntegerField(default=None, null=True)),
                ("logo", models.CharField(blank=True, default=None, max_length=250, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("private", models.BooleanField(db_index=True, default=False)),
                ("is_documentation", models.BooleanField(db_index=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name="SyllabusSchedule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(db_index=True, max_length=150)),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[("PART-TIME", "Part-Time"), ("FULL-TIME", "Full-Time")],
                        db_index=True,
                        default="PART-TIME",
                        max_length=15,
                    ),
                ),
                ("description", models.TextField(db_index=True, max_length=450)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SyllabusScheduleTimeSlot",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "starting_at",
                    models.BigIntegerField(
                        db_index=True,
                        default=202101010000,
                        help_text="The first 4 number are year, the next 2 number are month, the next 2 number are day, the next 2 number are hour and the last 2 number are second",
                        validators=[
                            django.core.validators.MaxValueValidator(300000000000),
                            django.core.validators.MinValueValidator(202101010000),
                        ],
                    ),
                ),
                (
                    "ending_at",
                    models.BigIntegerField(
                        db_index=True,
                        default=202101010000,
                        help_text="The first 4 number are year, the next 2 number are month, the next 2 number are day, the next 2 number are hour and the last 2 number are second",
                        validators=[
                            django.core.validators.MaxValueValidator(300000000000),
                            django.core.validators.MinValueValidator(202101010000),
                        ],
                    ),
                ),
                ("timezone", models.CharField(db_index=True, default="America/New_York", max_length=50)),
                ("recurrent", models.BooleanField(db_index=True, default=True)),
                (
                    "recurrency_type",
                    models.CharField(
                        choices=[("DAILY", "Daily"), ("WEEKLY", "Weekly"), ("MONTHLY", "Monthly")],
                        db_index=True,
                        default="WEEKLY",
                        max_length=10,
                    ),
                ),
                (
                    "removed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="This will be available until this date",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SyllabusVersion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("json", models.JSONField()),
                ("version", models.PositiveSmallIntegerField(db_index=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("PUBLISHED", "Published"), ("DRAFT", "Draft")],
                        db_index=True,
                        default="PUBLISHED",
                        max_length=15,
                    ),
                ),
                ("change_log_details", models.TextField(blank=True, default=None, max_length=450, null=True)),
                (
                    "integrity_status",
                    models.CharField(
                        choices=[("ERROR", "Error"), ("PENDING", "Pending"), ("WARNING", "Warning"), ("OK", "Ok")],
                        db_index=True,
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                ("integrity_check_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                ("integrity_report", models.JSONField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserAdmissions",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
