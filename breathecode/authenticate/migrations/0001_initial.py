# Generated by Django 5.2 on 2025-05-16 04:20

import breathecode.utils.validators.language
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="App",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(help_text="Descriptive and unique name of the app", max_length=25, unique=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Capability",
            fields=[
                ("slug", models.SlugField(max_length=40, primary_key=True, serialize=False)),
                ("description", models.CharField(blank=True, default=None, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="DeviceId",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=40)),
                ("key", models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name="GoogleWebhook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "message",
                    models.SlugField(blank=True, help_text="base64 message provided by google", max_length=512),
                ),
                ("type", models.CharField(default="noSet", max_length=40)),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                ("status_text", models.CharField(default="", max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="NotFoundAnonGoogleUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=255)),
                ("refresh_token", models.CharField(max_length=255)),
                ("id_token", models.CharField(default="", max_length=1400)),
                ("google_id", models.CharField(default="", max_length=24)),
                ("expires_at", models.DateTimeField()),
                ("email", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="UserSetting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        default="en",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AcademyProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.academy",),
        ),
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AcademyAuthSettings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("github_username", models.SlugField(blank=True, max_length=40)),
                (
                    "github_default_team_ids",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="User will be invited to this github team ID when joining the github organization",
                        max_length=40,
                    ),
                ),
                (
                    "github_is_sync",
                    models.BooleanField(default=False, help_text="If true, will try synching users every few hours"),
                ),
                (
                    "github_error_log",
                    models.JSONField(
                        blank=True, default=None, help_text="Error trace log for github API communication", null=True
                    ),
                ),
                (
                    "auto_sync_content",
                    models.BooleanField(
                        default=False,
                        help_text="If true, will attempt to create WebhookSubscription on each asset repo",
                    ),
                ),
                ("academy", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "github_owner",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Github auth token for this user will be used for any admin call to the google cloud api, for example: inviting users to the academy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "github_whitelist_exemption_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users that will never be removed from GitHub organization regardless of their cohort status",
                        related_name="github_whitelist_exemptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "google_cloud_owner",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Google auth token for this user will be used for any admin call to the google cloud api, for example: creating classroom video calls",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="google_cloud_academy_auth_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsFacebook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=255)),
                ("expires_at", models.DateTimeField()),
                ("facebook_id", models.BigIntegerField(default=None, null=True)),
                ("email", models.CharField(default=None, max_length=150, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.OneToOneField(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsGithub",
            fields=[
                ("github_id", models.IntegerField(primary_key=True, serialize=False)),
                ("token", models.CharField(max_length=255)),
                ("email", models.CharField(max_length=150, unique=True)),
                ("avatar_url", models.CharField(blank=True, max_length=255, null=True)),
                ("name", models.CharField(blank=True, max_length=150, null=True)),
                ("username", models.CharField(blank=True, max_length=35, null=True)),
                ("blog", models.CharField(blank=True, max_length=150, null=True)),
                ("bio", models.CharField(blank=True, max_length=255, null=True)),
                ("company", models.CharField(blank=True, max_length=150, null=True)),
                ("twitter_username", models.CharField(blank=True, max_length=50, null=True)),
                ("scopes", models.CharField(default="", max_length=64)),
                (
                    "granted",
                    models.BooleanField(default=False, help_text="If true, the user has granted the scopes to the app"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsGoogle",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=255)),
                ("refresh_token", models.CharField(max_length=255)),
                ("id_token", models.CharField(default="", max_length=1400)),
                ("google_id", models.CharField(default="", max_length=24)),
                ("expires_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsQuickBooks",
            fields=[
                ("quibooks_code", models.CharField(max_length=255, primary_key=True, serialize=False)),
                ("quibooks_realmid", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CredentialsSlack",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(max_length=255)),
                ("bot_user_id", models.CharField(max_length=50)),
                ("app_id", models.CharField(max_length=50)),
                ("authed_user", models.CharField(max_length=50)),
                ("team_id", models.CharField(max_length=50)),
                ("team_name", models.CharField(max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GithubAcademyUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "username",
                    models.SlugField(
                        blank=True,
                        default=None,
                        help_text="Only used when the username has not been found on 4Geeks",
                        max_length=40,
                        null=True,
                    ),
                ),
                (
                    "storage_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SYNCHED", "Synched"),
                            ("ERROR", "Error"),
                            ("UNKNOWN", "Unknown"),
                            ("PAYMENT_CONFLICT", "Payment conflict"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "storage_action",
                    models.CharField(
                        choices=[("ADD", "Add"), ("DELETE", "Delete"), ("INVITE", "Invite"), ("IGNORE", "Ignore")],
                        default="ADD",
                        max_length=20,
                    ),
                ),
                ("storage_log", models.JSONField(blank=True, default=None, null=True)),
                ("storage_synch_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "user",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GithubAcademyUserLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "storage_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SYNCHED", "Synched"),
                            ("ERROR", "Error"),
                            ("UNKNOWN", "Unknown"),
                            ("PAYMENT_CONFLICT", "Payment conflict"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "storage_action",
                    models.CharField(
                        choices=[("ADD", "Add"), ("DELETE", "Delete"), ("INVITE", "Invite"), ("IGNORE", "Ignore")],
                        default="ADD",
                        max_length=20,
                    ),
                ),
                ("valid_until", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy_user",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="authenticate.githubacademyuser"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GitpodUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("github_username", models.CharField(max_length=40)),
                ("assignee_id", models.CharField(max_length=64)),
                ("position_in_gitpod_team", models.PositiveSmallIntegerField()),
                ("delete_status", models.TextField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="If a gitpod user is not connected to a real user and academy in the database, it will be deleted ASAP",
                        null=True,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admissions.academy",
                    ),
                ),
                (
                    "target_cohort",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admissions.cohort",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("avatar_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                (
                    "bio",
                    models.CharField(
                        blank=True,
                        help_text="User biography in user's language. Will be used if there are no ProfileTranslations.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "show_tutorial",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Set true if you want to show the tutorial on the user UI/UX",
                    ),
                ),
                ("twitter_username", models.CharField(blank=True, max_length=64, null=True)),
                ("github_username", models.CharField(blank=True, max_length=64, null=True)),
                ("portfolio_url", models.CharField(blank=True, max_length=160, null=True)),
                ("linkedin_url", models.CharField(blank=True, max_length=160, null=True)),
                ("blog", models.CharField(blank=True, max_length=150, null=True)),
                (
                    "user",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfileTranslation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        unique=True,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("bio", models.CharField(max_length=255)),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="Profile", on_delete=django.db.models.deletion.CASCADE, to="authenticate.profile"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("slug", models.SlugField(max_length=25, primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("capabilities", models.ManyToManyField(to="authenticate.capability")),
            ],
        ),
        migrations.CreateModel(
            name="ProfileAcademy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.CharField(db_index=True, default=None, max_length=150, null=True)),
                ("first_name", models.CharField(db_index=True, default=None, max_length=100, null=True)),
                ("last_name", models.CharField(db_index=True, default=None, max_length=100, null=True)),
                ("address", models.CharField(blank=True, default=None, max_length=255, null=True)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("INVITED", "Invited"), ("ACTIVE", "Active")],
                        db_index=True,
                        default="INVITED",
                        max_length=15,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "user",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("role", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="authenticate.role")),
            ],
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created", models.DateTimeField(auto_now_add=True, verbose_name="Created")),
                ("key", models.CharField(db_index=True, max_length=40, unique=True)),
                ("token_type", models.CharField(db_index=True, default="temporal", max_length=64)),
                ("expires_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="auth_token",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserInvite",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.CharField(default=None, max_length=150, null=True)),
                ("is_email_validated", models.BooleanField(default=False)),
                ("has_marketing_consent", models.BooleanField(default=False)),
                (
                    "event_slug",
                    models.SlugField(
                        blank=True,
                        help_text="If set, the user signed up because of an Event",
                        max_length=120,
                        null=True,
                    ),
                ),
                (
                    "asset_slug",
                    models.SlugField(
                        blank=True, help_text="If set, the user signed up because of an Asset", max_length=60, null=True
                    ),
                ),
                ("first_name", models.CharField(default=None, max_length=100, null=True)),
                ("last_name", models.CharField(default=None, max_length=100, null=True)),
                ("token", models.CharField(max_length=255, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("REJECTED", "Rejected"),
                            ("ACCEPTED", "Accepted"),
                            ("WAITING_LIST", "Waiting list"),
                        ],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                (
                    "process_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=7,
                    ),
                ),
                ("process_message", models.CharField(default="", max_length=150)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("sent_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("expires_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("country", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("city", models.CharField(blank=True, default=None, max_length=30, null=True)),
                (
                    "latitude",
                    models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=30, null=True),
                ),
                (
                    "longitude",
                    models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=30, null=True),
                ),
                (
                    "conversion_info",
                    models.JSONField(
                        blank=True, default=None, help_text="UTMs and other conversion information.", null=True
                    ),
                ),
                ("email_quality", models.FloatField(blank=True, default=None, null=True)),
                ("email_status", models.JSONField(blank=True, default=None, null=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites_by_author",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cohort",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.cohort",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="authenticate.role",
                    ),
                ),
                (
                    "syllabus",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.syllabus",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
