from unittest.mock import MagicMock, patch

from django.contrib.auth.models import Group

from breathecode.authenticate.management.commands.seed_groups import Command

from ...mixins.new_auth_test_case import AuthTestCase

LATEST_CONTENT_TYPE_ID = 114
LATEST_PERMISSION_ID = 456
JOB_CONTENT_TYPE_ID = 112
CAN_DELETE_JOB_PERMISSION_ID = 447


def sort_by_id(items):
    return sorted(items, key=lambda x: x["id"])


class TokenTestSuite(AuthTestCase):
    """
    ðŸ”½ðŸ”½ðŸ”½ With three User
    """

    def test__execute__with_three_users(self):
        model = self.bc.database.create(user=3)
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(self.bc.format.table(user.groups.all()), [{"id": 1, "name": "Default"}])

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User and MentorProfile
    """

    def test__execute__with_three_users_and_three_mentor_profiles(self):
        mentor_profiles = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(user=3, mentor_profile=mentor_profiles)
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                    {"id": 2, "name": "Mentor"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User and MentorProfile
    """

    def test__execute__with_three_users__with_three_profile_academies__other_role(self):
        profile_academies = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(user=3, profile_academies=profile_academies, role=1)
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User and MentorProfile, role student
    """

    def test__execute__with_three_users__with_three_profile_academies__role_student(self):
        profile_academies = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(user=3, profile_academy=profile_academies, role="student")
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                    {"id": 3, "name": "Student"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User and MentorProfile, role teacher
    """

    def test__execute__with_three_users__with_three_profile_academies__role_teacher(self):
        profile_academies = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(user=3, profile_academy=profile_academies, role="teacher")
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                    {"id": 4, "name": "Teacher"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User, MentorProfile and Profile Academy, role student
    """

    def test__execute__with_three_users_of_all_tables__role_student(self):
        profile_academies = [{"user_id": n} for n in range(1, 4)]
        mentor_profiles = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(
            user=3, profile_academy=profile_academies, mentor_profile=mentor_profiles, role="student"
        )
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                    {"id": 2, "name": "Mentor"},
                    {"id": 3, "name": "Student"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User, MentorProfile and Profile Academy, role teacher
    """

    def test__execute__with_three_users_of_all_tables__role_teacher(self):
        profile_academies = [{"user_id": n} for n in range(1, 4)]
        mentor_profiles = [{"user_id": n} for n in range(1, 4)]
        model = self.bc.database.create(
            user=3, profile_academy=profile_academies, mentor_profile=mentor_profiles, role="teacher"
        )
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        for user in model.user:
            self.assertEqual(
                self.bc.format.table(user.groups.all()),
                [
                    {"id": 1, "name": "Default"},
                    {"id": 2, "name": "Mentor"},
                    {"id": 4, "name": "Teacher"},
                ],
            )

    """
    ðŸ”½ðŸ”½ðŸ”½ With three User, MentorProfile and Profile Academy, three different cases
    """

    def test__execute__with_three_users_of_all_tables__role_student__three_different_cases(self):
        profile_academies = [{"user_id": 1, "role_id": "student"}, {"user_id": 2, "role_id": "teacher"}]
        mentor_profiles = [{"user_id": 2}, {"user_id": 3}]
        roles = [{"slug": x, "name": x} for x in ["student", "teacher"]]
        model = self.bc.database.create(
            user=3, profile_academy=profile_academies, mentor_profile=mentor_profiles, role=roles
        )
        command = Command()
        command.handle()

        # the rest of elements are generated by django, is better ignored it
        self.assertEqual(
            self.bc.database.list_of("auth.Group"),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 3, "name": "Student"},
                {"id": 4, "name": "Teacher"},
            ],
        )

        self.assertEqual(
            self.bc.format.table(model.user[0].groups.all()),
            [
                {"id": 1, "name": "Default"},
                {"id": 3, "name": "Student"},
            ],
        )
        self.assertEqual(
            self.bc.format.table(model.user[1].groups.all()),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
                {"id": 4, "name": "Teacher"},
            ],
        )
        self.assertEqual(
            self.bc.format.table(model.user[2].groups.all()),
            [
                {"id": 1, "name": "Default"},
                {"id": 2, "name": "Mentor"},
            ],
        )
