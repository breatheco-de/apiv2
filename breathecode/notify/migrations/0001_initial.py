# Generated by Django 5.2 on 2025-05-16 04:20

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CohortProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.cohort",),
        ),
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Hook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("event", models.CharField(db_index=True, max_length=64, verbose_name="Event")),
                ("target", models.URLField(max_length=255, verbose_name="Target URL")),
                (
                    "service_id",
                    models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name="Service ID"),
                ),
                (
                    "sample_data",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="Use this as an example on what you will be receiving",
                        null=True,
                    ),
                ),
                ("total_calls", models.IntegerField(default=0)),
                ("last_call_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("last_response_code", models.IntegerField(blank=True, default=None, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "swappable": "HOOK_CUSTOM_MODEL",
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("registration_id", models.TextField(unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HookError",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("message", models.CharField(max_length=255)),
                ("event", models.CharField(db_index=True, max_length=64, verbose_name="Event")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("hooks", models.ManyToManyField(blank=True, related_name="errors", to=settings.HOOK_CUSTOM_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("operation_code", models.CharField(max_length=20)),
                ("message", models.TextField(blank=True, default=None, null=True)),
                ("meta", models.JSONField(blank=True, default=None, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("SENT", "Sent"), ("SEEN", "Seen")],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("INFO", "Info"), ("WARNING", "Warning"), ("ERROR", "Error")],
                        default="INFO",
                        max_length=10,
                    ),
                ),
                ("done_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("sent_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("seen_at", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SlackTeam",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slack_id", models.CharField(max_length=50)),
                ("name", models.CharField(max_length=100)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[("INCOMPLETED", "Incompleted"), ("COMPLETED", "Completed")],
                        default="INCOMPLETED",
                        help_text="Automatically set when synqued from slack",
                        max_length=15,
                    ),
                ),
                (
                    "sync_message",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Contains any success or error messages depending on the status",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("synqued_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.OneToOneField(
                        blank=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="SlackChannel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slack_id", models.CharField(max_length=50)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("topic", models.CharField(blank=True, max_length=500, null=True)),
                ("purpose", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[("INCOMPLETED", "Incompleted"), ("COMPLETED", "Completed")],
                        default="INCOMPLETED",
                        max_length=15,
                    ),
                ),
                (
                    "sync_message",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Contains any success or error messages depending on the status",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("synqued_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cohort",
                    models.OneToOneField(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.cohort",
                    ),
                ),
                ("team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notify.slackteam")),
            ],
        ),
        migrations.CreateModel(
            name="SlackUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slack_id", models.CharField(max_length=50)),
                ("status_text", models.CharField(blank=True, max_length=255, null=True)),
                ("status_emoji", models.CharField(blank=True, max_length=100, null=True)),
                ("real_name", models.CharField(blank=True, max_length=100, null=True)),
                ("display_name", models.CharField(blank=True, max_length=100, null=True)),
                ("email", models.CharField(blank=True, max_length=100, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SlackUserTeam",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "sync_status",
                    models.CharField(
                        choices=[("INCOMPLETED", "Incompleted"), ("COMPLETED", "Completed")],
                        default="INCOMPLETED",
                        max_length=15,
                    ),
                ),
                (
                    "sync_message",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Contains any success or error messages depending on the status",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("synqued_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slack_team", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notify.slackteam")),
                ("slack_user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="notify.slackuser")),
            ],
        ),
    ]
