# Generated by Django 5.2 on 2025-05-16 04:21

import breathecode.feedback.models
import datetime
import django.contrib.auth.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0002_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Review",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "nps_previous_rating",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Automatically calculated based on NPS survey responses",
                        null=True,
                    ),
                ),
                ("total_rating", models.FloatField(blank=True, default=None, null=True)),
                ("public_url", models.URLField(blank=True, default=None, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("REQUESTED", "Requested"),
                            ("DONE", "Done"),
                            ("IGNORE", "Ignore"),
                        ],
                        default="PENDING",
                        help_text="Deleted reviews hav status=Ignore",
                        max_length=9,
                    ),
                ),
                ("status_text", models.CharField(blank=True, default=None, max_length=255, null=True)),
                (
                    "comments",
                    models.TextField(
                        blank=True, default=None, help_text="Student comments when leaving the review", null=True
                    ),
                ),
                ("is_public", models.BooleanField(default=False)),
                ("lang", models.CharField(blank=True, max_length=3, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ReviewPlatform",
            fields=[
                ("slug", models.SlugField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("website", models.URLField()),
                (
                    "review_signup",
                    models.URLField(blank=True, default=None, help_text="Give URL to create a new review", null=True),
                ),
                ("contact_email", models.EmailField(max_length=254)),
                ("contact_name", models.EmailField(blank=True, default=None, max_length=254, null=True)),
                ("contact_phone", models.CharField(blank=True, default=None, max_length=17, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("lang", models.CharField(blank=True, default="en", max_length=3)),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Automatically set from the questions inside", max_length=200, null=True
                    ),
                ),
                (
                    "template_slug",
                    models.CharField(
                        blank=True,
                        help_text="Slug of the template that was used to create this survey",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "is_customized",
                    models.BooleanField(
                        default=False,
                        help_text="Customized surveys are not based on the default questions for a cohort",
                    ),
                ),
                ("max_assistants_to_ask", models.IntegerField(blank=True, default=2, null=True)),
                ("max_teachers_to_ask", models.IntegerField(blank=True, default=1, null=True)),
                ("scores", models.JSONField(blank=True, default=None, null=True)),
                ("response_rate", models.FloatField(blank=True, default=None, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("SENT", "Sent"), ("PENDING", "Pending"), ("PARTIAL", "Partial"), ("FATAL", "Fatal")],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                ("status_json", models.JSONField(blank=True, default=None, null=True)),
                (
                    "duration",
                    models.DurationField(
                        default=datetime.timedelta(days=1),
                        help_text="No one will be able to answer after this period of time",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("sent_at", models.DateTimeField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SurveyTemplate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("lang", models.CharField(help_text="Two-letter language code", max_length=2)),
                (
                    "is_shared",
                    models.BooleanField(default=False, help_text="If true, other academies can use this template"),
                ),
                (
                    "when_asking_event",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very likely",
                            "lowest": "not likely",
                            "survey_subject": "One question about the event you attended today",
                            "title": "How likely are you to recommend events like this to your friends and family?",
                        },
                        help_text="Questions to ask about an event",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_mentor",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very good",
                            "lowest": "not good",
                            "survey_subject": "One question about your mentor",
                            "title": "How has your experience been with your mentor {} so far?",
                        },
                        help_text="Questions to ask about a mentor",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_cohort",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very good",
                            "lowest": "not good",
                            "survey_subject": "One question about your cohort",
                            "title": "How has your experience been studying {} so far?",
                        },
                        help_text="Questions to ask about a cohort",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_academy",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very likely",
                            "lowest": "not likely",
                            "survey_subject": "One question about the academy",
                            "title": "How likely are you to recommend {} to your friends and family?",
                        },
                        help_text="Questions to ask about the academy",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_mentorshipsession",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very useful",
                            "lowest": "not useful",
                            "survey_subject": "One question about your last mentoring session",
                            "title": "How was your experience in your mentoring session with {}?",
                        },
                        help_text="Questions to ask about a mentorship session",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_platform",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very good",
                            "lowest": "not good",
                            "survey_subject": "One question about the learning platform",
                            "title": "How has your experience been with the platform and content so far?",
                        },
                        help_text="Questions to ask about the 4Geeks.com platform",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_liveclass_mentor",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very good",
                            "lowest": "not good",
                            "survey_subject": "One question about the live class mentor",
                            "title": "How would you rate your teacher's performance today?",
                        },
                        help_text="Questions to ask about a live class mentor",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_mentor_communication",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very clear",
                            "lowest": "not clear",
                            "survey_subject": "One question about the live class mentor communication",
                            "title": "How clear was the teacher in explaining the concepts?",
                        },
                        help_text="Questions to ask about mentor communication during class",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "when_asking_mentor_participation",
                    models.JSONField(
                        blank=True,
                        default={
                            "highest": "very good",
                            "lowest": "not good",
                            "survey_subject": "One question about the live class mentor practice",
                            "title": "Did the teacher encourage participation and effectively resolve your doubts?",
                        },
                        help_text="Questions to ask about class how the mentor answers and encoursges participation",
                        null=True,
                        validators=[breathecode.feedback.models.validate_question_structure],
                    ),
                ),
                (
                    "additional_questions",
                    models.JSONField(
                        blank=True, help_text="Additional custom questions in the same structure", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CohortProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.cohort",),
        ),
        migrations.CreateModel(
            name="CohortUserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.cohortuser",),
        ),
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AcademyFeedbackSettings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "liveclass_survey_cohort_exclusions",
                    models.CharField(
                        blank=True,
                        help_text="Comma separated list of cohort IDs to exclude from live class surveys, leave empty to disable",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback_settings",
                        to="admissions.academy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Academy Feedback Settings",
                "verbose_name_plural": "Academy Feedback Settings",
            },
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=200)),
                ("lowest", models.CharField(default="not likely", max_length=50)),
                ("highest", models.CharField(default="very likely", max_length=50)),
                ("lang", models.CharField(blank=True, default="en", max_length=3)),
                (
                    "question_by_slug",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Ideal to create new standarized questions",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("score", models.IntegerField(blank=True, default=None, null=True)),
                ("comment", models.TextField(blank=True, default=None, max_length=1000, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SENT", "Sent"),
                            ("ANSWERED", "Answered"),
                            ("OPENED", "Opened"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                ("opened_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("sent_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="admissions.academy",
                    ),
                ),
            ],
        ),
    ]
