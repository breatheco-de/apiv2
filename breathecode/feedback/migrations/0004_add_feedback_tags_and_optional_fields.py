# Generated by Django 5.2 on 2025-10-27 20:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("admissions", "0008_alter_academy_white_label_features"),
        ("feedback", "0003_alter_surveytemplate_when_asking_academy"),
    ]

    operations = [
        migrations.AddField(
            model_name="answer",
            name="course_slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional course slug from marketing.Course model for filtering and reporting",
                max_length=150,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="answer",
            name="syllabus",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Optional syllabus association for filtering and reporting",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admissions.syllabus",
            ),
        ),
        migrations.AddField(
            model_name="review",
            name="course_slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional course slug from marketing.Course model for filtering and reporting",
                max_length=150,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="review",
            name="syllabus",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Optional syllabus association for filtering and reporting",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admissions.syllabus",
            ),
        ),
        migrations.CreateModel(
            name="FeedbackTag",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of what this tag represents", null=True),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=100, help_text="Lower numbers appear first. Use for sorting tags by importance"
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(
                        default=False,
                        help_text="If False and academy is null, tag is shared among all academies. If True, tag is only visible to its academy",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        help_text="If null, tag is available to all academies (when is_private=False)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="admissions.academy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feedback Tag",
                "verbose_name_plural": "Feedback Tags",
                "ordering": ["priority", "title"],
            },
        ),
        migrations.AddField(
            model_name="answer",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tags for categorizing this answer",
                related_name="answers",
                to="feedback.feedbacktag",
            ),
        ),
        migrations.AddField(
            model_name="review",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tags for categorizing this review",
                related_name="reviews",
                to="feedback.feedbacktag",
            ),
        ),
    ]
