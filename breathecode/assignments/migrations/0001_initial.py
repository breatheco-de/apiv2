# Generated by Django 5.2 on 2025-05-16 04:21

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0002_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RepositoryWhiteList",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider", models.CharField(choices=[("GITHUB", "GitHub")], default="GITHUB", max_length=15)),
                ("repository_user", models.CharField(max_length=256)),
                ("repository_name", models.CharField(max_length=256)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="CohortProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("admissions.cohort",),
        ),
        migrations.CreateModel(
            name="UserProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.user",),
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AssignmentTelemetry",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("asset_slug", models.CharField(max_length=200)),
                (
                    "telemetry",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="Incoming JSON from LearnPack with detailed telemetry info",
                        null=True,
                    ),
                ),
                (
                    "engagement_score",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Calculated score from 0 to 100 based on the telemetry",
                        null=True,
                    ),
                ),
                (
                    "frustration_score",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Calculated score 0 to 100 based on the telemetry",
                        null=True,
                    ),
                ),
                (
                    "metrics_algo_version",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Version of the algorithm used to calculate the metrics",
                        null=True,
                    ),
                ),
                (
                    "metrics",
                    models.JSONField(
                        blank=True, default=None, help_text="Calculated metrics based on the telemetry", null=True
                    ),
                ),
                (
                    "total_time",
                    models.DurationField(
                        blank=True, default=None, help_text="Total time spent on the exercise", null=True
                    ),
                ),
                (
                    "completion_rate",
                    models.FloatField(
                        blank=True,
                        default=None,
                        help_text="Completion rate from 0 to 100 of the exercise in percentage",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="FinalProject",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=150)),
                ("one_line_desc", models.CharField(max_length=150)),
                ("description", models.TextField()),
                (
                    "project_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done")],
                        default="PENDING",
                        help_text="Done projects will be reviewed for publication",
                        max_length=15,
                    ),
                ),
                (
                    "revision_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("IGNORED", "Ignored"),
                        ],
                        default="PENDING",
                        help_text="Only approved projects will display on the feature projects list",
                        max_length=15,
                    ),
                ),
                ("revision_message", models.TextField(blank=True, default=None, null=True)),
                (
                    "visibility_status",
                    models.CharField(
                        choices=[("PRIVATE", "Private"), ("UNLISTED", "Unlisted"), ("PUBLIC", "Public")],
                        default="PRIVATE",
                        help_text="Public project will be visible to other users",
                        max_length=15,
                    ),
                ),
                ("repo_url", models.URLField(blank=True, default=None, null=True)),
                ("public_url", models.URLField(blank=True, default=None, null=True)),
                ("logo_url", models.URLField(blank=True, default=None, null=True)),
                ("screenshot", models.URLField(blank=True, default=None, null=True)),
                ("slides_url", models.URLField(blank=True, default=None, null=True)),
                ("video_demo_url", models.URLField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cohort",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.cohort"
                    ),
                ),
                ("members", models.ManyToManyField(related_name="final_projects", to=settings.AUTH_USER_MODEL)),
                (
                    "repo_owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="projects_owned",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LearnPackWebhook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_streaming", models.BooleanField()),
                ("event", models.CharField(max_length=15)),
                (
                    "payload",
                    models.JSONField(blank=True, default=None, help_text="Will be set by learnpack", null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("IGNORED", "Ignored"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                ("status_text", models.TextField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "telemetry",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignmenttelemetry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepositoryDeletionOrder",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("provider", models.CharField(choices=[("GITHUB", "GitHub")], default="GITHUB", max_length=15)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("ERROR", "Error"),
                            ("DELETED", "Deleted"),
                            ("TRANSFERRED", "Transferred"),
                            ("NO_STARTED", "No started"),
                            ("TRANSFERRING", "Transferring"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                ("status_text", models.TextField(blank=True, default=None, null=True)),
                ("repository_user", models.CharField(max_length=256)),
                ("repository_name", models.CharField(max_length=256)),
                ("notified_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("starts_transferring_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserAttachment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=150, unique=True)),
                ("name", models.CharField(max_length=150)),
                ("mime", models.CharField(max_length=120)),
                ("url", models.URLField(max_length=255)),
                ("hash", models.CharField(max_length=64)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("associated_slug", models.SlugField(max_length=150)),
                ("title", models.CharField(db_index=True, max_length=150)),
                ("rigobot_repository_id", models.IntegerField(blank=True, db_index=True, default=None, null=True)),
                (
                    "task_status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done")],
                        db_index=True,
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                (
                    "revision_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("IGNORED", "Ignored"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=15,
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("PROJECT", "project"),
                            ("QUIZ", "quiz"),
                            ("LESSON", "lesson"),
                            ("EXERCISE", "Exercise"),
                        ],
                        db_index=True,
                        max_length=15,
                    ),
                ),
                ("github_url", models.CharField(blank=True, default=None, max_length=150, null=True)),
                ("live_url", models.CharField(blank=True, default=None, max_length=150, null=True)),
                ("description", models.TextField(blank=True, max_length=450)),
                ("opened_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="The moment when the student checked the revision",
                        null=True,
                    ),
                ),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        default=None,
                        help_text="The moment when the teacher marks the task as ACCEPTED or REJECTED",
                        null=True,
                    ),
                ),
                ("delivered_at", models.DateTimeField(blank=True, db_index=True, default=None, null=True)),
                (
                    "subtasks",
                    models.JSONField(
                        blank=True,
                        default=None,
                        help_text="If readme contains checkboxes they will be converted into substasks and this json will kep track of completition",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cohort",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.cohort"
                    ),
                ),
                (
                    "telemetry",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="Learnpack telemetry json will be stored and shared among all the assignments form the same associalted_slug",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="assignments.assignmenttelemetry",
                    ),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ("attachments", models.ManyToManyField(blank=True, to="assignments.userattachment")),
            ],
        ),
    ]
