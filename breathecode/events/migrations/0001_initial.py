# Generated by Django 5.2 on 2025-05-16 04:20

import breathecode.utils.validators.language
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("admissions", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, default=None, max_length=150, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("description", models.TextField(blank=True, default=None, max_length=2000, null=True)),
                ("excerpt", models.TextField(blank=True, default=None, max_length=500, null=True)),
                (
                    "asset_slug",
                    models.SlugField(
                        blank=True,
                        default=None,
                        help_text="Is the event is about a project, this field will have the asset slug of that project.",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("title", models.CharField(blank=True, default=None, max_length=255, null=True)),
                (
                    "lang",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=5,
                        null=True,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True,
                        choices=[("USD", "USD"), ("CRC", "CRC"), ("CLP", "CLP"), ("EUR", "EUR"), ("UYU", "UYU")],
                        default="USD",
                        max_length=3,
                    ),
                ),
                ("tags", models.CharField(blank=True, default="", max_length=100)),
                (
                    "free_for_all",
                    models.BooleanField(
                        default=False,
                        help_text="Determines if any user (From bootcamp or not) can join the event for free.",
                    ),
                ),
                (
                    "free_for_bootcamps",
                    models.BooleanField(
                        blank=True,
                        default=True,
                        help_text="Determines if users that belong to an academy not available as saas can join the event for free.",
                        null=True,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="URL can be blank if the event will be synched with EventBrite, it will be filled automatically by the API.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("banner", models.URLField(max_length=255)),
                ("capacity", models.IntegerField()),
                (
                    "live_stream_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="This URL should have the URL of the meeting if it is an online event, if it's not online it should be empty.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "recording_url",
                    models.URLField(
                        blank=True,
                        default=None,
                        help_text="This will be the URL of the workshop's recording, added once it's finished",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("starting_at", models.DateTimeField()),
                (
                    "ending_at",
                    models.DateTimeField(
                        help_text="This field contains the value of when the event is supposed to be finished."
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True,
                        default=None,
                        help_text="This field contains the value of when the event actually finished.",
                        null=True,
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Host name that appear in Eventbrite",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("online_event", models.BooleanField(default=False)),
                ("eventbrite_id", models.CharField(blank=True, default=None, max_length=80, null=True, unique=True)),
                ("eventbrite_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("eventbrite_organizer_id", models.CharField(blank=True, default=None, max_length=80, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACTIVE", "Active"),
                            ("DRAFT", "Draft"),
                            ("DELETED", "Deleted"),
                            ("FINISHED", "Finished"),
                        ],
                        default="DRAFT",
                        max_length=9,
                    ),
                ),
                (
                    "eventbrite_status",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="One of: draft, live, started, ended, completed and canceled",
                        max_length=9,
                        null=True,
                    ),
                ),
                ("sync_with_eventbrite", models.BooleanField(default=False)),
                (
                    "eventbrite_sync_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PERSISTED", "Persisted"),
                            ("ERROR", "Error"),
                            ("WARNING", "Warning"),
                            ("SYNCHED", "Synched"),
                        ],
                        default="PENDING",
                        help_text="One of: PENDING, PERSISTED or ERROR depending on how the eventbrite sync status",
                        max_length=9,
                    ),
                ),
                ("eventbrite_sync_description", models.TextField(blank=True, default=None, max_length=255, null=True)),
                ("published_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="If true, then it will be shown in cards and the workshop's landing page. Otherwise it will be hidden.",
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "host_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="4geeks user that is the host of the event",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_host",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventbriteWebhook",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("api_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("user_id", models.CharField(blank=True, default=None, max_length=20, null=True)),
                ("action", models.CharField(blank=True, default=None, max_length=15, null=True)),
                ("webhook_id", models.CharField(blank=True, default=None, max_length=20, null=True)),
                (
                    "payload",
                    models.JSONField(blank=True, default=None, help_text="Will be set by async task", null=True),
                ),
                ("organization_id", models.CharField(blank=True, default=None, max_length=20, null=True)),
                ("endpoint_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                ("status_text", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "attendee",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="events.event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventCheckin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.EmailField(max_length=150)),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("DONE", "Done")], default="PENDING", max_length=9
                    ),
                ),
                ("utm_medium", models.CharField(blank=True, default=None, max_length=70, null=True)),
                ("utm_campaign", models.CharField(blank=True, default=None, max_length=70, null=True)),
                ("utm_source", models.CharField(blank=True, default=None, max_length=70, null=True)),
                ("utm_url", models.CharField(blank=True, default=None, max_length=2000, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("attended_at", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "attendee",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="events.event")),
            ],
        ),
        migrations.CreateModel(
            name="EventContext",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "recap",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="This field will be filled automatically using AI after the event finishes.",
                        max_length=850,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("PENDING", "Pending"), ("SUCCESS", "Success"), ("ERROR", "Error")],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                (
                    "status_text",
                    models.CharField(blank=True, help_text="Fill if error happened in the task", max_length=255),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="context", to="events.event"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=150, unique=True)),
                ("name", models.CharField(max_length=150)),
                (
                    "description",
                    models.CharField(
                        default="", help_text="This will be publicly shown to 4geeks.com users", max_length=255
                    ),
                ),
                ("icon_url", models.URLField(blank=True, default=None, null=True)),
                (
                    "lang",
                    models.CharField(
                        default="en",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                (
                    "free_for_bootcamps",
                    models.BooleanField(
                        default=True,
                        help_text="Users that belong to other no-saas academies will be able to join without consuming",
                    ),
                ),
                (
                    "allow_shared_creation",
                    models.BooleanField(
                        default=True, help_text="Other academies are allowed to create events of this type"
                    ),
                ),
                (
                    "technologies",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Add comma-separated list of technologies",
                        max_length=200,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="event_type",
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to="events.eventtype"
            ),
        ),
        migrations.CreateModel(
            name="EventTypeVisibilitySetting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("academy", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.academy")),
                (
                    "cohort",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.cohort"
                    ),
                ),
                (
                    "syllabus",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.syllabus"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="eventtype",
            name="visibility_settings",
            field=models.ManyToManyField(
                blank=True,
                help_text="Visibility has to be configured every academy separately",
                to="events.eventtypevisibilitysetting",
            ),
        ),
        migrations.CreateModel(
            name="LiveClass",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("log", models.JSONField(default=dict)),
                ("remote_meeting_url", models.URLField()),
                ("hash", models.CharField(max_length=40, unique=True)),
                ("started_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("ended_at", models.DateTimeField(blank=True, default=None, null=True)),
                ("starting_at", models.DateTimeField(db_index=True)),
                ("ending_at", models.DateTimeField(db_index=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cohort_time_slot",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="admissions.cohorttimeslot"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("eventbrite_id", models.CharField(blank=True, max_length=30, unique=True)),
                ("eventbrite_key", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("name", models.CharField(blank=True, default="", max_length=100, null=True)),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PERSISTED", "Persisted"),
                            ("ERROR", "Error"),
                            ("WARNING", "Warning"),
                            ("SYNCHED", "Synched"),
                        ],
                        default="PENDING",
                        help_text="One of: PENDING, PERSISTED or ERROR depending on how the eventbrite sync status",
                        max_length=9,
                    ),
                ),
                ("sync_desc", models.TextField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="organization",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.organization"
            ),
        ),
        migrations.CreateModel(
            name="Organizer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("eventbrite_id", models.CharField(blank=True, max_length=30, unique=True)),
                ("name", models.CharField(blank=True, default=None, max_length=100, null=True)),
                ("description", models.TextField(blank=True, default=None, max_length=500, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="events.organization"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, default=None, max_length=200, null=True)),
                ("street_address", models.CharField(blank=True, default=None, max_length=250, null=True)),
                ("country", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("city", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("latitude", models.DecimalField(decimal_places=15, default=0, max_digits=20)),
                ("longitude", models.DecimalField(decimal_places=15, default=0, max_digits=20)),
                ("state", models.CharField(blank=True, default=None, max_length=30, null=True)),
                ("zip_code", models.CharField(blank=True, default=None, max_length=15, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("DRAFT", "Draft"), ("DELETED", "Deleted")],
                        default="DRAFT",
                        max_length=9,
                    ),
                ),
                ("eventbrite_id", models.CharField(blank=True, default=None, max_length=80, null=True, unique=True)),
                ("eventbrite_url", models.CharField(blank=True, default=None, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.organization"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="venue",
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to="events.venue"
            ),
        ),
    ]
