{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Here you should find all related to apiv2 project that serves 4geeks.com and 4geeksacademy.com, I will recommend you that read these articles in order.</p>"},{"location":"4geeks-libraries/","title":"4Geeks libraries","text":"<ul> <li>Capy Core.</li> <li>Celery Task Manager.</li> <li>Linked Services.</li> </ul>"},{"location":"endpoints/","title":"Enpoints Documentation","text":"<ul> <li>Postman</li> <li>OpenApi</li> </ul>"},{"location":"registry-trusted-urls/","title":"Registry Trusted URLs System","text":"<p>The BreatheCode registry module includes a trusted URL system that allows skipping validation for specific domains and URLs that are known to be reliable but may have intermittent connectivity issues.</p>"},{"location":"registry-trusted-urls/#overview","title":"Overview","text":"<p>During asset validation, the system checks all URLs found in README files. Some external domains may have temporary connectivity issues, rate limiting, or other problems that cause validation to fail even though the URLs are valid and trusted.</p> <p>The trusted URL system provides a way to skip validation for these problematic but reliable URLs.</p>"},{"location":"registry-trusted-urls/#configuration","title":"Configuration","text":""},{"location":"registry-trusted-urls/#trusted-domains","title":"Trusted Domains","text":"<p>Add domains to the <code>TRUSTED_DOMAINS</code> set in <code>breathecode/registry/utils.py</code>:</p> <pre><code>TRUSTED_DOMAINS = {\n    'exploit-db.com',\n    'docs.python.org',\n    'developer.mozilla.org',\n    'stackoverflow.com',\n}\n</code></pre> <p>Any URL from these domains will be skipped during validation, regardless of the specific path.</p>"},{"location":"registry-trusted-urls/#trusted-urls","title":"Trusted URLs","text":"<p>Add specific URLs to the <code>TRUSTED_URLS</code> set in <code>breathecode/registry/utils.py</code>:</p> <pre><code>TRUSTED_URLS = {\n    'https://example.com/specific/path',\n    'https://another-site.com/another/path',\n}\n</code></pre> <p>Only these exact URLs (ignoring query strings and fragments) will be skipped during validation.</p>"},{"location":"registry-trusted-urls/#how-it-works","title":"How It Works","text":"<ol> <li>Domain Matching: The system extracts the domain from the URL and checks if it's in the trusted domains list</li> <li>www. Handling: The <code>www.</code> prefix is automatically removed for domain comparison</li> <li>URL Normalization: Query strings and fragments are removed when comparing against trusted URLs</li> <li>Case Insensitive: Domain comparison is case-insensitive</li> </ol>"},{"location":"registry-trusted-urls/#examples","title":"Examples","text":"<pre><code># These URLs will be trusted if 'exploit-db.com' is in TRUSTED_DOMAINS:\n'https://exploit-db.com/exploits/12345'\n'http://www.exploit-db.com/some/path?query=test#fragment'\n'https://exploit-db.com/'\n\n# These URLs will NOT be trusted:\n'https://untrusted-domain.com/path'\n'https://example.com/path'  # (unless specifically added)\n</code></pre>"},{"location":"registry-trusted-urls/#dynamic-configuration","title":"Dynamic Configuration","text":"<p>You can also add trusted domains and URLs at runtime:</p> <pre><code>from breathecode.registry.utils import add_trusted_domain, add_trusted_url\n\n# Add a domain\nadd_trusted_domain('new-trusted-domain.com')\n\n# Add a specific URL\nadd_trusted_url('https://example.com/special/path?param=value')\n</code></pre>"},{"location":"registry-trusted-urls/#validation-output","title":"Validation Output","text":"<p>When a trusted URL is encountered, you'll see this message in the validation output:</p> <pre><code>\u2705 Skipping validation for trusted URL: https://exploit-db.com/exploits/12345\n</code></pre>"},{"location":"registry-trusted-urls/#benefits","title":"Benefits","text":"<ul> <li>Reliability: Avoid false negatives from temporarily unreachable but valid URLs</li> <li>Performance: Skip time-consuming network requests for known good URLs</li> <li>Maintenance: Reduce manual intervention when trusted sites have temporary issues</li> </ul>"},{"location":"registry-trusted-urls/#security-considerations","title":"Security Considerations","text":"<ul> <li>Only add domains and URLs that you absolutely trust</li> <li>Regularly review the trusted lists to ensure they're still appropriate</li> <li>Consider the security implications of skipping validation for external content</li> </ul>"},{"location":"registry-trusted-urls/#usage-guidelines","title":"Usage Guidelines","text":"<ol> <li>Add domains sparingly: Only add domains that frequently cause validation issues but are known to be reliable</li> <li>Document additions: Add comments explaining why a domain/URL was added to the trusted list</li> <li>Monitor regularly: Periodically check if trusted domains are still necessary</li> <li>Prefer domains over URLs: When possible, trust entire domains rather than specific URLs for easier maintenance </li> </ol>"},{"location":"workers/","title":"Workers de Celery - Diagn\u00f3stico y Soluci\u00f3n de Problemas","text":""},{"location":"workers/#problema-identificado","title":"Problema Identificado","text":""},{"location":"workers/#sintomas","title":"S\u00edntomas","text":"<ul> <li>Los workers de Celery aparecen como \"up\" en <code>heroku ps</code> pero no procesan tareas</li> <li>Solo algunos workers (8-12) est\u00e1n procesando tareas activamente</li> <li>Otros workers (1-7) est\u00e1n inactivos mostrando solo logs de pgbouncer</li> <li>La cola de RabbitMQ se satura debido a la falta de capacidad de procesamiento</li> </ul>"},{"location":"workers/#diagnostico-visual","title":"Diagn\u00f3stico Visual","text":"<pre><code># Ver estado de todos los workers\nheroku ps --app breathecode\n\n# Ver logs de un worker espec\u00edfico (worker inactivo)\nheroku logs --tail --app breathecode --dyno=celeryworker.1\n\n# Ver logs de un worker espec\u00edfico (worker activo)\nheroku logs --tail --app breathecode --dyno=celeryworker.8\n</code></pre>"},{"location":"workers/#indicadores-de-workers-inactivos","title":"Indicadores de Workers Inactivos","text":"<ul> <li>Solo muestran logs de pgbouncer: <code>0 xacts/s, 0 queries/s</code></li> <li>No hay logs de Celery o procesamiento de tareas</li> <li>Workers aparecen como \"up\" pero sin actividad real</li> </ul>"},{"location":"workers/#comandos-de-diagnostico","title":"Comandos de Diagn\u00f3stico","text":""},{"location":"workers/#1-verificar-estado-de-workers","title":"1. Verificar Estado de Workers","text":"<pre><code># Ver todos los workers activos\nheroku ps --app breathecode\n\n# Ver workers espec\u00edficos\nheroku ps --app breathecode | grep celeryworker\n</code></pre>"},{"location":"workers/#2-ver-logs-de-workers-especificos","title":"2. Ver Logs de Workers Espec\u00edficos","text":"<pre><code># Ver logs de un worker espec\u00edfico\nheroku logs --tail --app breathecode --dyno=celeryworker.1\nheroku logs --tail --app breathecode --dyno=celeryworker.2\nheroku logs --tail --app breathecode --dyno=celeryworker.3\n\n# Ver logs de workers activos para comparar\nheroku logs --tail --app breathecode --dyno=celeryworker.8\nheroku logs --tail --app breathecode --dyno=celeryworker.9\n</code></pre>"},{"location":"workers/#3-verificar-conexion-al-broker","title":"3. Verificar Conexi\u00f3n al Broker","text":"<pre><code># Verificar si los workers pueden conectarse al broker\nheroku run \"celery -A breathecode.celery inspect ping\" --app breathecode\n\n# Ver tareas activas\nheroku run \"celery -A breathecode.celery inspect active\" --app breathecode\n\n# Ver estad\u00edsticas de workers\nheroku run \"celery -A breathecode.celery inspect stats\" --app breathecode\n</code></pre>"},{"location":"workers/#4-verificar-configuracion-del-broker","title":"4. Verificar Configuraci\u00f3n del Broker","text":"<pre><code># Ver variables de entorno relacionadas con el broker\nheroku config --app breathecode | grep -E \"(REDIS|RABBIT|BROKER|CLOUDAMQP)\"\n</code></pre>"},{"location":"workers/#proceso-de-solucion","title":"Proceso de Soluci\u00f3n","text":""},{"location":"workers/#paso-1-diagnostico-inicial","title":"Paso 1: Diagn\u00f3stico Inicial","text":"<pre><code># 1. Verificar estado de workers\nheroku ps --app breathecode\n\n# 2. Ver logs de workers inactivos\nheroku logs --tail --app breathecode --dyno=celeryworker.1\n\n# 3. Ver logs de workers activos para comparar\nheroku logs --tail --app breathecode --dyno=celeryworker.8\n</code></pre>"},{"location":"workers/#paso-2-verificar-conexion-al-broker","title":"Paso 2: Verificar Conexi\u00f3n al Broker","text":"<pre><code># Verificar conexi\u00f3n de todos los workers\nheroku run \"celery -A breathecode.celery inspect ping\" --app breathecode\n</code></pre>"},{"location":"workers/#paso-3-reiniciar-workers-inactivos","title":"Paso 3: Reiniciar Workers Inactivos","text":"<pre><code># Opci\u00f3n 1: Reiniciar workers espec\u00edficos\nheroku ps:restart celeryworker.1 --app breathecode\nheroku ps:restart celeryworker.2 --app breathecode\nheroku ps:restart celeryworker.3 --app breathecode\nheroku ps:restart celeryworker.4 --app breathecode\nheroku ps:restart celeryworker.5 --app breathecode\nheroku ps:restart celeryworker.6 --app breathecode\n\n# Opci\u00f3n 2: Reiniciar todos los workers (recomendado)\nheroku ps:restart celeryworker --app breathecode\n</code></pre>"},{"location":"workers/#paso-4-verificacion-post-solucion","title":"Paso 4: Verificaci\u00f3n Post-Soluci\u00f3n","text":"<pre><code># 1. Esperar 2-3 minutos para que los workers se estabilicen\n# 2. Verificar estado de workers\nheroku ps --app breathecode\n\n# 3. Verificar conexi\u00f3n al broker\nheroku run \"celery -A breathecode.celery inspect ping\" --app breathecode\n\n# 4. Ver logs de workers para confirmar que est\u00e1n procesando tareas\nheroku logs --tail --app breathecode --dyno=celeryworker.1\nheroku logs --tail --app breathecode --dyno=celeryworker.2\n\n# 5. Ver tareas activas\nheroku run \"celery -A breathecode.celery inspect active\" --app breathecode\n</code></pre>"},{"location":"workers/#comandos-de-monitoreo-continuo","title":"Comandos de Monitoreo Continuo","text":""},{"location":"workers/#monitoreo-de-workers-en-tiempo-real","title":"Monitoreo de Workers en Tiempo Real","text":"<pre><code># Ver logs de todos los workers\nheroku logs --tail --app breathecode\n\n# Ver solo logs de celery workers\nheroku logs --tail --app breathecode | grep celeryworker\n\n# Monitoreo de un worker espec\u00edfico\nheroku logs --tail --app breathecode --dyno=celeryworker.1\n</code></pre>"},{"location":"workers/#comandos-de-diagnostico-de-tareas","title":"Comandos de Diagn\u00f3stico de Tareas","text":"<pre><code># Ver tareas atascadas\npoetry run python manage.py check_task_status --hours=24 --check-execution --limit=10\n\n# Ver resumen de TaskManager\npoetry run python manage.py clear_task_manager_queue --show-summary\n\n# Ver tareas por estado\npoetry run python manage.py clear_task_manager_queue --status SCHEDULED --show-summary\npoetry run python manage.py clear_task_manager_queue --status PENDING --show-summary\npoetry run python manage.py clear_task_manager_queue --status ERROR --show-summary\n</code></pre>"},{"location":"workers/#causas-comunes-del-problema","title":"Causas Comunes del Problema","text":""},{"location":"workers/#1-problemas-de-conexion-al-broker","title":"1. Problemas de Conexi\u00f3n al Broker","text":"<ul> <li>Workers no pueden conectarse a Redis/RabbitMQ</li> <li>Configuraci\u00f3n incorrecta de variables de entorno</li> <li>Problemas de red entre Heroku y el broker</li> </ul>"},{"location":"workers/#2-configuracion-de-autoscaling","title":"2. Configuraci\u00f3n de Autoscaling","text":"<ul> <li>Workers en modo \"standby\"</li> <li>Configuraci\u00f3n incorrecta de <code>CELERY_MIN_WORKERS</code> y <code>CELERY_MAX_WORKERS</code></li> </ul>"},{"location":"workers/#3-problemas-de-memoria","title":"3. Problemas de Memoria","text":"<ul> <li>Workers que se reinician constantemente</li> <li>L\u00edmites de memoria alcanzados</li> </ul>"},{"location":"workers/#4-problemas-de-configuracion-de-colas","title":"4. Problemas de Configuraci\u00f3n de Colas","text":"<ul> <li>Workers asignados a colas espec\u00edficas</li> <li>Configuraci\u00f3n incorrecta de routing</li> </ul>"},{"location":"workers/#prevencion","title":"Prevenci\u00f3n","text":""},{"location":"workers/#monitoreo-regular","title":"Monitoreo Regular","text":"<pre><code># Script de monitoreo diario\nheroku run \"celery -A breathecode.celery inspect ping\" --app breathecode\nheroku ps --app breathecode\n</code></pre>"},{"location":"workers/#configuracion-recomendada","title":"Configuraci\u00f3n Recomendada","text":"<ul> <li>Mantener <code>CELERY_MIN_WORKERS</code> y <code>CELERY_MAX_WORKERS</code> balanceados</li> <li>Monitorear logs de workers regularmente</li> <li>Verificar conexi\u00f3n al broker peri\u00f3dicamente</li> </ul>"},{"location":"workers/#notas-importantes","title":"Notas Importantes","text":"<ul> <li>Los workers pueden aparecer como \"up\" en Heroku pero no estar procesando tareas</li> <li>Los logs de pgbouncer (0 queries/s) indican workers inactivos</li> <li>El reinicio de workers es la soluci\u00f3n m\u00e1s efectiva para problemas de conexi\u00f3n</li> <li>Siempre verificar la conexi\u00f3n al broker despu\u00e9s de reiniciar workers</li> </ul>"},{"location":"advanced/csv-export-customization/","title":"CSV Export Customization","text":""},{"location":"advanced/csv-export-customization/#overview","title":"Overview","text":"<p>The CSV export system now supports customizable field selection with labels, dot notation for related fields, and calculated properties/methods.</p>"},{"location":"advanced/csv-export-customization/#how-it-works","title":"How It Works","text":""},{"location":"advanced/csv-export-customization/#1-define-csv-fields-in-your-model","title":"1. Define CSV Fields in Your Model","text":"<p>Add a static method <code>get_csv_fields()</code> to your model that returns a list of tuples:</p> <pre><code>class EventCheckin(models.Model):\n    # ... fields ...\n\n    @staticmethod\n    def get_csv_fields():\n        \"\"\"\n        Define custom fields for CSV export with user-friendly labels.\n        Returns a list of tuples: (header_name, field_path)\n        \"\"\"\n        return [\n            ('ID', 'id'),                              # Simple field\n            ('Email', 'email'),                        # Simple field\n            ('Event Title', 'event.title'),            # Related field (dot notation)\n            ('Academy', 'event.academy.name'),         # Deep relation (dot notation)\n            ('Attendee Name', 'attendee_name'),        # Calculated property\n        ]\n\n    @property\n    def attendee_name(self):\n        \"\"\"Calculated field example\"\"\"\n        if self.attendee:\n            return f\"{self.attendee.first_name} {self.attendee.last_name}\".strip()\n        return ''\n</code></pre>"},{"location":"advanced/csv-export-customization/#2-field-types-supported","title":"2. Field Types Supported","text":""},{"location":"advanced/csv-export-customization/#simple-fields","title":"Simple Fields","text":"<pre><code>('Email', 'email')  # Direct model field\n</code></pre>"},{"location":"advanced/csv-export-customization/#related-fields-with-dot-notation","title":"Related Fields with Dot Notation","text":"<pre><code>('Event Title', 'event.title')              # One level deep\n('Academy', 'event.academy.name')           # Multiple levels deep\n('Attendee First Name', 'attendee.first_name')\n</code></pre>"},{"location":"advanced/csv-export-customization/#calculated-properties","title":"Calculated Properties","text":"<pre><code>('Attendee Name', 'attendee_name')  # References @property attendee_name\n\n@property\ndef attendee_name(self):\n    if self.attendee:\n        return f\"{self.attendee.first_name} {self.attendee.last_name}\".strip()\n    return ''\n</code></pre>"},{"location":"advanced/csv-export-customization/#methods-without-property","title":"Methods (without @property)","text":"<pre><code>('Status Text', 'get_status_display')  # Django's built-in method\n\ndef custom_method(self):\n    return \"calculated value\"\n</code></pre>"},{"location":"advanced/csv-export-customization/#3-csv-output","title":"3. CSV Output","text":"<p>The exported CSV will have: - Custom column headers (first item in tuple) - Related data resolved via dot notation - Calculated values from properties/methods - Null-safe handling (returns empty string for None values)</p> <p>Example output: <pre><code>ID,Email,Attendee First Name,Attendee Last Name,Attendee Name,Event ID,Event Slug,Event Title,Academy,Status,Created At,Attended At,UTM Source,UTM Medium,UTM Campaign\n1,john@example.com,John,Doe,John Doe,42,python-workshop,Python Workshop,Miami Campus,DONE,2024-01-15 10:30:00,2024-01-15 11:00:00,google,cpc,workshop\n</code></pre></p>"},{"location":"advanced/csv-export-customization/#benefits","title":"Benefits","text":"<ul> <li>\u2705 Custom Labels: User-friendly column names</li> <li>\u2705 Related Data: Access foreign key fields without joins</li> <li>\u2705 Calculated Fields: Include computed values</li> <li>\u2705 Flexible: Mix simple, related, and calculated fields</li> <li>\u2705 Backward Compatible: Falls back to all model fields if not defined</li> <li>\u2705 Clean Code: Everything in the model, no separate serializers needed</li> </ul>"},{"location":"advanced/csv-export-customization/#implementation-details","title":"Implementation Details","text":""},{"location":"advanced/csv-export-customization/#file-updates","title":"File Updates","text":"<ol> <li><code>breathecode/monitoring/actions.py</code></li> <li>Enhanced <code>download_csv()</code> function</li> <li>Supports tuple format <code>(header, field_path)</code></li> <li>Handles dot notation for related fields</li> <li> <p>Calls properties/methods for calculated fields</p> </li> <li> <p><code>breathecode/events/models.py</code></p> </li> <li>Added <code>get_csv_fields()</code> to <code>EventCheckin</code> model</li> <li>Added <code>attendee_name</code> property as example calculated field</li> </ol>"},{"location":"advanced/csv-export-customization/#example-eventcheckin-csv-export","title":"Example: EventCheckin CSV Export","text":"<p>When you export EventCheckin records via: <pre><code>GET /v1/events/academy/{academy_id}/checkin.csv\n</code></pre></p> <p>The system will: 1. Check if <code>EventCheckin.get_csv_fields()</code> exists 2. Use custom field definitions with labels 3. Resolve related fields (event.slug, event.academy.name, etc.) 4. Calculate properties (attendee_name) 5. Export to CSV with clean headers</p>"},{"location":"advanced/csv-export-customization/#adding-to-other-models","title":"Adding to Other Models","text":"<p>To enable custom CSV export for any model:</p> <pre><code>class MyModel(models.Model):\n    # ... fields ...\n\n    @staticmethod\n    def get_csv_fields():\n        return [\n            ('Custom Header', 'field_name'),\n            ('Related Field', 'foreign_key.field'),\n            ('Calculated', 'my_property'),\n        ]\n\n    @property\n    def my_property(self):\n        # Your calculation logic\n        return calculated_value\n</code></pre> <p>That's it! The CSV export will automatically use your custom configuration.</p>"},{"location":"advanced/supervisor/","title":"Supervisor","text":""},{"location":"advanced/supervisor/#overview","title":"Overview","text":"<p>The <code>@supervisor</code> and <code>@issue</code> decorators are part of a monitoring system that helps identify and automatically fix issues in the application. They work together to create a self-healing mechanism where:</p> <ol> <li><code>@supervisor</code> functions detect potential issues in the system</li> <li><code>@issue</code> handlers attempt to fix those issues automatically</li> </ol>"},{"location":"advanced/supervisor/#supervisor-decorator","title":"@supervisor Decorator","text":""},{"location":"advanced/supervisor/#purpose","title":"Purpose","text":"<p>The <code>@supervisor</code> decorator is used to create monitoring functions that periodically check for potential issues or anomalies in the system. These functions yield messages when they detect problems, which are then recorded in the database.</p>"},{"location":"advanced/supervisor/#syntax","title":"Syntax","text":"<pre><code>@supervisor(delta=timedelta(hours=6))\ndef supervise_something():\n    # Check for issues\n    if issue_detected:\n        # Simple message\n        yield \"Something is wrong\"\n\n        # Or with code and parameters for issue handlers\n        yield \"Specific issue description\", \"issue-code\", {\"param1\": value1, \"param2\": value2}\n</code></pre>"},{"location":"advanced/supervisor/#parameters","title":"Parameters","text":"<ul> <li><code>delta</code>: A <code>timedelta</code> object that specifies how often the supervisor should run. For example, <code>delta=timedelta(hours=6)</code> means the supervisor will run every 6 hours.</li> <li><code>auto</code>: Boolean that determines if the supervisor should run automatically (default is <code>True</code>).</li> <li><code>raises</code>: Boolean that determines if the supervisor should raise exceptions (default is <code>False</code>).</li> </ul>"},{"location":"advanced/supervisor/#return-value","title":"Return Value","text":"<p>A supervisor function should be a generator that yields:</p> <ul> <li>A simple string message describing the issue, or</li> <li>A tuple containing: 1. A string message, 2. An issue code, 3. A dictionary of parameters for the issue handler</li> </ul>"},{"location":"advanced/supervisor/#example","title":"Example","text":"<pre><code>@supervisor(delta=timedelta(minutes=10))\ndef supervise_pending_bags_to_be_delivered():\n    \"\"\"\n    Supervisor to check for bags that are paid but not delivered.\n    This helps identify issues in the subscription/plan financing creation process.\n    \"\"\"\n    utc_now = timezone.now()\n\n    # Filter bags that are paid but not delivered, updated between 5 and 30 minutes ago\n    pending_bags = Bag.objects.filter(\n        status=\"PAID\",\n        was_delivered=False,\n        updated_at__lte=utc_now - timedelta(minutes=30),\n        updated_at__gte=utc_now - timedelta(minutes=5),\n    )\n\n    for bag in pending_bags:\n        invoice = bag.invoices.filter(status=\"FULFILLED\").order_by(\"-paid_at\").first()\n        if invoice:\n            yield (\n                f\"Bag {bag.id} for user {bag.user.email} in academy {bag.academy.name} has not been delivered\",\n                \"pending-bag-delivery\",\n                {\"bag_id\": bag.id},\n            )\n</code></pre>"},{"location":"advanced/supervisor/#issue-decorator","title":"@issue Decorator","text":""},{"location":"advanced/supervisor/#purpose_1","title":"Purpose","text":"<p>The <code>@issue</code> decorator creates handler functions that attempt to fix issues detected by supervisors. When a supervisor yields an issue with a specific code, the corresponding issue handler is triggered to fix the problem.</p>"},{"location":"advanced/supervisor/#syntax_1","title":"Syntax","text":"<pre><code>@issue(supervisor_function, delta=timedelta(minutes=30), attempts=3)\ndef fix_specific_issue(param1, param2):\n    # Attempt to fix the issue\n    if issue_fixed:\n        return True  # Issue is fixed\n    elif issue_cannot_be_fixed:\n        return False  # Issue cannot be fixed\n    else:\n        return None  # Issue is not yet fixed, will retry later\n</code></pre>"},{"location":"advanced/supervisor/#parameters_1","title":"Parameters","text":"<ul> <li><code>supervisor_function</code>: The supervisor function that this issue handler is associated with.</li> <li><code>delta</code>: A <code>timedelta</code> object that specifies how often the issue handler should retry if the issue is not fixed.</li> <li><code>attempts</code>: The maximum number of attempts to fix the issue before giving up.</li> </ul>"},{"location":"advanced/supervisor/#parameters-passed-to-the-handler","title":"Parameters Passed to the Handler","text":"<p>The parameters passed to the issue handler function come from the third element of the tuple yielded by the supervisor function. These parameters should match the parameter names in the issue handler function signature.</p>"},{"location":"advanced/supervisor/#return-value_1","title":"Return Value","text":"<p>An issue handler function should return:</p> <ul> <li><code>True</code>: The issue is fixed</li> <li><code>False</code>: The issue cannot be fixed (will not retry)</li> <li><code>None</code>: The issue is not yet fixed (will retry later, up to the specified number of attempts)</li> </ul>"},{"location":"advanced/supervisor/#example_1","title":"Example","text":"<pre><code>@issue(supervise_pending_bags_to_be_delivered, delta=timedelta(minutes=30), attempts=3)\ndef pending_bag_delivery(bag_id: int):\n    \"\"\"\n    Issue handler for pending bag delivery.\n    This function is called when a bag is detected as paid but not delivered.\n    It will attempt to retry the delivery process.\n    \"\"\"\n    # Check if the bag still needs to be processed\n    bag = Bag.objects.filter(id=bag_id, status=\"PAID\", was_delivered=False).first()\n    if not bag:\n        # Bag was already delivered or doesn't exist, mark as fixed\n        return True\n\n    # Call the function to retry the delivery\n    res = retry_pending_bag(bag)\n\n    # Return True if the issue is fixed\n    if res in [\"scheduled\", \"done\"]:\n        return True\n\n    # Return None to retry later\n    return None\n</code></pre>"},{"location":"advanced/supervisor/#how-they-work-together","title":"How They Work Together","text":"<ol> <li>The <code>@supervisor</code> function runs periodically (based on its <code>delta</code> parameter) and checks for issues.</li> <li>When an issue is detected, the supervisor yields a message, code, and parameters.</li> <li>The system records this issue in the database.</li> <li>The <code>@issue</code> handler associated with the supervisor (matching the yielded code) is triggered.</li> <li>The issue handler receives the parameters yielded by the supervisor and attempts to fix the issue.</li> <li>If the issue handler returns <code>None</code>, it will be retried later (based on the handler's <code>delta</code> parameter).</li> <li>If the issue handler returns <code>True</code>, the issue is marked as fixed.</li> <li>If the issue handler returns <code>False</code>, the issue is marked as unfixable.</li> </ol>"},{"location":"advanced/supervisor/#benefits","title":"Benefits","text":"<ol> <li>Separation of Concerns: Supervisors focus on detecting issues, while issue handlers focus on fixing them.</li> <li>Automatic Healing: The system can automatically detect and fix common issues without manual intervention.</li> <li>Monitoring: Issues are recorded in the database, providing visibility into system health.</li> <li>Retry Logic: Issue handlers can retry fixing issues multiple times with configurable delays.</li> <li>Scalability: New supervisors and issue handlers can be added without modifying existing code.</li> </ol>"},{"location":"advanced/supervisor/#best-practices","title":"Best Practices","text":"<ol> <li>Keep supervisors focused on detecting specific types of issues.</li> <li>Make issue handlers idempotent (can be run multiple times safely).</li> <li>Use meaningful codes that clearly identify the type of issue.</li> <li>Include all necessary parameters in the supervisor's yield statement.</li> <li>Return appropriate values from issue handlers to indicate the status of the fix.</li> <li>Set appropriate <code>delta</code> values based on the urgency and frequency of the issue.</li> <li>Document the purpose and behavior of each supervisor and issue handler.</li> </ol>"},{"location":"advanced/supervisor/#implementation-details","title":"Implementation Details","text":"<p>The supervisors and issues are stored in the database using the <code>Supervisor</code> and <code>SupervisorIssue</code> models from the <code>breathecode.monitoring</code> app. These models track:</p> <ul> <li>When supervisors last ran</li> <li>What issues were detected</li> <li>Whether issues have been fixed</li> <li>How many times an issue has occurred</li> </ul> <p>The system automatically schedules supervisors to run based on their <code>delta</code> parameter and triggers issue handlers when issues are detected.</p>"},{"location":"advanced/supervisor/#creating-new-supervisors-and-issue-handlers","title":"Creating New Supervisors and Issue Handlers","text":"<p>To create a new supervisor and issue handler:</p> <ol> <li>Define a supervisor function decorated with <code>@supervisor</code> that yields issues.</li> <li>Define an issue handler function decorated with <code>@issue</code> that fixes the issues.</li> <li>Make sure the code in the supervisor's yield statement matches the name of the issue handler function (with hyphens instead of underscores).</li> <li>Ensure the parameters in the supervisor's yield statement match the parameters expected by the issue handler.</li> </ol>"},{"location":"advanced/supervisor/#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Detecting and fixing stalled processes</li> <li>Identifying and resolving data inconsistencies</li> <li>Monitoring system resources and taking action when thresholds are exceeded</li> <li>Checking for failed operations and retrying them</li> <li>Detecting security issues and taking remedial action</li> </ul> <p>This monitoring and self-healing system helps maintain the health of the application by automatically detecting and fixing common issues, reducing the need for manual intervention and improving overall system reliability.</p>"},{"location":"advanced/celery/application/","title":"Application","text":"<p>Celery needs an object called application, this object is bound with a set of configurations like the Message Broker or task queue, theoretically you should have many celery apps and bound your tasks to one or many of those apps, actually we had not got any use to this feature and we rather use the shared_task decorator instead which just support one application.</p>"},{"location":"advanced/celery/application/#setting-up-an-application","title":"Setting up an application","text":"<p>Read this.</p>"},{"location":"advanced/celery/application/#where-is-the-application","title":"Where is the application?","text":"<p>It where in <code>breathecode/celery.py</code>.</p>"},{"location":"advanced/celery/canvas/","title":"Canvas","text":"<p>Canvas is a Celery feature that provides an API to design a workflow, some of them like calling many tasks in a group, or execute them in pipe is supported for this API.</p>"},{"location":"advanced/celery/canvas/#using-canvas","title":"Using canvas","text":"<p>Read this.</p>"},{"location":"advanced/celery/periodic-tasks/","title":"Periodic tasks","text":"<p>Celery allows configure some tasks to be executed repeatedly separate by a period of time, it usually did not use in favor of Django commands.</p>"},{"location":"advanced/celery/periodic-tasks/#setting-up-periodic-tasks","title":"Setting up periodic tasks","text":"<p>Read this.</p>"},{"location":"advanced/celery/routing/","title":"Routing","text":"<p>Celery allows set custom routing to call its tasks, it is usually used when you use Celery as a Message Broker, actually use Celery for this purpose is complicated because Celery does not support other Programming languages, so, you would have to use the Message Broker that Celery is using instead.</p>"},{"location":"advanced/celery/routing/#setting-up-routes","title":"Setting up routes","text":"<p>Read this.</p>"},{"location":"advanced/celery/settings/","title":"Settings","text":"<p>Here is all references about Celery.</p>"},{"location":"apps/activities/","title":"Activities","text":""},{"location":"apps/activities/#activity-api","title":"Activity API","text":"<p>This API uses Google DataStore as storage, there is not local storage on Heroku or Postgres.</p> <p>We need Google DataStore because we plan to store huge amounts of activities that the user can do inside breathecode.</p> <p>Possible activities (so far): <pre><code>\"breathecode_login\" //every time it logs in\n\"online_platform_registration\" //first day using breathecode\n\"public_event_attendance\" //attendy on an eventbrite event\n\"classroom_attendance\" //when the student attent to class\n\"classroom_unattendance\" //when the student miss class\n\"lesson_opened\" //when a lessons is opened on the platform\n\"office_attendance\" //when the office raspberry pi detects the student\n\"nps_survey_answered\" //when a nps survey is answered by the student\n\"exercise_success\" //when student successfully tests exercise\n</code></pre></p> <p>Any activity has the following inputs:</p> <pre><code>    'cohort',\n    'data',\n    'day',\n    'slug',\n    'user_agent',\n</code></pre>"},{"location":"apps/activities/#endpoints-for-the-user","title":"Endpoints for the user","text":"<p>Get recent user activity <pre><code>GET: activity/user/{email_or_id}?slug=activity_slug\n</code></pre></p> <p>Add a new user activity (requires authentication) <pre><code>POST: activity/user/{email_or_id}\n{\n    'slug' =&gt; 'activity_slug',\n    'data' =&gt; 'any aditional data (string or json-encoded-string)'\n}\n\n\ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this:\n\n{\n    'slug' =&gt; 'activity_slug',\n    'data' =&gt; \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id)\n}\n</code></pre></p> <p>Endpoints for the Cohort</p> <p>Get recent user activity <pre><code>GET: activity/cohort/{slug_or_id}?slug=activity_slug\n</code></pre> Endpoints for the coding_error's <pre><code>Get recent user coding_errors\nGET: activity/coding_error/{email_or_id}?slug=activity_slug\n</code></pre> <pre><code>Add a new coding_error (requires authentication)\nPOST: activity/coding_error/\n\n{\n    \"user_id\" =&gt; \"my@email.com\",\n    \"slug\" =&gt; \"webpack_error\",\n    \"data\" =&gt; \"optional additional information about the error\",\n    \"message\" =&gt; \"file not found\",\n    \"name\" =&gt; \"module-not-found,\n    \"severity\" =&gt; \"900\",\n    \"details\" =&gt; \"stack trace for the error as string\"\n}\n</code></pre></p>"},{"location":"apps/admissions/","title":"4Geeks.Admissions","text":"<p>This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API:</p> <ol> <li>Manage Academies (4Geeks let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid).</li> <li>Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities.</li> <li>Manage Students (invite and delete students).</li> <li>Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\".</li> </ol> <p>TODO: finish this documentation.</p>"},{"location":"apps/admissions/#commands","title":"Commands","text":""},{"location":"apps/admissions/#sync-academies","title":"Sync academies","text":"<pre><code>python manage.py sync_admissions academies\n</code></pre> <p>Override previous academies <pre><code>python manage.py sync_admissions academies --override\n</code></pre></p>"},{"location":"apps/admissions/#sync-courses","title":"Sync courses","text":"<pre><code>python manage.py sync_admissions certificates\n</code></pre>"},{"location":"apps/admissions/#sync-cohorts","title":"Sync cohorts","text":"<pre><code>python manage.py sync_admissions cohorts\n</code></pre>"},{"location":"apps/admissions/#sync-students","title":"Sync students","text":"<p><pre><code>python manage.py sync_admissions students --limit=3\n</code></pre> Limit: the number of students to sync</p>"},{"location":"apps/monitoring/introduction/","title":"Intro to monitoring","text":"<p>This app is ideal for running diagnostic and reminders on the breathecode platform.</p>"},{"location":"apps/monitoring/introduction/#installation","title":"Installation","text":"<ul> <li> <p>Setup the monitor app job for once a day, this is the command: <pre><code>$ python manage.py monitor apps\n</code></pre></p> </li> <li> <p>Setup the monitor script job for once a day, this is the command: <pre><code>$ python manage.py monitor script\n</code></pre></p> </li> </ul>"},{"location":"apps/monitoring/scripts/","title":"Monitoring Scripts","text":"<p>A monitoring script is something that you want to execute recurrently withing the breathecode API, for example:</p> <p><code>scripts/alert_pending_leads.py</code> is a small python script that checks if there is FormEntry Marketing module database that are pending processing.</p> <p>You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc.</p>"},{"location":"apps/monitoring/scripts/#stepts-to-create-a-new-script","title":"Stepts to create a new script:","text":"<ol> <li>create a new python file inside <code>./breathecode/monitoring/scripts</code></li> <li>make sure your script starts with this content always:</li> </ol> <pre><code>#!/usr/bin/env python\n\"\"\"\nAlert when there are Form Entries with status = PENDING\n\"\"\"\nfrom breathecode.utils import ScriptNotification\n# start your code here\n</code></pre> <ol> <li>You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file.</li> <li>You can raise a <code>ScriptNotification</code> to notify for <code>MINOR</code> or <code>CRITICAL</code> reasons, for example:</li> </ol> <p><pre><code># here we are raising a notification because there are 2 pending tasks\nraise ScriptNotification(\"There are 2 pending taks\", status='MINOR', slug=\"pending_tasks\")\n</code></pre> 5. If you don't raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. 6. When a ScriptNotification has been raise the Application owner will receive a notification to the application.email and slack channel configured for notifications. 7. Check for other scripts as examples. 8. Test your script.</p>"},{"location":"apps/monitoring/scripts/#global-context","title":"Global Context","text":"<p>There are some global variables that you have available during your scripts:</p> Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: <code>query.filter(academy__id=academy.id)</code>"},{"location":"apps/monitoring/scripts/#manually-running-your-script","title":"Manually running your script","text":"<p>You can test your scripts by running the following command:</p> <pre><code>$ python manage.py run_script &lt;file_name&gt;\n\n# For example you can test the alert_pending_leads script like this:\n$ python manage.py run_script alert_pending_leads.py\n</code></pre>"},{"location":"apps/monitoring/scripts/#example-script","title":"Example Script","text":"<p>The following script checks for pending leads to process:</p> <pre><code>#!/usr/bin/env python\n\"\"\"\nAlert when there are Form Entries with status = PENDING\n\"\"\"\nfrom breathecode.marketing.models import FormEntry\nfrom django.db.models import Q\nfrom breathecode.utils import ScriptNotification\n\n# check the database for pending leads\npending_leads = FormEntry.objects.filter(storage_status=\"PENDING\").filter(Q(academy__id=academy.id) | Q(location=academy.slug))\n\n# trigger notification because pending leads were found\nif len(pending_leads) &gt; 0:\n    raise ScriptNotification(f\"Warning there are {len(pending_leads)} pending form entries\", status='MINOR')\n\n# You can print this and it will show on the script results\nprint(\"No pending leads\")\n</code></pre>"},{"location":"apps/monitoring/scripts/#unit-testing-your-script","title":"Unit testing your script","text":"<p>from breathecode.monitoring.actions import run_script</p> <pre><code>script = run_script(model.monitor_script)\n\ndel script['slack_payload']\ndel script['title']\n\nexpected = {'details': script['details'],\n            'severity_level': 5,\n            'status': script['status'],\n            'text': script['text']\n            }\n\nself.assertEqual(script, expected)\n\nself.assertEqual(self.all_monitor_script_dict(), [{\n    **self.model_to_dict(model, 'monitor_script'),\n}])\n</code></pre>"},{"location":"deployment/configuring-the-github-secrets/","title":"Configuring the Github secrets","text":"<ol> <li>Get Dockerhub token    </li> <li>Add the repo to Coveralls https://coveralls.io/repos/new</li> <li>Add the repo to Codecov https://app.codecov.io/gh/+</li> <li>Set up the secrets    </li> </ol>"},{"location":"deployment/environment-variables/","title":"Environment variables","text":"name description ENV Represents the current environment, can be <code>DEVELOPMENT</code>, <code>TEST</code>, and <code>PRODUCTION</code> LOG_LEVEL Represents the log level for the logging module, can be <code>NOTSET</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code> DATABASE_URL Represents the connection string to the database, you can read more about schema url CACHE_MIDDLEWARE_MINUTES Represents how long an item will last in the cache API_URL Represents the url of api rest ADMIN_URL Represents the url of frontend of the admin APP_URL Represents the url of frontend of the webside REDIS_URL Represents the url of Redis CELERY_TASK_SERIALIZER Represents the default serialization method to use. Can be pickle <code>json</code>, <code>yaml</code>, <code>msgpack</code> or any custom serialization methods EMAIL_NOTIFICATIONS_ENABLED Represents if the server can send notifications through email SYSTEM_EMAIL Represents the email of <code>Breathecode</code> for support GITHUB_CLIENT_ID Represents the client id used for the OAuth2 with <code>Github</code> GITHUB_SECRET Represents the secret used for the OAuth2 with <code>Github</code> GITHUB_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Github</code> SLACK_CLIENT_ID Represents the client id used for the OAuth2 with <code>Slack</code> SLACK_SECRET Represents the secret used for the OAuth2 with <code>Slack</code> SLACK_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Slack</code> MAILGUN_API_KEY Represents the api key used for the OAuth2 with <code>Mailgun</code> MAILGUN_DOMAIN Represents the domain of Breathecode that provided <code>Mailgun</code> EVENTBRITE_KEY Represents the key used for the OAuth2 with <code>Eventbrite</code> FACEBOOK_VERIFY_TOKEN Represents the verify token used for the OAuth2 with <code>Facebook</code> FACEBOOK_CLIENT_ID Represents the client id used for the OAuth2 with <code>Facebook</code> FACEBOOK_SECRET Represents the secret used for the OAuth2 with <code>Facebook</code> FACEBOOK_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Facebook</code> ACTIVE_CAMPAIGN_KEY Represents the key used for the OAuth2 with <code>Active Campaign</code> ACTIVE_CAMPAIGN_URL Represents the domain of Breathecode that provided <code>Active Campaign</code> GOOGLE_APPLICATION_CREDENTIALS Represents the file will be saved the service account of <code>Google Cloud</code> GOOGLE_SERVICE_KEY Represents the content of the service account used for the OAuth2 with <code>Google Cloud</code> GOOGLE_PROJECT_ID Project ID on google cloud used for the integration of the entire API GOOGLE_CLOUD_KEY Represents the key used for the OAuth2 with <code>Google Cloud</code> GOOGLE_CLIENT_ID Represents the client id used for the OAuth2 with <code>Google Cloud</code> GOOGLE_SECRET Represents the secret used for the OAuth2 with <code>Google Cloud</code> GOOGLE_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Google Cloud</code> DAILY_API_KEY Represents the api key used for the OAuth2 with <code>Daily</code> DAILY_API_URL Represents the domain of Breathecode that provided <code>Daily</code> SAVE_LEADS Represents if Breathecode will persist the leads COMPANY_NAME Represents the company name COMPANY_CONTACT_URL Represents the company contact url COMPANY_LEGAL_NAME Represents the company legal name COMPANY_ADDRESS Represents the company address MEDIA_GALLERY_BUCKET Represents the bucket for the media gallery DOWNLOADS_BUCKET Represents the bucket for the CSV files PROFILE_BUCKET Represents the bucket for profile avatars"},{"location":"essential/aiohttp/","title":"AIOHTTP","text":"<p>AIOHTTP is an HTTP library that only supports asynchronous code, this library offers better performance today <code>01-23-24</code>.</p> <ul> <li>Follow this tutorial.</li> </ul>"},{"location":"essential/aiohttp/#when-use-it","title":"When use it","text":"<p>When you need to make a request within a Django Rest View, I do not have sufficient data to say if should be useful to use AIOHTTP within Celery <code>01-23-24</code>.</p>"},{"location":"essential/requests/","title":"Requests","text":"<p>Requests is an HTTP library that only supports synchronous code, this is the most popular choice due to its API and is the oldest library (among AIOHTTP, HTTPX and Requests).</p> <ul> <li>Follow this tutorial.</li> </ul>"},{"location":"essential/requests/#when-use-it","title":"When use it","text":"<p>Celery does not have good support for asyncronomous code, I do not know which option is better between Requests and AIOHTTP, I suggest you that you chose Requests until we have a study.</p>"},{"location":"essential/serpy/","title":"Serpy","text":"<p>Serpy in which it is:</p> <ul> <li>Faster serializer.</li> <li>Easy to use.</li> <li>It includes custom fields.</li> <li>It includes dynamic field resolution.</li> </ul> <p>It is weak in:</p> <ul> <li>Telling Django which fields include and which do not on the ORM.</li> </ul>"},{"location":"essential/serpy/#when-uses-serpy","title":"When uses Serpy?","text":"<p>When you need to serialize and GET request.</p>"},{"location":"essential/serpy/#when-does-not-use-serpy","title":"When does not use Serpy?","text":"<p>When you need the serialize to create or update a row in the database, it is in the POST and PUT methods, you must use DRF Serializer instead.</p>"},{"location":"essential/serpy/#fields","title":"fields","text":"<p>Read this.</p>"},{"location":"essential/serpy/#custom-fields","title":"Custom fields","text":"<p>Read this.</p>"},{"location":"essential/serpy/#related-articles","title":"Related articles","text":"<ul> <li>HTTP.</li> <li>REST.</li> </ul>"},{"location":"essential/4geeks/actions/","title":"Actions","text":"<p>An action is a small code block like a function or a class which is reused within Django views and Celery tasks.</p>"},{"location":"essential/4geeks/actions/#where-is-the-task","title":"Where is the task?","text":"<p>It where in <code>breathecode/APP_NAME/actions.py</code>.</p>"},{"location":"essential/4geeks/services/introduction/","title":"Introduction","text":""},{"location":"essential/4geeks/services/introduction/#first-party-source","title":"First-party source.","text":"<p>It is all information that our company collects directly without the intervention of third-party companies.</p>"},{"location":"essential/4geeks/services/introduction/#third-party-source","title":"Third-party source.","text":"<p>All information that is collected by other companies and we are acceding thought of an Web API.</p>"},{"location":"essential/4geeks/services/introduction/#references","title":"References:","text":"<ul> <li>First-party source and Third-party source.</li> </ul>"},{"location":"essential/4geeks/services/first-party/token/","title":"<code>Token</code>","text":"<p>This object represents the JSON payload.</p> <ul> <li><code>sub</code>: user.id.</li> <li><code>iss</code>: the host of the service, example `\"http://localhost:8000\"``.</li> <li><code>app</code>: app that made the token, for example <code>\"4geeks\"</code>.</li> <li><code>aud</code>: app that will receive the request.</li> <li><code>exp</code>: token expiration time.</li> <li><code>iat</code>: time when the token was issued.</li> <li><code>typ</code>: token type (default <code>\"JWT\"</code>).</li> </ul>"},{"location":"essential/4geeks/services/first-party/using-services/","title":"Using services","text":"<p>We have a wrapper that manages the authentication to any first-party service.</p>"},{"location":"essential/4geeks/services/first-party/using-services/#arguments","title":"Arguments","text":"<p>Both, the class <code>Service</code> and the function <code>service</code> accepts the following arguments:</p> <ul> <li><code>app_pk</code>: <code>app.id</code> or <code>app.slug</code>.</li> <li><code>user_pk</code>: <code>user.id</code>.</li> <li><code>mode</code>: <code>\"signature\"</code> or <code>\"jwt\"</code>.</li> </ul>"},{"location":"essential/4geeks/services/first-party/using-services/#signature-mode-vs-jwt-mode","title":"Signature mode vs JWT mode","text":"<p>When JWT is used, it just signs a token with the data of the user, while the signature signs the token with all the content of the request to verify the source of the request. JWT is significantly faster than using signatures.</p>"},{"location":"essential/4geeks/services/first-party/using-services/#syncronomous-implementation","title":"Syncronomous implementation","text":"<p>Service is a Requests wrapper, you should use this library like it was Requests, and the host is resolved automatically.</p>"},{"location":"essential/4geeks/services/first-party/using-services/#making-a-request-signed-in-as-4geeks","title":"making a request signed in as 4geeks","text":"<pre><code>from breathecode.utils.service import Service\n\ntry:\n    s = Service('rigobot')\n    response = s.get('/my/path')\n    data = response.json()\n\nexcept Exception:\n    # not found exception\n</code></pre>"},{"location":"essential/4geeks/services/first-party/using-services/#making-a-request-signed-in-as-a-4geeks-user","title":"making a request signed in as a 4geeks user.","text":"<pre><code>from breathecode.utils.service import Service\n\ntry:\n    s = Service('rigobot', 1)\n    response = s.get('/my/path')\n    data = response.json()\n\nexcept Exception:\n    # not found exception\n</code></pre>"},{"location":"essential/4geeks/services/first-party/using-services/#asyncronomous-implementation","title":"Asyncronomous implementation","text":"<p>Service is a AIOHTTP wrapper, you should use this library like it was AIOHTTP, and the host is resolved automatically.</p>"},{"location":"essential/4geeks/services/first-party/using-services/#making-a-request-signed-in-as-4geeks_1","title":"making a request signed in as 4geeks","text":"<pre><code>from django.core.exceptions import SynchronousOnlyOperation\nfrom breathecode.utils.service import service\n\ntry:\n    s = await service('rigobot')\n\nexcept SynchronousOnlyOperation:\n    # exception about that the worker does not support asynchronous code\n\nexcept Exception:\n    # not found exception\n\n# If all went well\nasync with s:\n    async with s.get('/my/path') as response:\n        data = await response.json()\n</code></pre>"},{"location":"essential/4geeks/services/first-party/using-services/#making-a-request-signed-in-as-a-4geeks-user_1","title":"making a request signed in as a 4geeks user.","text":"<pre><code>from django.core.exceptions import SynchronousOnlyOperation\nfrom breathecode.utils.service import service\n\ntry:\n    s = await service('rigobot', 1)\n\nexcept SynchronousOnlyOperation:\n    # exception about that the worker does not support asynchronous code\n\nexcept Exception:\n    # not found exception\n\n# If all went well\nasync with s:\n    async with s.get('/my/path') as response:\n        data = await response.json()\n</code></pre>"},{"location":"essential/4geeks/services/first-party/using-services/#why-does-it-use-aget-instead-of-get","title":"Why does it use aget instead of get","text":"<p>Because initially this was made to contain both styles, synchronous and asynchronous, aget means asynchronous get, this difference should be removed by implementing the context API over the <code>Service</code> class.</p>"},{"location":"essential/4geeks/services/first-party/using-services/#why-the-implementation-differ","title":"Why the implementation differ","text":"<p>AIOHTTP requires the use of the context API and Requests does not, and Python does not support asyncronomous constructors, I could not implement a constructor that was compatible with syncronomous and asyncronomous code, I am thinking about update this implementation in the future to reduce the difference between them using the context API.</p>"},{"location":"essential/4geeks/services/first-party/writing-services/","title":"Writing services","text":"<p>We have a wrapper that implements a first-party endpoint to be used by some first-party services.</p>"},{"location":"essential/4geeks/services/first-party/writing-services/#arguments","title":"Arguments","text":"<p>Both, the decorator <code>scope</code> accepts the following arguments:</p> <ul> <li><code>scopes</code>: <code>[scope1.slug, scope2.slug, ...]</code></li> <li><code>mode</code>: <code>\"signature\"</code> or <code>\"jwt\"</code> (default)</li> </ul>"},{"location":"essential/4geeks/services/first-party/writing-services/#signature-mode-vs-jwt-mode","title":"Signature mode vs JWT mode","text":"<p>When JWT is used, it just signs a token with the data of the user, while the signature signs the token with all the content of the request to verify the source of the request. JWT is significantly faster than using signatures.</p>"},{"location":"essential/4geeks/services/first-party/writing-services/#syncronomous-implementation","title":"Syncronomous implementation","text":"<p>Service is a Requests wrapper, you should use this library like it was Requests, and the host is resolved automatically.</p>"},{"location":"essential/4geeks/services/first-party/writing-services/#making-a-request-signed-in-as-4geeks","title":"making a request signed in as 4geeks","text":"<pre><code>from rest_framework.views import APIView\nfrom breathecode.utils.decorators.scope import scope\n\nclass AppUserView(APIView):\n    permission_classes = [AllowAny]\n\n    @scope(['read:user'])\n    def get(self, request, app: dict, token: dict, user_id=None):\n        handler = self.extensions(request)\n        lang = get_user_language(request)\n\n        extra = {}\n        if app.require_an_agreement:\n            extra['appuseragreement__app__id'] = app.id\n\n        if token.sub:\n            extra['id'] = token.sub\n\n        if user_id:\n            if token.sub and token.sub != user_id:\n                raise ValidationException(translation(lang,\n                                                      en='This user does not have access to this resource',\n                                                      es='Este usuario no tiene acceso a este recurso'),\n                                          code=403,\n                                          slug='user-with-no-access',\n                                          silent=True)\n\n            if 'id' not in extra:\n                extra['id'] = user_id\n\n            user = User.objects.filter(**extra).first()\n            if not user:\n                raise ValidationException(translation(lang, en='User not found', es='Usuario no encontrado'),\n                                          code=404,\n                                          slug='user-not-found',\n                                          silent=True)\n\n            serializer = AppUserSerializer(user, many=False)\n            return Response(serializer.data)\n\n        # test this path\n        items = User.objects.filter(**extra)\n        items = handler.queryset(items)\n        serializer = AppUserSerializer(items, many=True)\n\n        return handler.response(serializer.data)\n</code></pre>"},{"location":"essential/4geeks/services/first-party/writing-services/#asyncronomous-implementation","title":"Asyncronomous implementation","text":"<p>Not implemented yet.</p>"},{"location":"essential/celery/calling/","title":"Calling","text":"<p>You can an existing task, Celery provides tree basic way to using its tasks:</p> <p>Asynchronous way:</p> <ul> <li>Using <code>my_task.delay(...)</code></li> <li>Using <code>my_task.apply_async(args=(...), kwargs={...})</code></li> </ul> <p>Synchronous way:</p> <ul> <li>Using <code>my_task(...)</code></li> </ul>"},{"location":"essential/celery/calling/#calling-your-task","title":"Calling your task","text":"<p>Read this.</p>"},{"location":"essential/celery/calling/#where-is-the-task","title":"Where is the task?","text":"<p>It where in <code>breathecode/APP_NAME/tasks.py</code>.</p>"},{"location":"essential/celery/introduction/","title":"Introduction","text":"<p>Celery is a asynchronous task queue which provided us a way to implement parallelism in 4geeks, usually it is used for execute operation which taken a long time, and it only support Python.</p>"},{"location":"essential/celery/introduction/#historical-use-on-4geeks","title":"Historical use on 4geeks","text":"<p>The support for asynchronous execution was added from Django 4, during a long time we used Django 3.12, and Celery helped us to deal with this purpose.</p>"},{"location":"essential/celery/introduction/#article-about-what-is-celery","title":"Article about what is Celery.","text":"<p>Read this.</p>"},{"location":"essential/celery/tasks/","title":"Tasks","text":"<p>A task is a code block that is executed in the Celery process, you usually go to use the tasks within a Django command, inside an action or inside a Django view. It is used to implement asynchronicity within the Django process.</p>"},{"location":"essential/celery/tasks/#writing-tasks","title":"Writing tasks","text":"<p>Read this</p>"},{"location":"essential/celery/tasks/#where-is-the-task","title":"Where is the task?","text":"<p>It where in <code>breathecode/APP_NAME/tasks.py</code>.</p>"},{"location":"essential/django/admin/","title":"Admin","text":"<p>Django provides an endpoint under <code>localhost:8000/admin</code>, which can see, update, remove, and execute an action over a Model or row.</p>"},{"location":"essential/django/admin/#writing-admin","title":"Writing admin","text":"<p>Read this.</p>"},{"location":"essential/django/admin/#documenting-your-admin","title":"Documenting your admin","text":"<p>Read this.</p>"},{"location":"essential/django/admin/#writing-admin-actions","title":"Writing admin actions","text":"<p>Read this.</p>"},{"location":"essential/django/admin/#where-is-the-admin","title":"Where is the admin?","text":"<p>It where in <code>breathecode/APP_NAME/admin.py</code>.</p>"},{"location":"essential/django/admin/#where-is-the-test-file","title":"Where is the test file?","text":"<p>It where in <code>breathecode/APP_NAME/tests/admin/tests_ADMIN_ACTION_NAME.py</code>.</p>"},{"location":"essential/django/commands/","title":"Django commands","text":"<p>Django allows you to create a custom command, it usually will be used with the Heroku Scheduler to schedule the execution of that command.</p>"},{"location":"essential/django/commands/#what-is-a-command","title":"What is a command?","text":"<p>Read this and this.</p>"},{"location":"essential/django/commands/#writing-commands","title":"Writing commands","text":"<p>Read this.</p>"},{"location":"essential/django/commands/#where-are-the-models","title":"Where are the models?","text":"<p>It where in <code>breathecode/APP_NAME/management/commands/COMMAND_EXEC_NAME.py</code>.</p>"},{"location":"essential/django/commands/#where-is-the-test-file","title":"Where is the test file?","text":"<p>It where in <code>breathecode/APP_NAME/tests/management/commands/tests_COMMAND_EXEC_NAME.py</code>.</p>"},{"location":"essential/django/introduction/","title":"Introduction","text":""},{"location":"essential/django/introduction/#what-is-django","title":"What is Django","text":"<p>Django is a web framework created on 21 July 2005, it was extremely popular because it had the better ORM, it was made in Python and its URL format was revolutionary. Django was created in the big frameworks era, It follows the model\u2013template\u2013views, it should do that it feels harder compared with the newest frameworks like Express, before Express, the frameworks were very oppressive, because they enforce that the team followed an unique standard, while Express does the opposite, so, all Express like frameworks does not have a high cognitive load caused by that. It requires that you understand that to learn Django you must understand its structures and concepts.</p>"},{"location":"essential/django/introduction/#other-introductions","title":"Other introductions","text":"<ul> <li>Django.</li> <li>Wikipedia.</li> </ul>"},{"location":"essential/django/introduction/#modeltemplateviews","title":"Model\u2013Template\u2013Views","text":"<p>Read this.</p>"},{"location":"essential/django/models/","title":"Models","text":"<p>A model is a concept that is part of Model-View-Controller, the models represent a structure that contains, manages, formats, and wraps the data, usually, it is related to the concept of an Object\u2013relational mapping , an Active record, and an Object Data Modelling (it is similar to an Object\u2013relational mapping but for NoSQL databases), in summary, way you will save and fetch the content using models.</p>"},{"location":"essential/django/models/#writing-models","title":"Writing models","text":"<p>Read this.</p>"},{"location":"essential/django/models/#field-types","title":"Field types","text":"<p>Read this.</p>"},{"location":"essential/django/models/#migrations","title":"Migrations","text":"<p>Read this.</p>"},{"location":"essential/django/models/#making-queries","title":"Making queries","text":"<p>Read this.</p>"},{"location":"essential/django/models/#where-are-the-models","title":"Where are the models?","text":"<p>It where in <code>breathecode/APP_NAME/models.py</code>.</p>"},{"location":"essential/django/signals/","title":"Signals and receivers","text":"<p>A signal is a way to decouple the logic inside the models, a signal is like an Airtag, when an Airtag becomes closer to another device it should trigger an action, your action is wrapped inside a receiver and the signal is the emitter, this signal should be trigger manually in the cases of a custom signal or automatically in case of the signals which was created by Django like <code>pre_save</code> which is execute before executing <code>model.save()</code>.</p>"},{"location":"essential/django/signals/#writing-signals","title":"Writing signals","text":"<p>Read this.</p>"},{"location":"essential/django/signals/#writing-receivers","title":"Writing receivers","text":"<p>Read this.</p>"},{"location":"essential/django/signals/#setting-up-the-app-to-enable-the-signals","title":"Setting up the app to enable the signals","text":"<p>Read this.</p>"},{"location":"essential/django/signals/#django-signals","title":"Django signals","text":"<p>read this.</p>"},{"location":"essential/django/signals/#where-are-the-signals","title":"Where are the signals","text":"<p>It where in <code>breathecode/APP_NAME/signals.py</code>.</p>"},{"location":"essential/django/signals/#where-are-the-receivers","title":"Where are the receivers","text":"<p>It where in <code>breathecode/APP_NAME/receivers.py</code>.</p>"},{"location":"essential/django/signals/#where-are-tested-the-signals","title":"Where are tested the signals?","text":"<p>It where in <code>breathecode/APP_NAME/tests/signals/tests_SIGNAL_NAME.py</code>.</p>"},{"location":"essential/django/signals/#where-are-tested-the-receivers","title":"Where are tested the receivers?","text":"<p>It where in <code>breathecode/APP_NAME/tests/receivers/tests_RECEIVER_NAME.py</code>.</p>"},{"location":"essential/django/templates/","title":"Templates","text":"<p>The template is a feature that allows you to build documents like an HTML or a TXT dynamically and fill this document with the necessary data, you usually will render them to send pages or emails.</p>"},{"location":"essential/django/templates/#writing-templates","title":"Writing templates","text":"<p>Read this.</p>"},{"location":"essential/django/templates/#using-custom-template-tags","title":"Using custom template tags","text":"<p>Read this.</p>"},{"location":"essential/django/templates/#where-are-the-templates","title":"Where are the templates?","text":"<p>It where in <code>breathecode/APP_NAME/templates/TEMPLATE_NAME.[html|txt]</code>.</p>"},{"location":"essential/django/urls/","title":"URLs","text":"<p>One of the most exciting features that made Django so popular was its URL handlers for its simplicity, right now, all frameworks implemented this format.</p>"},{"location":"essential/django/urls/#introduction","title":"Introduction","text":"<p>Read this.</p>"},{"location":"essential/django/urls/#writing-urls","title":"Writing URLs","text":"<p>Read this.</p>"},{"location":"essential/django/urls/#where-are-the-urls","title":"Where are the urls?","text":"<p>It where in <code>breathecode/APP_NAME/urls.py</code>.</p>"},{"location":"essential/django/views/","title":"Views","text":"<p>A view is a concept that is part of Model-View-Controller, the view manages the appearance of the application, you could guess that in Django a view would be the template, but actually, on Django what would be a handler in an Express like framework, because the view can build a HTML without using templates. On Django an Exception could return a 4xx or 5xx response.</p> <p>Related articles:</p> <ul> <li>HTTP.</li> <li>REST.</li> </ul>"},{"location":"essential/django/views/#writing-views","title":"Writing views","text":"<p>Read this.</p>"},{"location":"essential/django/views/#async-views","title":"Async views","text":"<p>Read this.</p>"},{"location":"essential/django/views/#functional-views","title":"Functional views","text":"<p>Read this.</p>"},{"location":"essential/django/views/#render-templates","title":"Render templates","text":"<p>Read this.</p>"},{"location":"essential/django/views/#redirections","title":"Redirections","text":"<p>Read this.</p>"},{"location":"essential/django/views/#where-are-the-views","title":"Where are the views?","text":"<p>It where in <code>breathecode/APP_NAME/views.py</code>.</p>"},{"location":"essential/django/views/#where-is-the-test-file","title":"Where is the test file?","text":"<p>It where in <code>breathecode/APP_NAME/tests/urls/tests_ROUTE_NAME.py</code>.</p>"},{"location":"essential/django-rest-framework/introduction/","title":"Introduction","text":""},{"location":"essential/django-rest-framework/introduction/#what-is-django-rest-framework","title":"What is Django Rest Framework","text":"<p>Some time ago Django was considered one of the top 5 web frameworks, At those times the API rest was not the standard, did not exists the SPA, in those times the content was rendered from the backend even usually, you could see form and validations exclusively in server side, Django was made to cover this purpose, Django Rest Framework is a middleware that adds support to Django for managing REST APIs.</p> <p>Related articles:</p> <ul> <li>HTTP.</li> <li>REST.</li> </ul>"},{"location":"essential/django-rest-framework/serializers/","title":"Serializers","text":"<p>A serializer is an element (a class in this case) that translates an object (Object-oriented programming) and generates an output that should be useful for something. In Django, a serializer is used to format the object before it is sent. We are using the Django Rest Framework Serializers for POST and PUT methods, and for the GET method we are using Serpy because it is faster than DRF Serializers.</p> <p>Related articles:</p> <ul> <li>HTTP</li> <li>REST</li> </ul>"},{"location":"essential/django-rest-framework/serializers/#writing-serializers","title":"Writing Serializers","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/serializers/#where-are-the-serializers","title":"Where are the serializers?","text":"<p>They are located in <code>breathecode/APP_NAME/serializers.py</code>.</p>"},{"location":"essential/django-rest-framework/validators/","title":"Validators","text":"<p>Django Rest Framework provides a set of validators to be used with Django models.</p>"},{"location":"essential/django-rest-framework/validators/#using-validators","title":"Using validators","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/","title":"Views","text":"<p>Django Rest Framework implements and extends the Django views but with support to REST frameworks (you can read about Django views here).</p> <p>Related articles:</p> <ul> <li>HTTP.</li> <li>REST.</li> </ul>"},{"location":"essential/django-rest-framework/views/#writing-views","title":"Writing views","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#exceptions","title":"Exceptions","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#status-code","title":"Status Code","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#writing-view-sets","title":"Writing view sets","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#parsers","title":"Parsers","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#renderers","title":"Renderers","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#permissions","title":"Permissions","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#authentication","title":"Authentication","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#throttling","title":"Throttling","text":"<p>Read this.</p>"},{"location":"essential/django-rest-framework/views/#where-are-the-views","title":"Where are the views?","text":"<p>It where in <code>breathecode/APP_NAME/views.py</code>.</p>"},{"location":"essential/django-rest-framework/views/#where-is-the-test-file","title":"Where is the test file?","text":"<p>It where in <code>breathecode/APP_NAME/tests/urls/tests_ROUTE_NAME.py</code>.</p>"},{"location":"getting-started/available-commands/","title":"Available Commands","text":"<p>The following custom commands are defined in <code>pyproject.toml</code> under <code>[tool.poetry.scripts]</code> and can be run from within your development environment (Codespace, Dev Container, or Manual Setup with activated virtual environment) using <code>poetry run &lt;command&gt;</code>:</p>"},{"location":"getting-started/available-commands/#development-server","title":"Development Server","text":"<ul> <li><code>poetry run dev</code>: (Legacy or specific development task - check <code>scripts/cmd.py</code> for details)</li> <li><code>poetry run start</code>: Starts the Django development server (usually on <code>http://localhost:8000</code>).</li> <li><code>poetry run createsuperuser</code>: Runs Django's interactive <code>createsuperuser</code> management command to create an admin user.</li> <li><code>poetry run startapp &lt;app_name&gt;</code>: Runs Django's <code>startapp</code> management command to create a new app structure.</li> </ul>"},{"location":"getting-started/available-commands/#testing","title":"Testing","text":"<ul> <li><code>poetry run test &lt;path&gt;</code>: Runs <code>pytest</code> for the specified path/module (e.g., <code>poetry run test ./breathecode/activity</code>).</li> <li><code>poetry run test:ci</code>: Runs tests with coverage specifically configured for CI environments.</li> <li><code>poetry run test:coverage &lt;module&gt;</code> / <code>poetry run test:c &lt;module&gt;</code>: Runs tests with coverage reporting for the specified Python module path (e.g., <code>poetry run cov breathecode.activity</code>).</li> <li><code>poetry run test:parallel &lt;path&gt;</code> / <code>poetry run test:p &lt;path&gt;</code>: Runs tests in parallel using <code>pytest-xdist</code> for the specified path/module (e.g., <code>poetry run ptest ./breathecode/activity</code>). Faster for large test suites.</li> </ul>"},{"location":"getting-started/available-commands/#database","title":"Database","text":"<ul> <li><code>poetry run migrate</code>: Runs Django's <code>migrate</code> management command to apply database migrations.</li> <li><code>poetry run makemigrations [app_name]</code>: Runs Django's <code>makemigrations</code> management command to create new migration files based on model changes. Optionally specify an app name.</li> </ul>"},{"location":"getting-started/available-commands/#code-quality-formatting","title":"Code Quality &amp; Formatting","text":"<ul> <li><code>poetry run format</code>: Formats the codebase using tools like <code>black</code> and <code>isort</code> according to project standards.</li> <li><code>poetry run lint</code>: Runs linters (like <code>flake8</code>) over the codebase to check for style issues and potential errors.</li> <li><code>poetry run precommit:install</code>: Installs pre-commit hooks defined in the configuration.</li> </ul>"},{"location":"getting-started/available-commands/#background-tasks","title":"Background Tasks","text":"<ul> <li><code>poetry run celery</code>: Starts a Celery worker process for handling background tasks.</li> </ul>"},{"location":"getting-started/available-commands/#documentation","title":"Documentation","text":"<ul> <li><code>poetry run docs</code>: Serves the documentation locally (usually on <code>http://localhost:8001</code>) using <code>mkdocs serve</code> for live preview.</li> <li><code>poetry run docs:build</code>: Builds the static documentation site into the <code>site/</code> directory using <code>mkdocs build</code>.</li> <li><code>poetry run docs:deploy</code>: Deploys the documentation (likely to GitHub Pages) using <code>mkdocs gh-deploy</code>.</li> </ul>"},{"location":"getting-started/available-commands/#utilities","title":"Utilities","text":"<ul> <li><code>poetry run update-sql-keywords</code>: Updates a JSON file containing SQL keywords (internal utility script).</li> <li><code>poetry run docker:build</code>: Builds the Docker image for the application using configuration in <code>scripts/docker_build.py</code>.</li> </ul>"},{"location":"getting-started/setup/works-locally/devcontainer/","title":"Devcontainer","text":"<p>Devcontainer provides you with a way to run this project on your local machine without setting any configuration.</p>"},{"location":"getting-started/setup/works-locally/devcontainer/#set-up-4geeks-dependencies","title":"Set up 4geeks dependencies","text":"<p>Read this.</p>"},{"location":"getting-started/setup/works-locally/devcontainer/#can-i-use-podman-to-run-devcontainer","title":"Can I use Podman to run Devcontainer?","text":"<p>Yes, but you should have compatibility issues.</p>"},{"location":"getting-started/setup/works-locally/devcontainer/#run-docker-on-non-root-users","title":"Run Docker on non-root users","text":"<p>Devcontainer requires be able to run Docker on non-root users, Follow this intructions.</p>"},{"location":"getting-started/setup/works-locally/devcontainer/#open-devcontainer","title":"Open Devcontainer","text":"<ol> <li>Click Visual Studio Button.</li> <li>Click reopen in Container.</li> <li>Wait until Devcontainer tab in finished its job.</li> </ol>"},{"location":"getting-started/setup/works-locally/devcontainer/#visual-studio-button","title":"Visual Studio Button","text":""},{"location":"getting-started/setup/works-locally/devcontainer/#local-dev-container","title":"Local Dev Container","text":"<p>If you prefer to work locally, have a reasonably powerful machine, and want the same consistent environment as Codespaces, you can use VS Code/Cursor Dev Containers.</p> <p>This method uses Docker to create an isolated environment with all necessary dependencies and configurations, based on the <code>.devcontainer</code> definition in the repository.</p>"},{"location":"getting-started/setup/works-locally/devcontainer/#prerequisites","title":"Prerequisites","text":"<ol> <li>Docker Desktop: Install Docker Desktop for your operating system.</li> <li>VS Code or Cursor: Install Visual Studio Code or Cursor.</li> <li>Install the Dev Containers Extension: You must install the official Dev Containers extension from the marketplace in VS Code/Cursor.</li> </ol>"},{"location":"getting-started/setup/works-locally/devcontainer/#windows-users-important-setup","title":"Windows Users (Important Setup)","text":"<ul> <li>You MUST use WSL 2 (Windows Subsystem for Linux). Dev Containers rely on a Linux environment.</li> <li>Install WSL: Follow the official Microsoft guide to install WSL. We recommend installing the Ubuntu distribution when prompted.</li> <li>Configure Docker Desktop: Ensure Docker Desktop is configured to use the WSL 2 backend. Go to Docker Desktop settings -&gt; Resources -&gt; WSL Integration and enable it for your chosen distribution (e.g., Ubuntu).</li> <li>Clone Project in WSL: Clone this repository inside your WSL environment (e.g., in <code>/home/&lt;your-username&gt;/dev/apiv2</code> within Ubuntu), not on your Windows C: drive. You can access the WSL terminal by typing <code>wsl</code> or <code>ubuntu</code> in your Windows Terminal or Command Prompt.</li> </ul>"},{"location":"getting-started/setup/works-locally/devcontainer/#launching-the-dev-container","title":"Launching the Dev Container","text":"<ol> <li>Clone this repository to your local machine (inside WSL if on Windows).</li> <li>Open the cloned repository folder in VS Code or Cursor (<code>code .</code> or <code>cursor .</code> from the terminal inside the project directory).</li> <li>Your editor should automatically detect the <code>.devcontainer</code> configuration and prompt you to \"Reopen in Container\". Click it.</li> <li>If it doesn't prompt, open the command palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>) and run <code>Dev Containers: Reopen in Container</code>.</li> </ol> <p>VS Code or Cursor will build the Docker image (if not already built) and start the container. Your editor window will then be connected to the containerized environment, complete with all dependencies.</p> <p>For more general information, refer to the official VS Code Dev Containers documentation.</p>"},{"location":"getting-started/setup/works-locally/introduction/","title":"Introduction","text":"<p>You should choose to work locally if your machine is faster than the machine of Gitpod and Codespaces, otherwise, I would recommend you work on the cloud.</p>"},{"location":"getting-started/setup/works-locally/introduction/#set-up-4geeks-dependencies","title":"Set up 4geeks dependencies","text":""},{"location":"getting-started/setup/works-locally/introduction/#option-one-install-docker-required-for-devcontainer","title":"Option one: install Docker (Required for Devcontainer)","text":"<p>Install Docker Engine and Docker Compose, if you use Linux you can know what your Linux distribution running <code>uname -n</code>.</p>"},{"location":"getting-started/setup/works-locally/introduction/#why-install-docker-and-docker-composer","title":"Why install Docker and Docker Composer","text":"<p>4geeks depends on Postgres and Redis to open the server, the easier way to set up these dependencies for the development team is using a configuration file, it is that Docker does.</p>"},{"location":"getting-started/setup/works-locally/introduction/#can-i-use-podman-and-podman-compose","title":"Can I use Podman and Podman Compose?","text":"<p>Podman supports Dockerfile and Docker Compose files, you should install Podman</p>"},{"location":"getting-started/setup/works-locally/introduction/#must-i-install-docker-enginepodman-or-docker-desktoppodman-desktop","title":"Must I install Docker Engine/Podman or Docker Desktop/Podman Desktop?","text":"<p>Windows users and Mac users usually install Docker Desktop, and Linux users install Docker Engine, my recommendation is if you use Windows, install Docker Desktop because it is complicated to install on Windows, in Mac and Linux choose Docker Desktop if you want to manage it with and graphical interface, else install Docker Engine.</p>"},{"location":"getting-started/setup/works-locally/introduction/#can-i-use-podman-to-run-devcontainer","title":"Can I use Podman to run Devcontainer?","text":"<p>Yes, but you should have compatibility issues.</p>"},{"location":"getting-started/setup/works-locally/introduction/#option-two-install-postgres-and-redis-manually","title":"Option two: install Postgres and Redis manually","text":"<p>Read, install, and configure Postgres and Redis.</p>"},{"location":"getting-started/setup/works-locally/introduction/#advantages-of-working-locally","title":"Advantages of working locally.","text":"<ul> <li>It offers less latency than using an editor on the cloud.</li> <li>May provide better performance than works in the cloud if your machine is older.</li> <li>It will work even without the internet.</li> </ul>"},{"location":"getting-started/setup/works-locally/introduction/#disadvantages-of-using-an-editor-on-the-cloud","title":"Disadvantages of using an Editor on the Cloud.","text":"<ul> <li>May provide better performance than works in the cloud if your machine is older.</li> <li>You will deal with the configurations.</li> </ul>"},{"location":"getting-started/setup/works-locally/on-host-os/","title":"Works on host Operative System","text":"<p>This is the faster option because it runs directly on your machine without any extra layer that adds some latency compared with this option, but should have a problem that you would have to fix manually.</p> <p>See what is an Operative System.</p>"},{"location":"getting-started/setup/works-locally/on-host-os/#set-up-4geeks-dependencies","title":"Set up 4geeks dependencies","text":"<p>Read this.</p>"},{"location":"getting-started/setup/works-locally/on-host-os/#set-up-python-dependencies","title":"Set up Python dependencies","text":"<p>We have a script with a lot of hooks to try to fix many issues that could happen during the installation</p> <pre><code>python -m scripts.install\n</code></pre>"},{"location":"getting-started/setup/works-locally/on-host-os/#start-the-server","title":"Start the server","text":""},{"location":"getting-started/setup/works-locally/on-host-os/#collect-statics","title":"Collect statics","text":"<p>Load the public files in Django, which it requires to open the Django Admin.</p> <pre><code>poetry run python manage.py collectstatic --noinput\n</code></pre>"},{"location":"getting-started/setup/works-locally/on-host-os/#run-migrations","title":"Run migrations","text":""},{"location":"getting-started/setup/works-locally/on-host-os/#what-is-a-migration","title":"What is a migration?","text":"<p>Read this.</p>"},{"location":"getting-started/setup/works-locally/on-host-os/#run-the-migrations","title":"Run the migrations","text":"<pre><code>poetry run python manage.py migrate\n</code></pre>"},{"location":"getting-started/setup/works-locally/on-host-os/#populate-the-database","title":"Populate the database","text":"<p>You should populate your database with initial data using:</p> <pre><code>poetry run python manage.py loaddata breathecode/*/fixtures/dev_*.json\n</code></pre>"},{"location":"getting-started/setup/works-locally/on-host-os/#create-a-super-user","title":"Create a super user","text":"<p>To get in Django Admin you need to create an account, this account will be saved in Postgres.</p> <pre><code>poetry run python manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/setup/works-locally/on-host-os/#run-server","title":"Run server","text":"<p>To open the server run:</p> <pre><code>poetry run start\n</code></pre> <p>If something goes wrong execute this to get a diagnosis.</p> <pre><code>python -m scripts.doctor\n</code></pre>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/","title":"Works on Codespaces","text":""},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#what-is-codespaces","title":"What is Codespaces?","text":"<p>Codespaces is the cloud version of Visual Studio Code.</p>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#advantages-of-using-codespaces","title":"Advantages of using Codespaces","text":"<ul> <li>It support all Visual Studio extensions.</li> </ul>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#disadvantages-of-using-codespaces","title":"Disadvantages of using Codespaces","text":"<ul> <li>The big companies hates compete, Microsoft injected a validation, and you cannot install or execute Pylance (and other extensions made by them) on any editor that was not released by them, even if that editor is based in Visual Studio Code, actually this is nasty and unfair, and this affect our as consumers.</li> </ul>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#opening-your-project-on-codespaces","title":"Opening your project on Codespaces","text":"<p>Read this.</p>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#github-codespaces","title":"GitHub Codespaces","text":"<p>GitHub Codespaces is the recommended way to get started, especially for beginners or if you have a less powerful machine. It provides a fully configured cloud-based development environment, accessible directly through your browser or via VS Code/Cursor.</p>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#setting-up-a-codespace","title":"Setting up a Codespace","text":"<ol> <li>Navigate to the main page of the repository on GitHub.</li> <li>Click the <code>Code</code> button.</li> <li>Go to the <code>Codespaces</code> tab.</li> <li>Click <code>Create codespace on main</code> (or your desired branch).</li> </ol> <p>GitHub will set up the environment based on the <code>.devcontainer</code> configuration in the repository. Once ready, you'll have VS Code/Cursor running in your browser (or connected locally) with all dependencies and tools installed.</p>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#important-note-for-codespaces","title":"Important Note for Codespaces","text":"<p>Due to potential timing issues with Codespaces setup (<code>postStartCommand</code>), the background services (like the database) might not start automatically. After your Codespace has loaded, open a terminal and run:</p> <pre><code>docker compose up -d redis postgres\n</code></pre> <p>(Or simply <code>docker compose up -d</code> to ensure all services defined in the compose file are running). This ensures the necessary services are available before running the API.</p>"},{"location":"getting-started/setup/works-on-the-cloud/codespaces/#changing-codespace-machine-type","title":"Changing Codespace Machine Type","text":"<p>If you find that the default Codespace machine type is too slow or you need more resources (CPU, RAM, Storage), you can change it:</p> <ul> <li>When creating a new Codespace: Before clicking \"Create codespace\", click on the three dots (...) next to the button or the \"Advanced options\" link (the UI may vary slightly). This will allow you to select a more powerful machine type.</li> <li>For an existing Codespace: You can change the machine type for an existing Codespace. Go to your list of Codespaces on GitHub (github.com/codespaces). Click the three dots (...) next to the Codespace you want to change, select \"Change machine type\", and choose a new one. The Codespace will then need to be reopened or rebuilt to apply the changes.</li> </ul> <p>Using a more powerful machine type may incur higher costs if you are outside of the free tier for GitHub Codespaces.</p> <p>For more general information, you can also refer to the official GitHub Codespaces documentation.</p>"},{"location":"getting-started/setup/works-on-the-cloud/gitpod/","title":"Works on Gitpod","text":""},{"location":"getting-started/setup/works-on-the-cloud/gitpod/#what-is-gitpod","title":"What is Gitpod?","text":"<p>Gitpod is a code editor on the cloud, It might be based on VSCodium, a free version of Visual Studio Code.</p>"},{"location":"getting-started/setup/works-on-the-cloud/gitpod/#disadvantages-of-using-gitpod","title":"Disadvantages of using Gitpod","text":"<ul> <li>Pylance is the better extension for python developers, actually the big companies hates compete, Microsoft injected a validation and you cannot install or execute Pylance (and other extensions made by them) on any editor that was not released by them, even if that editor is based in Visual Studio Code, so, you paid to use that extension with your soul, eventually should be a good idea change this extension with another one.</li> </ul>"},{"location":"getting-started/setup/works-on-the-cloud/gitpod/#opening-your-project-on-gitpod","title":"Opening your project on Gitpod","text":"<ol> <li>Install the browser extension.</li> <li>Read this.</li> </ol>"},{"location":"getting-started/setup/works-on-the-cloud/introduction/","title":"Introduction","text":""},{"location":"getting-started/setup/works-on-the-cloud/introduction/#what-is-the-cloud","title":"What is the cloud?","text":"<p>Read this.</p>"},{"location":"getting-started/setup/works-on-the-cloud/introduction/#advantages-of-using-an-editor-on-the-cloud","title":"Advantages of using an Editor on the Cloud.","text":"<ul> <li>Does not need to be configured.</li> <li>May provide better performance than your local machine if your machine is older.</li> <li>It will save your changes on the cloud, if you computer got break without saving the changes on Github, you will not lose your changes.</li> </ul>"},{"location":"getting-started/setup/works-on-the-cloud/introduction/#disadvantages-of-using-an-editor-on-the-cloud","title":"Disadvantages of using an Editor on the Cloud.","text":"<ul> <li>May provide worse performance than your local machine if your machine is newest.</li> <li>It will close if you do not use it during a time.</li> </ul>"},{"location":"infrastructure/environment-variables/","title":"Environment variables","text":"name description ENV Represents the current environment, can be <code>DEVELOPMENT</code>, <code>TEST</code>, and <code>PRODUCTION</code> LOG_LEVEL Represents the log level for the logging module, can be <code>NOTSET</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code> DATABASE_URL Represents the connection string to the database, you can read more about schema url CACHE_MIDDLEWARE_MINUTES Represents how long an item will last in the cache API_URL Represents the url of api rest ADMIN_URL Represents the url of frontend of the admin APP_URL Represents the url of frontend of the webside REDIS_URL Represents the url of Redis CELERY_TASK_SERIALIZER Represents the default serialization method to use. Can be pickle <code>json</code>, <code>yaml</code>, <code>msgpack</code> or any custom serialization methods EMAIL_NOTIFICATIONS_ENABLED Represents if the server can send notifications through email SYSTEM_EMAIL Represents the email of <code>Breathecode</code> for support SAVE_LEADS Represents if Breathecode will persist the leads COMPANY_NAME Represents the company name COMPANY_CONTACT_URL Represents the company contact url COMPANY_LEGAL_NAME Represents the company legal name COMPANY_ADDRESS Represents the company address MEDIA_GALLERY_BUCKET Represents the bucket for the media gallery DOWNLOADS_BUCKET Represents the bucket for the CSV files PROFILE_BUCKET Represents the bucket for profile avatars"},{"location":"infrastructure/infra-env/","title":"Environment variables","text":"<p>This article only includes the environment variables related to the infrastructure.</p>"},{"location":"infrastructure/infra-env/#web_worker_connection","title":"WEB_WORKER_CONNECTION","text":"<p>The maximum number of simultaneous clients.</p>"},{"location":"infrastructure/infra-env/#default","title":"Default","text":"<p>200</p>"},{"location":"infrastructure/infra-env/#references","title":"References","text":"<ul> <li>Gunicorn documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/web.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#note","title":"Note","text":"<ul> <li>Maybe this variable should be called <code>WEB_WORKER_CONNECTIONS</code> instead</li> </ul>"},{"location":"infrastructure/infra-env/#web_timeout","title":"WEB_TIMEOUT","text":"<ul> <li>Time to wait to send the web request, worker that exceeds that time will be killed and restarted.</li> </ul>"},{"location":"infrastructure/infra-env/#default_1","title":"Default","text":"<p>29</p>"},{"location":"infrastructure/infra-env/#references_1","title":"References","text":"<ul> <li>Gunicorn documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_1","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/web.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#web_workers","title":"WEB_WORKERS","text":"<p>Number of workers that respond to web requests.</p>"},{"location":"infrastructure/infra-env/#default_2","title":"Default","text":"<p>2</p>"},{"location":"infrastructure/infra-env/#references_2","title":"References","text":"<ul> <li>Gunicorn documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_2","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/web.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#web_worker_class","title":"WEB_WORKER_CLASS","text":"<p>Worker to be used within <code>Gunicorn</code>.</p>"},{"location":"infrastructure/infra-env/#default_3","title":"Default","text":"<p>gevent</p>"},{"location":"infrastructure/infra-env/#references_3","title":"References","text":"<ul> <li>Gunicorn documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#log_level","title":"LOG_LEVEL","text":"<p>Define the minimum log level to show.</p>"},{"location":"infrastructure/infra-env/#default_4","title":"Default","text":"<p>INFO</p>"},{"location":"infrastructure/infra-env/#where-it-is-used_3","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/celeryworker.sh</code></li> <li><code>breathecode/settings.py</code></li> </ul>"},{"location":"infrastructure/infra-env/#celery_min_workers","title":"CELERY_MIN_WORKERS","text":"<p>Minimum workers to be up.</p>"},{"location":"infrastructure/infra-env/#default_5","title":"Default","text":"<p>2</p>"},{"location":"infrastructure/infra-env/#references_4","title":"References","text":"<ul> <li>Celery documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_4","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/celeryworker.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#celery_max_workers","title":"CELERY_MAX_WORKERS","text":"<p>Maximum workers to be up.</p>"},{"location":"infrastructure/infra-env/#default_6","title":"Default","text":"<p>2</p>"},{"location":"infrastructure/infra-env/#references_5","title":"References","text":"<ul> <li>Celery documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_5","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/celeryworker.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#celery_prefetch_multiplier","title":"CELERY_PREFETCH_MULTIPLIER","text":"<p>Number of messages that will be accepted by each worker.</p>"},{"location":"infrastructure/infra-env/#default_7","title":"Default","text":"<p>4</p>"},{"location":"infrastructure/infra-env/#references_6","title":"References","text":"<ul> <li>Celery documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_6","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/celeryworker.sh</code></li> </ul>"},{"location":"infrastructure/infra-env/#celery_pool","title":"CELERY_POOL","text":"<p>Worker class that will manage the concurrency.</p>"},{"location":"infrastructure/infra-env/#default_8","title":"Default","text":"<p>prefork</p>"},{"location":"infrastructure/infra-env/#references_7","title":"References","text":"<ul> <li>Celery documentation.</li> </ul>"},{"location":"infrastructure/infra-env/#where-it-is-used_7","title":"Where it is used","text":"<ul> <li><code>scripts/dyno/celeryworker.sh</code></li> </ul>"},{"location":"infrastructure/journal/","title":"Journal","text":""},{"location":"infrastructure/journal/#notes","title":"Notes","text":"<ul> <li>RPM: request per minute.</li> <li><code>/v1/admissions/cohort/all</code>: a light endpoint cached.</li> <li><code>/v1/admissions/syllabus/version</code>: a heavy endpoint cached.</li> </ul>"},{"location":"infrastructure/journal/#01122024","title":"01/12/2024","text":"<ul> <li><code>[dev]</code> switch <code>WEB_WORKER_CLASS</code> from <code>gevent</code> to <code>uvicorn.workers.UvicornWorker</code>.</li> <li><code>[dev]</code> switch <code>WEB_WORKERS</code> from <code>1</code> to <code>2</code>.</li> <li><code>[dev]</code> switch <code>WEB_WORKER_CONNECTION</code> from <code>120</code> to <code>160</code>.</li> </ul> <p>Side effects:</p> <ul> <li>Support to async in Django.</li> <li>Memory up from 265MB to 437MB.</li> <li><code>/v1/admissions/cohort/all</code> and <code>/v1/admissions/syllabus/version</code> changed from 35 RPM both to 133 RPM #1 and 31 RPM #2, this should change with each attempt.</li> </ul>"},{"location":"infrastructure/journal/#01152024","title":"01/15/2024","text":"<ul> <li><code>[all]</code> <code>django_minify_html</code> was added to the middlewares.</li> <li><code>[prod]</code> <code>make_charges</code> frequency changed from <code>every 10 minutes</code> to <code>Daily at 12:00 AM UTC</code>.</li> </ul>"},{"location":"infrastructure/journal/#01162024","title":"01/16/2024","text":"<ul> <li><code>[prod]</code> set <code>CELERY_DYNOS</code> to <code>2</code>.</li> <li><code>[prod]</code> set <code>CELERY_MAX_WORKERS</code> to <code>3</code>.</li> <li><code>[dev]</code> switch <code>CELERY_MAX_WORKERS</code> from <code>1</code> to <code>2</code>.</li> </ul>"},{"location":"infrastructure/journal/#01172024","title":"01/17/2024","text":"<ul> <li><code>[all]</code> <code>STATIC_BUCKET</code> setted.</li> </ul> <p>Side effects:</p> <ul> <li><code>/v1/admissions/cohort/all</code> changed from 133 RPM both to 145 - 170 (one time) RPM, this should change with each attempt.</li> </ul>"},{"location":"infrastructure/journal/#01242024","title":"01/24/2024","text":"<ul> <li><code>[prod]</code> preboot was enabled.</li> <li><code>[prod]</code> switch <code>WEB_WORKER_CLASS</code> from <code>gevent</code> to <code>uvicorn.workers.UvicornWorker</code>.</li> <li><code>[prod]</code> switch <code>LOG_LEVEL</code> from <code>DEBUG</code> to <code>WARNING</code>.</li> <li><code>[prod]</code> set <code>WEB_MAX_REQUESTS</code> to <code>6000</code>.</li> <li><code>[prod]</code> set <code>WEB_MAX_REQUESTS_JITTER</code> to <code>3000</code>.</li> <li><code>[dev]</code> set <code>WEB_MAX_REQUESTS</code> to <code>100</code>.</li> <li><code>[dev]</code> set <code>WEB_MAX_REQUESTS_JITTER</code> to <code>50</code>.</li> </ul> <p>Side effects:</p> <ul> <li>In dev, this prevents the server could getting out of memory.</li> <li>In prod, this helps to have sufficient memory to add a third worker.</li> <li>If the server would have 1000 requests each 10 minutes, this would restart the worker each 60-90 minutes.</li> </ul>"},{"location":"infrastructure/journal/#01252024","title":"01/25/2024","text":"<ul> <li><code>[prod]</code> switch <code>WEB_MAX_REQUESTS</code> from <code>6000</code> to <code>3000</code>.</li> <li><code>[prod]</code> switch <code>WEB_MAX_REQUESTS_JITTER</code> from <code>3000</code> to <code>1500</code>.</li> </ul> <p>Reasons for the change:</p> <ul> <li>Web worker was reaching 841 MB ram.</li> </ul>"},{"location":"infrastructure/journal/#-09092024","title":"-09/09/2024","text":"<ul> <li><code>[all]</code> <code>GOOGLE_SECRET</code> setted.</li> <li><code>[dev]</code> <code>GOOGLE_CLIENT_ID</code> setted.</li> <li><code>[all]</code> <code>GOOGLE_REDIRECT_URL</code> setted.</li> </ul>"},{"location":"infrastructure/journal/#11092024","title":"11/09/2024","text":"<ul> <li><code>[all]</code> <code>GOOGLE_CLIENT_SECRET</code> setted.</li> </ul> <p>Why:</p> <ul> <li>To enable the oauth flow for the Google Meet API.</li> </ul>"},{"location":"infrastructure/journal/#30092024","title":"30/09/2024","text":"<ul> <li><code>[prod]</code> set <code>GOOGLE_WEBHOOK_TOPIC</code> to <code>webhook</code>.</li> <li><code>[dev]</code> set <code>GOOGLE_WEBHOOK_TOPIC</code> to <code>webhook-test</code>.</li> </ul> <p>Why:</p> <ul> <li>Google doesn't support webhooks directly, it uses its Pub/Sub service.</li> </ul>"},{"location":"infrastructure/journal/#06102024","title":"06/10/2024","text":"<ul> <li><code>[dev]</code> <code>HEROKU_POSTGRESQL_TEAL</code> was replaced by <code>HEROKU_POSTGRESQL_GOLD</code>.</li> </ul>"},{"location":"infrastructure/journal/#29012025","title":"29/01/2025","text":"<ul> <li><code>[dev]</code> switch <code>CELERY_CONCURRENCY</code> from <code>8</code> to <code>4</code>.</li> </ul> <p>Why:</p> <ul> <li>To reduce the memory usage of the celery workers.</li> </ul>"},{"location":"infrastructure/web/","title":"Web","text":""},{"location":"infrastructure/web/#studies","title":"Studies","text":"<ul> <li>Django workers</li> <li>HTTP client</li> </ul>"},{"location":"infrastructure/web/#setup","title":"Setup","text":""},{"location":"infrastructure/web/#worker","title":"Worker","text":"<p>Gunicorn + Uvicorn.</p>"},{"location":"infrastructure/web/#http-client","title":"HTTP client","text":""},{"location":"infrastructure/web/#sync","title":"Sync","text":"<p>Requests.</p>"},{"location":"infrastructure/web/#async","title":"Async","text":"<p>AIOHTTP.</p>"},{"location":"infrastructure/web/#next-step","title":"Next step","text":""},{"location":"infrastructure/web/#strategy-about-blocking-code","title":"Strategy about blocking code","text":"<ol> <li>All blocking code will be split in db and others.</li> <li>Make a <code>v2</code> to all endpoints with blocking code from the category others.</li> <li>All new endpoints that use blocking code must use async functions.</li> <li>All blocking code from the category db is sync, I think that forcing a massive migration should be a bit useless, django just wrote a wrapper.</li> </ol>"},{"location":"infrastructure/web/#study-async-replacements-to-the-actual-libs","title":"Study async replacements to the actual libs","text":"<p>Sometimes the async libs work significantly faster than sync libraries, it is necessary to collect those cases and use those libs, you must take into consideration that some codes are faster using sync code.</p>"},{"location":"infrastructure/web/#see-how-progress-uvicorn","title":"See how progress Uvicorn","text":"<p>Uvicorn is the most stable worker, if it fails we must study how do works Hypercorn with Evloop.</p>"},{"location":"infrastructure/studies/django-workers/","title":"Better Django worker","text":"<p>This article is based fundamentally on which option is better in efficiency and features, we are covering three libraries because they were popular choices by the community.</p>"},{"location":"infrastructure/studies/django-workers/#collected-workers","title":"Collected workers","text":""},{"location":"infrastructure/studies/django-workers/#gevent","title":"Gevent","text":"<p>Gevent patches many system libraries to become cooperative and it does that the worker works as if this were asynchronous but over WSGI, but this does not allow running asynchronous code.</p>"},{"location":"infrastructure/studies/django-workers/#uvicorn","title":"Uvicorn","text":"<p>Uvicorn is an ASGI implementation for Python, it is known as a faster worker until now.</p>"},{"location":"infrastructure/studies/django-workers/#hypercorn","title":"Hypercorn","text":"<p>Hypercorn is an ASGI implementation for Python, it is a good option compared with Uvicorn.</p>"},{"location":"infrastructure/studies/django-workers/#source-of-truth","title":"Source of Truth","text":"<p>I needed to see how should impact the blocking code to the web worker, I wrote <code>Gevent vs Uvicorn vs Hypercorn</code> to cover this purpose, this is the next charset of <code>Requests vs HTTPX vs AIOHTTP</code>.</p>"},{"location":"infrastructure/studies/django-workers/#source","title":"Source","text":"<ul> <li>Requests vs HTTPX vs AIOHTTP</li> <li>Gevent vs Uvicorn vs Hypercorn</li> </ul>"},{"location":"infrastructure/studies/django-workers/#result","title":"Result","text":"<ul> <li>Requests vs HTTPX vs AIOHTTP</li> <li>Web worker tests</li> <li>Emulating cache</li> </ul>"},{"location":"infrastructure/studies/django-workers/#which-was-the-conclusions","title":"Which was the conclusions","text":"<p>Should be fine read this first, it was the results:</p> <p>Gevent:</p> <ul> <li>Stability: good</li> <li>Blocking code: it is bad, it gets worse the longer it lasts.</li> <li>Non-blocking code: it is the better option.</li> <li>Async support: no.</li> <li>Best HTTP sync client: requests, HTTPX performs bad, maybe its performance is degraded by the patch.</li> <li>Best HTTP async client: not compatible.</li> </ul> <p>Uvicorn:</p> <ul> <li>Statibility: good</li> <li>Blocking code: Good.</li> <li>Non-blocking code: regular.</li> <li>Async support: yes.</li> <li>Best HTTP sync client: requests, HTTPX performs bad, maybe its performance is degraded by the patch.</li> <li>Best HTTP async client: AIOHTTP is good.</li> </ul> <p>Hypercorn + Asyncio:</p> <ul> <li>Stability: bad, I could configure it properly.</li> <li>Blocking code: weak.</li> <li>Non-blocking code: regular.</li> <li>Async support: yes.</li> <li>Best HTTP sync client: requests, HTTPX performs bad, maybe its performance is degraded by the patch.</li> <li>Best HTTP async client: AIOHTTP is good.</li> </ul> <p>Hypercorn + Evloop:</p> <ul> <li>Stability: bad, I could configure it properly.</li> <li>Blocking code: Best performance, with fails.</li> <li>Non-blocking code: regular.</li> <li>Async support: yes.</li> <li>Best HTTP sync client: requests, HTTPX perform bad, maybe its performance is degraded by the patch.</li> <li>Best HTTP async client: AIOHTTP is good.</li> </ul> <p>Hypercorn + Trio:</p> <ul> <li>Stability: no supported yet</li> </ul>"},{"location":"infrastructure/studies/django-workers/#notes","title":"Notes","text":"<ul> <li>RPS are requests per second.</li> <li>Requests do not support asynchronous code, so you cannot use wait with it.</li> </ul>"},{"location":"infrastructure/studies/django-workers/#making-requests-within-the-web-worker","title":"Making requests within the web worker","text":"Library Gevent Uvicorn Hypercorn + Asyncio Hypercorn + Evloop Sync JSON 30913.89 RPS 4061.19 RPS 3753.90 RPS 4929.08 RPS Async JSON 3464.25 RPS 3270.73 RPS 4533.80 RPS Sync query JSON 11498.22 RPS 1845.01 RPS 1691.03 RPS 1969.74 RPS Async query JSON 1997.32 RPS 1565.80 RPS 2148.56 RPS Sync query HTML 7113.50 RPS 1590.24 RPS 1189.28 RPS 1577.94 RPS Async query HTML 1749.29 RPS 1382.19 RPS 1792.08 RPS Sync blocking 1s 1861.80 RPS 1819.99 RPS 1747.01 RPS 1769.52 RPS Async blocking 1s 1805.06 RPS 1676.20 RPS 1712.17 RPS Sync blocking 3s 635.14 RPS 631.95 RPS 585.55 RPS 578.60 RPS Async blocking 3s 1592.22 RPS 1476.54 RPS 1395.52 RPS Sync blocking 10s 181.38 RPS 181.37 RPS 181.43 RPS 152.51 RPS Async blocking 10s 90.72 RPS 37.97 RPS 29.12 RPS Sync Brotli 414.45 RPS 295.72 RPS 314.35 RPS 324.34 RPS Async Brotli 158.04 RPS 142.45 RPS 193.18 RPS Sync Request 38.50 RPS 25.08 RPS 22.04 RPS 16.01 RPS Async Request 0.00 RPS 0.00 RPS 0.00 RPS Sync HTTPX 0.50 RPS 0.00 RPS 0.00 RPS 0.00 RPS Async HTTPX 42.81 RPS 17.74 RPS 17.42 RPS Async AIOHTTP 35.07 RPS 23.40 RPS 45.29 RPS Sync Fake Redis hit 26658.00 RPS 5654.22 RPS 3251.49 RPS 4327.30 RPS Async Fake Redis hit 6295.06 RPS 3735.66 RPS 4035.76 RPS Sync Fake Redis set 9669.09 RPS 4366.79 RPS 3236.40 RPS 3676.91 RPS Async Fake Redis set 3806.02 RPS 3399.52 RPS 3713.74 RPS"},{"location":"infrastructure/studies/http-clients/","title":"Better HTTP client","text":"<p>This article is based fundamentally on which option is better in efficiency and features, we are covering tree libraries because them was a popular choice by the community.</p>"},{"location":"infrastructure/studies/http-clients/#collected-http-clients","title":"Collected HTTP clients","text":""},{"location":"infrastructure/studies/http-clients/#request","title":"Request","text":"<p>Requests is a library that focuses on a synchronous way to write code, it is the most popular choice but lacks asynchronous compatibility.</p>"},{"location":"infrastructure/studies/http-clients/#httpx","title":"HTTPX","text":"<p>HTTPX is a library that is synchronous and asynchronous, this library is the most versatile of them, and it supports HTTP2.</p>"},{"location":"infrastructure/studies/http-clients/#aiohttp","title":"AIOHTTP","text":"<p>AIOHTTP is a library focused on asynchronous code, and many people claim that it is a faster library.</p>"},{"location":"infrastructure/studies/http-clients/#source-of-truth","title":"Source of Truth","text":"<p>To see how these libraries perform about each other I wrote <code>Requests vs HTTPX vs AIOHTTP</code>, and then I needed to see how should impact the blocking code to the web worker, I wrote <code>Gevent vs Uvicorn vs Hypercorn</code> to cover this purpose</p>"},{"location":"infrastructure/studies/http-clients/#source","title":"Source","text":"<ul> <li>Requests vs HTTPX vs AIOHTTP</li> <li>Gevent vs Uvicorn vs Hypercorn</li> </ul>"},{"location":"infrastructure/studies/http-clients/#result","title":"Result","text":"<ul> <li>Requests vs HTTPX vs AIOHTTP, 1000 requests</li> <li>Requests vs HTTPX vs AIOHTTP, 20 urls</li> <li>Effects of using blocking code</li> </ul>"},{"location":"infrastructure/studies/http-clients/#which-was-the-conclusions","title":"Which was the conclusions","text":"<p>Requests and AIOHTTP were the most stable over all web workers, I could not get HTTPX to work with those settings. HTTPX is theoretically better than Requests but I cannot replicate it. AIOHTTP was from 4 to 10 times faster than Requests, and it does not block the execution flow. You can follow this topic here.</p>"},{"location":"infrastructure/studies/http-clients/#notes","title":"Notes","text":"<ul> <li>RPS are requests per second.</li> <li>Requests do not support asynchronous code, so you cannot use wait with it.</li> <li>All requests were tested within 22 seconds.</li> </ul>"},{"location":"infrastructure/studies/http-clients/#visit-httpswwwgooglecom-1000-times","title":"Visit https://www.google.com 1000 times","text":"Library Sync Async Requests 48.43s HTTPX 19.02s 37.86s AIOHTTP 13.03s"},{"location":"infrastructure/studies/http-clients/#visit-20-sites","title":"Visit 20 sites","text":"Library Sync Async Requests 7.15s HTTPX 4.37s 2.28s AIOHTTP 0.72s"},{"location":"infrastructure/studies/http-clients/#making-requests-within-the-web-worker","title":"Making requests within the web worker","text":"Library Gevent Uvicorn Hypercorn + Asyncio Hypercorn + Evloop Sync Requests 40.12 RPS 27.72 RPS 16.47 RPS 16.20 RPS Async Requests 0.00 RPS 0.00 RPS 0.00 RPS Sync HTTPX 0.41 RPS 3.58 RPS 0.00 RPS 0.00 RPS Async HTTPX 0.00 RPS 21.83 RPS 18.61 RPS Async AIOHTTP 24.18 RPS 18.73 RPS 37.26 RPS"},{"location":"installation/fixtures/","title":"Fixtures","text":"<p>Fixtures are fake data ideal for development.</p>"},{"location":"installation/fixtures/#saving-new-fixtures","title":"Saving new fixtures","text":"<pre><code>python manage.py dumpdata auth &gt; ./breathecode/authenticate/fixtures/users.json\n</code></pre>"},{"location":"installation/fixtures/#loading-all-fixtures","title":"Loading all fixtures","text":"<pre><code>poetry run python manage.py loaddata breathecode/*/fixtures/dev_*.json\n</code></pre>"},{"location":"payments/","title":"Payments Module","text":"<p>The payments module handles all subscription, billing, and payment-related functionality.</p>"},{"location":"payments/#features","title":"Features","text":""},{"location":"payments/#subscription-seats","title":"Subscription Seats","text":"<p>Team-based subscriptions where one owner can share access with multiple team members.</p> <ul> <li>Quick Start Guide - Simple introduction for beginners</li> <li>API Documentation - Detailed endpoint reference</li> <li>OpenAPI Spec - Machine-readable API definition</li> <li>Postman Collection - Ready-to-use API tests</li> </ul>"},{"location":"payments/#key-concepts","title":"Key Concepts","text":"<ul> <li>Subscriptions: Recurring payment plans</li> <li>Billing Teams: Groups that share subscription access</li> <li>Seats: Individual team member access</li> <li>Auto-Recharge: Automatic balance top-up</li> <li>Consumables: Services that can be consumed (mentorship, events, etc.)</li> <li>Consumption Strategy: How consumables are distributed (PER_TEAM vs PER_SEAT)</li> <li>is_team_allowed: Flag that determines consumable allocation:</li> <li><code>False</code>: Consumables go to subscription owner (personal)</li> <li><code>True</code>: Consumables go to team/seats (shared or per-seat)</li> </ul>"},{"location":"payments/#getting-started","title":"Getting Started","text":"<ol> <li>Read the Subscription Seats Guide to understand the basics</li> <li>Review the API Documentation for implementation details</li> <li>Import the Postman Collection to test endpoints</li> </ol> <p>File Locations: - Postman Collection: <code>openapi/subscription-seats/postman_collection.json</code> - OpenAPI Spec: <code>openapi/subscription-seats/openapi.yaml</code></p>"},{"location":"payments/#architecture","title":"Architecture","text":""},{"location":"payments/#per_team-strategy-shared-pool","title":"PER_TEAM Strategy (Shared Pool)","text":"<pre><code>User (Owner)\n  \u2514\u2500 Subscription\n      \u251c\u2500 Owner Consumables (is_team_allowed=False)\n      \u2502   \u251c\u2500 10 personal mentorship hours\n      \u2502   \u2514\u2500 5 personal event tickets\n      \u2502\n      \u2514\u2500 Billing Team\n          \u251c\u2500 Team Consumables (is_team_allowed=True, SHARED)\n          \u2502   \u251c\u2500 100 mentorship hours\n          \u2502   \u251c\u2500 50 event tickets\n          \u2502   \u2514\u2500 Auto-recharge enabled\n          \u2502\n          \u2514\u2500 Seats (Members)\n              \u251c\u2500 Member A (can use team consumables)\n              \u251c\u2500 Member B (can use team consumables)\n              \u2514\u2500 Member C (can use team consumables)\n</code></pre> <p>How it works: - Owner gets personal consumables (<code>is_team_allowed=False</code>) - Team has a shared pool of consumables (<code>is_team_allowed=True</code>) - Any team member can consume from the shared pool - When pool runs low, auto-recharge tops it up - Owner pays for all consumption</p> <p>Service Item Flag: - <code>is_team_allowed=False</code> \u2192 Consumables issued to owner only - <code>is_team_allowed=True</code> \u2192 Consumables issued to team pool</p> <p>Example: <pre><code>Team has 100 mentorship hours\n- Member A uses 30 hours \u2192 70 hours left\n- Member B uses 40 hours \u2192 30 hours left\n- Member C uses 20 hours \u2192 10 hours left\n- Auto-recharge adds 50 hours \u2192 60 hours left\n</code></pre></p>"},{"location":"payments/#per_seat-strategy-individual-allocation","title":"PER_SEAT Strategy (Individual Allocation)","text":"<pre><code>User (Owner)\n  \u2514\u2500 Subscription\n      \u251c\u2500 Owner Consumables (is_team_allowed=False)\n      \u2502   \u251c\u2500 10 personal mentorship hours\n      \u2502   \u2514\u2500 5 personal event tickets\n      \u2502\n      \u2514\u2500 Billing Team\n          \u251c\u2500 Seat 1 (Member A)\n          \u2502   \u2514\u2500 Consumables (is_team_allowed=True, individual)\n          \u2502       \u251c\u2500 10 mentorship hours\n          \u2502       \u2514\u2500 5 event tickets\n          \u2502\n          \u251c\u2500 Seat 2 (Member B)\n          \u2502   \u2514\u2500 Consumables (is_team_allowed=True, individual)\n          \u2502       \u251c\u2500 10 mentorship hours\n          \u2502       \u2514\u2500 5 event tickets\n          \u2502\n          \u2514\u2500 Seat 3 (Member C)\n              \u2514\u2500 Consumables (is_team_allowed=True, individual)\n                  \u251c\u2500 20 mentorship hours (2x multiplier)\n                  \u2514\u2500 10 event tickets (2x multiplier)\n</code></pre> <p>How it works: - Owner gets personal consumables (<code>is_team_allowed=False</code>) - Each seat has individual allocation (<code>is_team_allowed=True</code>) - Members can only use their own consumables - Seat multiplier determines allocation (2x = double) - Owner pays for all seats</p> <p>Service Item Flag: - <code>is_team_allowed=False</code> \u2192 Consumables issued to owner only - <code>is_team_allowed=True</code> \u2192 Consumables issued to each seat individually</p> <p>Example: <pre><code>Member A (1x seat):\n- Gets 10 mentorship hours\n- Uses 8 hours \u2192 2 hours left\n- Cannot use Member B's hours\n\nMember C (2x seat):\n- Gets 20 mentorship hours (2x multiplier)\n- Uses 15 hours \u2192 5 hours left\n- Cannot share with others\n</code></pre></p>"},{"location":"payments/#comparison","title":"Comparison","text":"Feature PER_TEAM PER_SEAT Owner Consumables <code>is_team_allowed=False</code> (personal) <code>is_team_allowed=False</code> (personal) Team Consumables <code>is_team_allowed=True</code> (shared pool) <code>is_team_allowed=True</code> (per seat) Flexibility High (anyone can use) Low (fixed per member) Recharge Manual or Auto (team level) Manual or Auto (per seat) Auto-Recharge \u2705 Supported \u2705 Supported (per seat) Seat Multiplier Not used Determines allocation Use Case Small teams, flexible usage Large teams, fair distribution Example Startup with 3 devs Enterprise with 50 employees"},{"location":"payments/#related-modules","title":"Related Modules","text":"<ul> <li>Provisioning: Manages consumable allocation</li> <li>Monitoring: Tracks usage and spending</li> <li>Notify: Sends payment notifications</li> </ul>"},{"location":"payments/auto-recharge-architecture/","title":"Auto-Recharge Architecture","text":"<p>Detailed architecture diagrams and technical implementation of the auto-recharge system.</p>"},{"location":"payments/auto-recharge-architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"payments/auto-recharge-architecture/#subscriptionbillingteam-model","title":"SubscriptionBillingTeam Model","text":"<p>Fields: - <code>auto_recharge_enabled</code>: bool - <code>recharge_threshold_amount</code>: decimal - <code>recharge_amount</code>: decimal - <code>max_period_spend</code>: decimal (optional)</p> <p>Methods: - <code>get_current_monthly_period_dates()</code> \u2192 (start, end) - <code>get_current_period_spend()</code> \u2192 float - <code>can_auto_recharge(amount, lang)</code> \u2192 (bool, str)</p> <p>Relationship: Has many Consumables</p>"},{"location":"payments/auto-recharge-architecture/#consumable-model","title":"Consumable Model","text":"<p>Fields: - <code>subscription_billing_team</code>: FK (nullable) - <code>user</code>: FK (null for team consumables) - <code>how_many</code>: int (-1 = unlimited) - <code>service_item</code>: FK</p> <p>Relationship: References AcademyService via service_item</p>"},{"location":"payments/auto-recharge-architecture/#academyservice-model","title":"AcademyService Model","text":"<p>Fields: - <code>academy</code>: FK - <code>service</code>: FK - <code>price_per_unit</code>: decimal</p> <p>Purpose: Provides pricing for balance calculations</p>"},{"location":"payments/auto-recharge-architecture/#signal-flow","title":"Signal Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   User Action    \u2502\n\u2502  (Consume API)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  consume_service.send(instance=consumable, how_many=X)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502                                                      \u2502\n         \u25bc                                                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 consume_service_receiver\u2502                    \u2502 check_consumable_balance \u2502\n\u2502  (Update how_many)      \u2502                    \u2502  _for_auto_recharge      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u2502 1. Check team exists\n                                                          \u2502 2. Check auto_recharge_enabled\n                                                          \u2502 3. Check spending limit\n                                                          \u2502 4. Calculate balance\n                                                          \u2502    (using AcademyService pricing)\n                                                          \u2502\n                                                          \u25bc\n                                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                               \u2502 Balance &lt; threshold? \u2502\n                                               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502 Yes\n                                                          \u25bc\n                                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                               \u2502 consumable_balance_low   \u2502\n                                               \u2502  .send(team, amount)     \u2502\n                                               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u25bc\n                                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                               \u2502 trigger_auto_recharge    \u2502\n                                               \u2502  _task receiver          \u2502\n                                               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u25bc\n                                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                               \u2502 process_auto_recharge    \u2502\n                                               \u2502  .delay(team_id, amount) \u2502\n                                               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u25bc\n                                                    [Celery Queue]\n                                                          \u2502\n                                                          \u25bc\n                                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                               \u2502  Celery Worker           \u2502\n                                               \u2502  + Redis Lock            \u2502\n                                               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u251c\u2500 Create consumables\n                                                          \u251c\u2500 Create invoice\n                                                          \u2514\u2500 Send notification\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#decision-tree","title":"Decision Tree","text":"<pre><code>                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Consumable consumed \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Has billing team?    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No \u2192 END\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Auto-recharge        \u2502\n                    \u2502 enabled?             \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No \u2192 END\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Monthly limit set?   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No \u2192 Skip to balance check\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Current \u2265 limit?     \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No\n                               \u2502   \u2502\n                          END \u2190\u2518   \u2502\n                                   \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Calculate balance    \u2502\n                    \u2502 (AcademyService      \u2502\n                    \u2502  pricing)            \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Unlimited (-1)?      \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No\n                               \u2502   \u2502\n                          END \u2190\u2518   \u2502\n                                   \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Balance &lt; threshold? \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No \u2192 END\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Would exceed limit?  \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Yes  \u2502  No\n                               \u2502   \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Adjust amount        \u2502\n                    \u2502 (partial or full)    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Emit signal          \u2502\n                    \u2502 \u2192 Trigger task       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#recharge-process-celery-task","title":"Recharge Process (Celery Task)","text":"<p>Steps:</p> <p>0. Acquire Redis Lock - Key: <code>\"auto_recharge:team:{team_id}\"</code> - Timeout: 300 seconds - Blocking: False (fail fast if locked)</p> <p>1. Fetch Team - Get SubscriptionBillingTeam by ID - Verify auto_recharge_enabled still true</p> <p>2. Validate Spending Limit - Get current_period_spend (from invoices) - Check &lt; max_period_spend - Adjust recharge_amount if needed</p> <p>3. Find Service Items - Query team-allowed services from subscription - Filter by is_team_allowed=True</p> <p>4. Create Consumables - For each service item:   - Get AcademyService pricing   - Calculate units (amount / price_per_unit)   - Create Consumable(user=None, subscription_billing_team=team, how_many=units) - Log creation</p> <p>5. Create Invoice (TODO) - Invoice.objects.create(user=subscription.user, amount=total_spent, subscription_billing_team=team) - Spending tracked via invoices</p> <p>6. Send Notification - Email to subscription.user - Include: amount, balance, limit, currency</p> <p>7. Release Lock &amp; Return - lock.release() - Return result dict</p>"},{"location":"payments/auto-recharge-architecture/#data-flow-example","title":"Data Flow Example","text":""},{"location":"payments/auto-recharge-architecture/#initial-state","title":"Initial State","text":"<pre><code>Team ID: 123\nSubscription Currency: USD\n\u251c\u2500 auto_recharge_enabled: True\n\u251c\u2500 recharge_threshold_amount: $10\n\u251c\u2500 recharge_amount: $20\n\u251c\u2500 max_period_spend: $100\n\u251c\u2500 current_period_spend: $40 (from invoices)\n\u2514\u2500 Team Consumables:\n    \u251c\u2500 Mentorship: 5 hours \u00d7 $2/hour = $10\n    \u2514\u2500 Events: 2 tickets \u00d7 $1/ticket = $2\n    Total Balance: $12\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#user-consumes-5-mentorship-hours","title":"User Consumes 5 Mentorship Hours","text":"<pre><code>consume_service.send(consumable, how_many=5)\n\nBalance Calculation:\n  Before: 5 hours \u00d7 $2 = $10\n  After:  0 hours \u00d7 $2 = $0\n  Total:  $0 + $2 = $2\n\nCheck: $2 &lt; $10 (threshold) \u2713\nCheck: $40 + $20 = $60 &lt; $100 (limit) \u2713\n\u2192 Trigger recharge\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#recharge-process","title":"Recharge Process","text":"<pre><code>process_auto_recharge.delay(team_id=123, recharge_amount=20)\n\n1. Acquire lock: \"auto_recharge:team:123\"\n2. Find services: Mentorship, Events\n3. Distribute $20:\n   - Mentorship: $10 \u2192 5 hours\n   - Events: $10 \u2192 10 tickets\n4. Create invoice: $20\n5. Send email\n6. Release lock\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#final-state","title":"Final State","text":"<pre><code>Team ID: 123\n\u251c\u2500 auto_recharge_enabled: True\n\u251c\u2500 recharge_threshold_amount: $10\n\u251c\u2500 recharge_amount: $20\n\u251c\u2500 max_period_spend: $100\n\u251c\u2500 current_period_spend: $60 ($40 + $20 from invoice)\n\u2514\u2500 Team Consumables:\n    \u251c\u2500 Mentorship: 5 hours \u00d7 $2/hour = $10\n    \u2514\u2500 Events: 12 tickets \u00d7 $1/ticket = $12\n    Total Balance: $22\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#integration-points","title":"Integration Points","text":""},{"location":"payments/auto-recharge-architecture/#external-integrations","title":"External Integrations","text":"<p>Django Signals (Capy Core Emisors) - consume_service (trigger) - consumable_balance_low (emit)</p> <p>Celery (Task Manager Plugin) - Task queue (RabbitMQ) - Workers (process_auto_recharge) - Priority: NOTIFICATION</p> <p>Redis - Distributed locks - Key: <code>\"auto_recharge:team:{id}\"</code></p> <p>Email Service (Notify Actions) - notify_actions.send_email_message() - Template: \"auto_recharge_completed\"</p> <p>Payment Gateway (Stripe) - stripe.pay() method - Creates Invoice model</p> <p>Database Models - SubscriptionBillingTeam (config) - Consumable (balance) - ServiceItem (team-allowed flag) - AcademyService (pricing) - Invoice (spending tracking)</p>"},{"location":"payments/auto-recharge-architecture/#error-handling","title":"Error Handling","text":""},{"location":"payments/auto-recharge-architecture/#error-scenarios","title":"Error Scenarios","text":"<p>Lock Already Acquired - AbortTask(\"Auto-recharge already in progress\") - Log warning (safe to ignore)</p> <p>Team Not Found - AbortTask(\"Team {id} not found\") - Log error</p> <p>Auto-Recharge Disabled - AbortTask(\"Auto-recharge disabled\") - Log warning</p> <p>Period Limit Reached - AbortTask(\"Period spending limit reached\") - Log warning</p> <p>No Team Service Items - AbortTask(\"No team-allowed services\") - Log warning</p> <p>AcademyService Not Found - Skip service (continue with others) - Log warning</p> <p>Notification Failure - Log warning (non-critical) - Continue (task succeeds)</p>"},{"location":"payments/auto-recharge-architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"payments/auto-recharge-architecture/#signal-receiver-optimization","title":"Signal Receiver Optimization","text":"<pre><code># Lightweight check in receiver\ndef check_consumable_balance_for_auto_recharge(...):\n    # Quick checks first (avoid DB queries if possible)\n    if not instance.subscription_billing_team:\n        return  # Fast exit\n\n    team = instance.subscription_billing_team\n    if not team.auto_recharge_enabled:\n        return  # Fast exit\n\n    # Only calculate balance if needed\n    # Uses select_related() for efficiency\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#celery-task-optimization","title":"Celery Task Optimization","text":"<pre><code># Heavy processing in async task\n@task(bind=True, priority=TaskPriority.NOTIFICATION)\ndef process_auto_recharge(...):\n    # Redis lock prevents concurrent execution\n    # select_related() reduces DB queries\n    # Bulk operations where possible\n</code></pre>"},{"location":"payments/auto-recharge-architecture/#database-queries","title":"Database Queries","text":"<ul> <li>Use <code>select_related()</code> for foreign keys</li> <li>Use <code>prefetch_related()</code> for reverse relations</li> <li>Aggregate queries for balance calculation</li> <li>Index on <code>subscription_billing_team</code> field</li> </ul>"},{"location":"payments/auto-recharge-architecture/#security-measures","title":"Security Measures","text":"<p>1. Owner-Only Modification - API endpoint validates <code>request.user == subscription.user</code> - Admin requires staff permissions</p> <p>2. Spending Limits - <code>max_period_spend</code> prevents runaway costs - Partial recharge when approaching limit</p> <p>3. Redis Lock - Prevents race conditions - Timeout prevents stuck locks (5 min)</p> <p>4. Invoice Audit Trail - All recharges create invoices - Spending calculated from invoices (not model fields)</p> <p>5. Input Validation - Serializer validates amounts (min_value=0) - Decimal precision enforced - Null handling for optional fields</p>"},{"location":"payments/auto-recharge/","title":"Auto-Recharge System","text":"<p>The auto-recharge system automatically replenishes team consumables when the balance runs low, ensuring uninterrupted service access.</p>"},{"location":"payments/auto-recharge/#overview","title":"Overview","text":"<p>When a billing team's consumable balance falls below a configured threshold, the system automatically:</p> <ol> <li>Purchases new consumables</li> <li>Charges the subscription owner</li> <li>Sends a notification</li> <li>Respects monthly spending limits</li> </ol>"},{"location":"payments/auto-recharge/#key-features","title":"Key Features","text":""},{"location":"payments/auto-recharge/#configurable-thresholds","title":"Configurable Thresholds","text":"<ul> <li>Recharge Threshold: Balance level that triggers recharge (e.g., $10)</li> <li>Recharge Amount: How much to add when triggered (e.g., $20)</li> <li>Monthly Limit: Optional spending cap per period (e.g., $100/month)</li> </ul>"},{"location":"payments/auto-recharge/#real-time-monitoring","title":"Real-Time Monitoring","text":"<ul> <li>Monitors every consumable consumption via Django signals</li> <li>Calculates team balance in subscription currency</li> <li>Uses <code>AcademyService</code> pricing for accurate valuation</li> </ul>"},{"location":"payments/auto-recharge/#spending-control","title":"Spending Control","text":"<ul> <li>Tracks spending per monthly period (based on <code>subscription.paid_at</code>)</li> <li>Automatically resets each period</li> <li>Supports partial recharge to stay within limits</li> </ul>"},{"location":"payments/auto-recharge/#async-processing","title":"Async Processing","text":"<ul> <li>Uses Celery tasks for non-blocking operation</li> <li>Redis lock prevents concurrent recharges</li> <li>Email notifications to subscription owner</li> </ul>"},{"location":"payments/auto-recharge/#quick-start","title":"Quick Start","text":""},{"location":"payments/auto-recharge/#enable-auto-recharge","title":"Enable Auto-Recharge","text":"<p>Via API: <pre><code>PUT /v2/payments/subscription/123/billing-team\nContent-Type: application/json\n\n{\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_period_spend\": \"100.00\"\n}\n</code></pre></p> <p>Via Python: <pre><code>from breathecode.payments.models import SubscriptionBillingTeam\n\nteam = SubscriptionBillingTeam.objects.get(subscription_id=123)\nteam.auto_recharge_enabled = True\nteam.recharge_threshold_amount = 10.00  # In subscription currency\nteam.recharge_amount = 20.00\nteam.max_period_spend = 100.00  # Optional\nteam.save()\n</code></pre></p>"},{"location":"payments/auto-recharge/#check-current-status","title":"Check Current Status","text":"<pre><code>GET /v2/payments/subscription/123/billing-team\n</code></pre> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_period_spend\": \"100.00\",\n  \"current_period_spend\": 45.00,\n  \"period_start\": \"2025-01-15T00:00:00Z\",\n  \"period_end\": \"2025-02-15T00:00:00Z\",\n  \"currency\": \"USD\"\n}\n</code></pre></p>"},{"location":"payments/auto-recharge/#how-it-works","title":"How It Works","text":""},{"location":"payments/auto-recharge/#flow-diagram","title":"Flow Diagram","text":"<p>Step-by-step process:</p> <ol> <li>User consumes service</li> <li>consume_service signal emitted</li> <li>check_consumable_balance_for_auto_recharge</li> <li>Calculate team balance (in subscription currency)</li> <li>Balance &lt; threshold?</li> <li>No \u2192 End</li> <li>Yes \u2192 Continue</li> <li>Check monthly spending limit</li> <li>Within limit?</li> <li>No \u2192 Log warning, End</li> <li>Yes \u2192 Continue</li> <li>Emit consumable_balance_low signal</li> <li>trigger_auto_recharge_task</li> <li>Schedule process_auto_recharge.delay()</li> <li>Celery Task with Redis Lock<ul> <li>Create team consumables</li> <li>Track spending via invoices</li> <li>Send notification</li> </ul> </li> </ol>"},{"location":"payments/auto-recharge/#example-scenario","title":"Example Scenario","text":"<p>Initial State: <pre><code>Team Balance: $12 (in USD)\nThreshold: $10\nRecharge Amount: $20\nMonthly Limit: $100\nCurrent Period Spend: $40\n</code></pre></p> <p>User Consumes Service: <pre><code>1. User consumes 5 mentorship hours\n2. Balance: $12 \u2192 $7\n3. $7 &lt; $10 (threshold) \u2713\n4. $40 + $20 = $60 &lt; $100 (limit) \u2713\n5. Trigger auto-recharge\n</code></pre></p> <p>Recharge Process: <pre><code>1. Acquire Redis lock (prevent concurrent recharges)\n2. Create consumables worth $20\n3. Create invoice for $20\n4. Send email to owner\n5. Release lock\n</code></pre></p> <p>Final State: <pre><code>Team Balance: $27 ($7 + $20)\nCurrent Period Spend: $60 ($40 + $20)\n</code></pre></p>"},{"location":"payments/auto-recharge/#configuration","title":"Configuration","text":""},{"location":"payments/auto-recharge/#model-fields","title":"Model Fields","text":"<p>SubscriptionBillingTeam: <pre><code>auto_recharge_enabled = BooleanField(default=False)\nrecharge_threshold_amount = DecimalField(default=10.00)\nrecharge_amount = DecimalField(default=20.00)\nmax_period_spend = DecimalField(null=True, blank=True)\n</code></pre></p>"},{"location":"payments/auto-recharge/#currency-handling","title":"Currency Handling","text":"<p>All amounts are in the subscription's currency: <pre><code>subscription = team.subscription\ncurrency = subscription.currency  # e.g., Currency(code='USD')\n\n# Balance calculated using AcademyService pricing\nacademy_service = AcademyService.objects.get(\n    academy=subscription.academy,\n    service=consumable.service_item.service\n)\nbalance_amount += consumable.how_many * academy_service.price_per_unit\n</code></pre></p>"},{"location":"payments/auto-recharge/#monthly-period-calculation","title":"Monthly Period Calculation","text":"<p>Spending periods are monthly from <code>subscription.paid_at</code> day: <pre><code># Example: paid_at = Jan 15\n# Periods: Jan 15-Feb 15, Feb 15-Mar 15, Mar 15-Apr 15, etc.\n\nperiod_start, period_end = team.get_current_monthly_period_dates()\ncurrent_spend = team.get_current_period_spend()\n</code></pre></p>"},{"location":"payments/auto-recharge/#advanced-topics","title":"Advanced Topics","text":""},{"location":"payments/auto-recharge/#partial-recharge","title":"Partial Recharge","text":"<p>When recharge would exceed monthly limit, the system performs a partial recharge:</p> <pre><code>available_budget = max_period_spend - current_period_spend\nif recharge_amount &gt; available_budget:\n    # Partial recharge\n    actual_recharge = available_budget\nelse:\n    # Full recharge\n    actual_recharge = recharge_amount\n</code></pre>"},{"location":"payments/auto-recharge/#unlimited-consumables","title":"Unlimited Consumables","text":"<p>Consumables with <code>how_many=-1</code> (unlimited) don't trigger auto-recharge:</p> <pre><code>if consumable.how_many == -1:\n    balance_amount = -1  # Unlimited\n    return  # Skip auto-recharge check\n</code></pre>"},{"location":"payments/auto-recharge/#race-condition-prevention","title":"Race Condition Prevention","text":"<p>Redis lock ensures only one recharge happens at a time:</p> <pre><code>lock_key = f\"auto_recharge:team:{team_id}\"\nlock = redis_client.lock(lock_key, timeout=300)\n\nif not lock.acquire(blocking=False):\n    raise AbortTask(\"Auto-recharge already in progress\")\n\ntry:\n    # Process recharge\nfinally:\n    lock.release()\n</code></pre>"},{"location":"payments/auto-recharge/#spending-tracking","title":"Spending Tracking","text":"<p>Spending is tracked via invoices, not model fields:</p> <pre><code># Get spending from invoices (not a model field)\ndef get_current_period_spend(self) -&gt; float:\n    period_start, period_end = self.get_current_monthly_period_dates()\n\n    invoices = Invoice.objects.filter(\n        user=subscription.user,\n        status=Invoice.Status.PAID,\n        created_at__gte=period_start,\n        created_at__lt=period_end\n    )\n\n    return float(invoices.aggregate(total=Sum(\"amount\"))[\"total\"] or 0)\n</code></pre>"},{"location":"payments/auto-recharge/#troubleshooting","title":"Troubleshooting","text":""},{"location":"payments/auto-recharge/#auto-recharge-not-triggering","title":"Auto-Recharge Not Triggering","text":"<p>Check:</p> <ol> <li><code>auto_recharge_enabled = True</code></li> <li>Balance actually below threshold</li> <li>Monthly limit not exceeded</li> <li>Celery workers running</li> <li>Redis available</li> </ol> <p>Debug: <pre><code>team = SubscriptionBillingTeam.objects.get(id=123)\nprint(f\"Enabled: {team.auto_recharge_enabled}\")\nprint(f\"Balance: {team.get_team_balance()}\")\nprint(f\"Threshold: {team.recharge_threshold_amount}\")\nprint(f\"Period Spend: {team.get_current_period_spend()}\")\nprint(f\"Period Limit: {team.max_period_spend}\")\n</code></pre></p>"},{"location":"payments/auto-recharge/#monthly-limit-reached","title":"Monthly Limit Reached","text":"<p>Error: \"Billing period spending limit reached\"</p> <p>Solution:</p> <ul> <li>Wait for next billing period</li> <li>Increase <code>max_period_spend</code></li> <li>Manually add consumables</li> </ul>"},{"location":"payments/auto-recharge/#concurrent-recharge-attempts","title":"Concurrent Recharge Attempts","text":"<p>Error: \"Auto-recharge already in progress\"</p> <p>Cause: Multiple consumptions triggered recharge simultaneously</p> <p>Solution: Redis lock handles this automatically - one succeeds, others abort safely</p>"},{"location":"payments/auto-recharge/#testing","title":"Testing","text":""},{"location":"payments/auto-recharge/#unit-tests","title":"Unit Tests","text":"<pre><code>poetry run pytest breathecode/payments/tests/ --nomigrations -k auto_recharge\n</code></pre>"},{"location":"payments/auto-recharge/#manual-testing","title":"Manual Testing","text":"<pre><code># 1. Enable auto-recharge\nteam.auto_recharge_enabled = True\nteam.recharge_threshold_amount = 10.00\nteam.save()\n\n# 2. Consume services until balance &lt; threshold\n# 3. Check Celery logs for task execution\n# 4. Verify new consumables created\n# 5. Check invoice created\n</code></pre>"},{"location":"payments/auto-recharge/#related-documentation","title":"Related Documentation","text":"<ul> <li>Subscription Seats Guide - Overview of team features</li> <li>API Documentation - API endpoints</li> <li>Architecture Diagrams - Detailed diagrams</li> </ul>"},{"location":"payments/auto-recharge/#migration-notes","title":"Migration Notes","text":""},{"location":"payments/auto-recharge/#from-old-field-names","title":"From Old Field Names","text":"<p>If migrating from older versions:</p> <pre><code># Old (deprecated)\nrecharge_threshold_dollars \u2192 recharge_threshold_amount\nrecharge_amount_dollars \u2192 recharge_amount\nmax_monthly_spend_dollars \u2192 max_period_spend\ncurrent_month_spend_dollars \u2192 (removed, calculated from invoices)\nlast_recharge_reset_at \u2192 (removed, not needed)\n</code></pre>"},{"location":"payments/auto-recharge/#database-migration","title":"Database Migration","text":"<pre><code>poetry run python manage.py makemigrations payments\npoetry run python manage.py migrate payments\n</code></pre>"},{"location":"payments/auto-recharge/#security-considerations","title":"Security Considerations","text":"<ol> <li>Owner-Only Access: Only subscription owner can modify auto-recharge settings</li> <li>Spending Limits: Mandatory for production to prevent abuse</li> <li>Redis Lock: Prevents race conditions and double-charging</li> <li>Invoice Tracking: All recharges create invoices for audit trail</li> <li>Validation: Amount limits enforced at serializer level</li> </ol>"},{"location":"payments/auto-recharge/#performance-notes","title":"Performance Notes","text":"<ul> <li>Signal receivers are lightweight (quick balance check)</li> <li>Heavy processing done in Celery task (async)</li> <li>Redis lock timeout: 5 minutes max</li> <li>Balance calculation optimized with <code>select_related()</code></li> </ul>"},{"location":"payments/subscription-seats-api/","title":"API Documentation &amp; Postman Collection","text":""},{"location":"payments/subscription-seats-api/#overview","title":"Overview","text":"<p>This directory contains comprehensive API documentation for the 4Geeks Subscription &amp; Seats API in two formats: - OpenAPI 3.0 Specification (<code>openapi.yaml</code>) - Postman Collection (<code>postman_collection.json</code>)</p>"},{"location":"payments/subscription-seats-api/#files","title":"Files","text":""},{"location":"payments/subscription-seats-api/#1-openapiyaml","title":"1. openapi.yaml","text":"<p>OpenAPI 3.0 specification that can be imported into: - Postman - Swagger UI - Insomnia - Any OpenAPI-compatible tool</p>"},{"location":"payments/subscription-seats-api/#2-postman_collectionjson","title":"2. postman_collection.json","text":"<p>Ready-to-use Postman collection with: - Pre-configured requests - Environment variables - Test scripts - Request examples</p>"},{"location":"payments/subscription-seats-api/#import-to-postman","title":"Import to Postman","text":""},{"location":"payments/subscription-seats-api/#method-1-import-openapi-file","title":"Method 1: Import OpenAPI File","text":"<ol> <li>Open Postman</li> <li>Click Import button (top left)</li> <li>Select File tab</li> <li>Choose <code>openapi.yaml</code></li> <li>Click Import</li> </ol>"},{"location":"payments/subscription-seats-api/#method-2-import-postman-collection","title":"Method 2: Import Postman Collection","text":"<ol> <li>Open Postman</li> <li>Click Import button (top left)</li> <li>Select File tab</li> <li>Choose <code>postman_collection.json</code></li> <li>Click Import</li> </ol>"},{"location":"payments/subscription-seats-api/#setup-environment-variables","title":"Setup Environment Variables","text":"<p>After importing, set up your environment:</p> <ol> <li>Click Environments (left sidebar)</li> <li>Create new environment: 4Geeks API</li> <li>Add variables:</li> </ol> Variable Description Example <code>base_url</code> API base URL <code>https://breathecode.herokuapp.com</code> <code>user_token_1</code> Owner token <code>eyJhbGc...</code> <code>user_token_2</code> Second user token <code>eyJhbGc...</code> <code>academy_id</code> Academy ID <code>1</code> <code>academy_slug</code> Academy slug <code>4geeks</code> <code>plan_slug</code> Plan slug <code>4geeks-premium</code> <code>subscription_id</code> Subscription ID (auto-set) <code>123</code> <code>bag_token</code> Bag token (auto-set) <code>bag_abc123</code>"},{"location":"payments/subscription-seats-api/#getting-tokens","title":"Getting Tokens","text":"<p>Set environment variables before running fttest:</p> <pre><code>export FTT_API_URL=\"https://breathecode.herokuapp.com\"\nexport FTT_USER_TOKEN1=\"your_token_here\"\nexport FTT_USER_TOKEN2=\"second_user_token\"\nexport FTT_ACADEMY=\"1\"\nexport FTT_ACADEMY_SLUG=\"4geeks\"\n</code></pre>"},{"location":"payments/subscription-seats-api/#api-flows","title":"API Flows","text":""},{"location":"payments/subscription-seats-api/#flow-1-pay-per_seat-plan","title":"Flow 1: Pay PER_SEAT Plan","text":"<pre><code>1. Get Plan Details\n   GET /v1/payments/plan/{plan_slug}\n\n2. Preview Plan with Seats\n   POST /v1/payments/checking\n   Body: {\"type\": \"PREVIEW\", \"plans\": [1], \"team_seats\": 3}\n\n3. Create Bag\n   POST /v1/payments/checking\n   Body: {\"type\": \"BAG\", \"plans\": [1], \"team_seats\": 3}\n   \u2192 Saves bag_token\n\n4. Add Payment Card\n   PUT /v1/payments/card\n   Body: {\"card_number\": \"4242...\", \"cvc\": \"123\", ...}\n\n5. Pay Plan\n   POST /v1/payments/pay\n   Body: {\"token\": \"{{bag_token}}\", \"chosen_period\": \"MONTH\"}\n\n6. Get My Subscriptions\n   GET /v1/payments/me/subscription\n   \u2192 Note subscription_id\n\n7. Get My Consumables\n   GET /v1/provisioning/me/consumables\n</code></pre>"},{"location":"payments/subscription-seats-api/#flow-2-manage-seats","title":"Flow 2: Manage Seats","text":"<pre><code>1. Get Seats\n   GET /v2/payments/subscription/{subscription_id}/billing-team/seat\n\n2. Add Seat\n   PUT /v2/payments/subscription/{subscription_id}/billing-team/seat\n   Body: {\"add_seats\": [{\"email\": \"...\"}]}\n\n3. Replace Seat\n   PUT /v2/payments/subscription/{subscription_id}/billing-team/seat\n   Body: {\"replace_seats\": [{\"from_email\": \"...\", \"to_email\": \"...\"}]}\n\n4. Delete Seat\n   DELETE /v2/payments/subscription/{subscription_id}/billing-team/seat/{seat_id}\n### Flow 3: Consumable Checkout\n\n1. Get My Subscriptions\n   GET /v1/payments/me/subscription\n\n2. Consumable Checkout (Add Seats)\n   POST /v2/payments/consumable/checkout\n   Body: {\"service\": \"seat-service\", \"how_many\": 3, \"subscription\": 123}\n\n3. Get Billing Team\n   GET /v2/payments/subscription/{subscription_id}/billing-team\n\n4. Get Seats\n   GET /v2/payments/subscription/{subscription_id}/billing-team/seat\n\n**Response**: 200 OK\n```json\n{\n  \"id\": 1,\n  \"subscription\": 123,\n  \"seats_limit\": 3,\n  \"consumption_strategy\": \"PER_SEAT\"\n}\n</code></pre>"},{"location":"payments/subscription-seats-api/#flow-3-consumable-checkout","title":"Flow 3: Consumable Checkout","text":"<ol> <li> <p>Get My Subscriptions    GET /v1/payments/me/subscription</p> </li> <li> <p>Consumable Checkout (Add Seats)    POST /v2/payments/consumable/checkout    Body: {\"service\": \"seat-service\", \"how_many\": 3, \"subscription\": 123}</p> </li> <li> <p>Get Billing Team    GET /v2/payments/subscription/{subscription_id}/billing-team</p> </li> <li> <p>Get Seats    GET /v2/payments/subscription/{subscription_id}/billing-team/seat</p> </li> </ol> <p>Response: 200 OK</p> <pre><code>POST /v1/payments/checking\nAuthorization: Bearer {{user_token_1}}\nContent-Type: application/json\n\n{\n  \"type\": \"PREVIEW\",\n  \"plans\": [1],\n  \"team_seats\": 3\n}\n</code></pre> <p>Response: <pre><code>{\n  \"amount\": 149.00,\n  \"seat_service_item\": {\n    \"id\": 10,\n    \"how_many\": 3\n  }\n}\n</code></pre></p>"},{"location":"payments/subscription-seats-api/#add-seat","title":"Add Seat","text":"<pre><code>PUT /v2/payments/subscription/123/billing-team/seat\nAuthorization: Bearer {{user_token_1}}\nContent-Type: application/json\n\n{\n  \"add_seats\": [\n    {\n      \"email\": \"lord@valomero.com\",\n      \"first_name\": \"Lord\",\n      \"last_name\": \"Valomero\"\n    }\n  ]\n}\n</code></pre> <p>Response: <pre><code>[\n  {\n    \"id\": 1,\n    \"user\": 456,\n    \"email\": \"owner@example.com\",\n    \"is_active\": true\n  },\n  {\n    \"id\": 2,\n    \"user\": null,\n    \"email\": \"lord@valomero.com\",\n    \"is_active\": true\n  }\n]\n</code></pre></p>"},{"location":"payments/subscription-seats-api/#enable-auto-recharge","title":"Enable Auto-Recharge","text":"<pre><code>PATCH /v2/payments/subscription/123/billing-team\nAuthorization: Bearer {{user_token_1}}\nContent-Type: application/json\n\n{\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_monthly_spend\": \"100.00\"\n}\n</code></pre> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"subscription\": 123,\n  \"name\": \"Team 123\",\n  \"seats_limit\": 3,\n  \"consumption_strategy\": \"PER_TEAM\",\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_monthly_spend\": \"100.00\",\n  \"current_month_spend\": \"0.00\",\n  \"last_recharge_reset_at\": null\n}\n</code></pre></p>"},{"location":"payments/subscription-seats-api/#testing-with-postman","title":"Testing with Postman","text":""},{"location":"payments/subscription-seats-api/#1-run-complete-flow","title":"1. Run Complete Flow","text":"<ol> <li>Set environment variables</li> <li>Run requests in order from 2. Payment Flow folder</li> <li>Check responses and auto-set variables</li> <li>Continue with 4. Seat Management</li> </ol>"},{"location":"payments/subscription-seats-api/#2-test-auto-recharge","title":"2. Test Auto-Recharge","text":"<ol> <li>Complete payment flow</li> <li>Enable auto-recharge via 3. Billing Team &amp; Auto-Recharge</li> <li>Consume services via 6. Assets</li> <li>Check consumables via 5. Consumables</li> </ol>"},{"location":"payments/subscription-seats-api/#3-test-per_seat-vs-per_team","title":"3. Test PER_SEAT vs PER_TEAM","text":"<p>PER_SEAT: - Use plan: <code>4geeks-premium</code> - Consumables have <code>subscription_seat</code> set - Each seat holder gets isolated consumables</p> <p>PER_TEAM: - Use plan: <code>hack-30-machines-in-30-days</code> - Consumables have <code>user: null</code>, <code>subscription_billing_team</code> set - All team members share consumables</p>"},{"location":"payments/subscription-seats-api/#postman-scripts","title":"Postman Scripts","text":"<p>The collection includes test scripts that automatically:</p>"},{"location":"payments/subscription-seats-api/#extract-bag-token","title":"Extract Bag Token","text":"<pre><code>const response = pm.response.json();\npm.collectionVariables.set('bag_token', response.token);\n</code></pre>"},{"location":"payments/subscription-seats-api/#extract-subscription-id","title":"Extract Subscription ID","text":"<pre><code>const response = pm.response.json();\nif (response.subscriptions &amp;&amp; response.subscriptions.length &gt; 0) {\n  pm.collectionVariables.set('subscription_id', response.subscriptions[0].id);\n}\n</code></pre>"},{"location":"payments/subscription-seats-api/#swagger-ui","title":"Swagger UI","text":"<p>To view the API in Swagger UI:</p> <ol> <li>Go to https://editor.swagger.io/</li> <li>Click File \u2192 Import file</li> <li>Select <code>openapi.yaml</code></li> <li>Explore endpoints with interactive documentation</li> </ol>"},{"location":"payments/subscription-seats-api/#insomnia","title":"Insomnia","text":"<p>To import into Insomnia:</p> <ol> <li>Open Insomnia</li> <li>Click Create \u2192 Import From \u2192 File</li> <li>Select <code>openapi.yaml</code></li> <li>Configure environment variables</li> </ol>"},{"location":"payments/subscription-seats-api/#curl-examples","title":"cURL Examples","text":""},{"location":"payments/subscription-seats-api/#get-plan","title":"Get Plan","text":"<pre><code>curl -X GET \"https://breathecode.herokuapp.com/v1/payments/plan/4geeks-premium\" \\\n  -H \"Authorization: Bearer $FTT_USER_TOKEN1\"\n</code></pre>"},{"location":"payments/subscription-seats-api/#preview-plan","title":"Preview Plan","text":"<pre><code>curl -X POST \"https://breathecode.herokuapp.com/v1/payments/checking\" \\\n  -H \"Authorization: Bearer $FTT_USER_TOKEN1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\":\"PREVIEW\",\"plans\":[1],\"team_seats\":3}'\n</code></pre>"},{"location":"payments/subscription-seats-api/#add-seat_1","title":"Add Seat","text":"<pre><code>curl -X PUT \"https://breathecode.herokuapp.com/v2/payments/subscription/123/billing-team/seat\" \\\n  -H \"Authorization: Bearer $FTT_USER_TOKEN1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"add_seats\":[{\"email\":\"lord@valomero.com\"}]}'\n</code></pre>"},{"location":"payments/subscription-seats-api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"payments/subscription-seats-api/#401-unauthorized","title":"401 Unauthorized","text":"<ul> <li>Check token is valid</li> <li>Ensure <code>Authorization: Bearer &lt;token&gt;</code> header is set</li> <li>Verify token hasn't expired</li> </ul>"},{"location":"payments/subscription-seats-api/#404-not-found","title":"404 Not Found","text":"<ul> <li>Check <code>subscription_id</code> is set correctly</li> <li>Verify plan slug exists</li> <li>Ensure academy ID is correct</li> </ul>"},{"location":"payments/subscription-seats-api/#400-bad-request","title":"400 Bad Request","text":"<ul> <li>Validate request body matches schema</li> <li>Check required fields are present</li> <li>Verify data types (integers, strings, etc.)</li> </ul>"},{"location":"payments/subscription-seats-api/#subscription-not-created","title":"Subscription Not Created","text":"<ul> <li>Wait 10-30 seconds after payment</li> <li>Check Celery workers are running</li> <li>Poll <code>/v1/payments/me/subscription</code> endpoint</li> </ul>"},{"location":"payments/subscription-seats-api/#related-documentation","title":"Related Documentation","text":"<ul> <li>README_pay_per_seat.md: PER_SEAT flow details</li> <li>README_pay_per_team.md: PER_TEAM flow details</li> <li>README_consumable_checkout_per_seat.md: Consumable checkout (PER_SEAT)</li> <li>README_consumable_checkout_per_team.md: Consumable checkout (PER_TEAM)</li> <li>AUTO_RECHARGE_IMPLEMENTATION.md: Auto-recharge system</li> </ul>"},{"location":"payments/subscription-seats-api/#support","title":"Support","text":"<p>For issues or questions: - Check README files for detailed flow documentation - Review OpenAPI schema for request/response formats - Run functional tests: <code>poetry run python3 -m scripts.fttests subscription_seats:&lt;test_name&gt;</code></p>"},{"location":"payments/subscription-seats-guide/","title":"Subscription Seats - Quick Start Guide","text":"<p>This guide explains how subscription seats work in simple terms.</p>"},{"location":"payments/subscription-seats-guide/#what-are-subscription-seats","title":"What Are Subscription Seats?","text":"<p>Subscription seats allow a team owner to share their subscription with other users. Think of it like buying a Netflix family plan - one person pays, but multiple people can use it.</p>"},{"location":"payments/subscription-seats-guide/#key-concepts","title":"Key Concepts","text":"<ul> <li>Subscription Owner: The person who pays for the subscription</li> <li>Billing Team: A group of users who share the subscription</li> <li>Seat: Access granted to one team member</li> <li>Auto-Recharge: Automatic top-up when balance runs low (both strategies)</li> <li>Consumption Strategy: How consumables are distributed (PER_TEAM or PER_SEAT)</li> <li>is_team_allowed: Service flag that determines who gets consumables:</li> <li><code>False</code> = Owner only (personal consumables)</li> <li><code>True</code> = Team/Seats (shared or per-seat consumables)</li> </ul>"},{"location":"payments/subscription-seats-guide/#consumption-strategies","title":"Consumption Strategies","text":""},{"location":"payments/subscription-seats-guide/#per_team-shared-pool","title":"PER_TEAM (Shared Pool) \ud83e\udd1d","text":"<p>Team members share a common pool of consumables.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Subscription Owner (Pays)                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u251c\u2500 Owner Consumables (is_team_allowed=False)\n               \u2502  \u251c\u2500 10 personal mentorship hours\n               \u2502  \u2514\u2500 5 personal event tickets\n               \u2502\n               \u2514\u2500 Billing Team\n                  \u251c\u2500 Team Consumables (is_team_allowed=True, SHARED)\n                  \u2502  \u251c\u2500 100 mentorship hours\n                  \u2502  \u2514\u2500 50 event tickets\n                  \u2502\n                  \u2514\u2500 Team Members\n                     \u251c\u2500 Member A (uses from shared pool)\n                     \u251c\u2500 Member B (uses from shared pool)\n                     \u2514\u2500 Member C (uses from shared pool)\n</code></pre> <p>Best for: - Small teams (3-10 people) - Flexible usage patterns - Collaborative environments - Startups and agencies</p> <p>How consumables are allocated: - Services with <code>is_team_allowed=False</code> \u2192 Owner gets personal consumables - Services with <code>is_team_allowed=True</code> \u2192 Team gets shared pool</p> <p>Example: <pre><code>Owner: 10 personal hours (is_team_allowed=False)\nTeam Pool: 100 shared hours (is_team_allowed=True)\n\nDay 1: Team pool has 100 hours\n- Member A uses 30 hours \u2192 70 left\n- Member B uses 40 hours \u2192 30 left\n- Balance low \u2192 Auto-recharge adds 50 \u2192 80 left\n\nOwner's 10 personal hours remain untouched\n</code></pre></p>"},{"location":"payments/subscription-seats-guide/#per_seat-individual-allocation","title":"PER_SEAT (Individual Allocation) \ud83d\udc64","text":"<p>Each team member gets their own allocation of consumables.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Subscription Owner (Pays)                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n               \u2502\n               \u251c\u2500 Owner Consumables (is_team_allowed=False)\n               \u2502  \u251c\u2500 10 personal mentorship hours\n               \u2502  \u2514\u2500 5 personal event tickets\n               \u2502\n               \u2514\u2500 Billing Team\n                  \u251c\u2500 Seat 1 (Member A)\n                  \u2502  \u2514\u2500 Consumables (is_team_allowed=True, individual)\n                  \u2502     \u251c\u2500 10 hours\n                  \u2502     \u2514\u2500 5 tickets\n                  \u2502\n                  \u251c\u2500 Seat 2 (Member B)\n                  \u2502  \u2514\u2500 Consumables (is_team_allowed=True, individual)\n                  \u2502     \u251c\u2500 10 hours\n                  \u2502     \u2514\u2500 5 tickets\n                  \u2502\n                  \u2514\u2500 Seat 3 (Member C, 2x multiplier)\n                     \u2514\u2500 Consumables (is_team_allowed=True, individual)\n                        \u251c\u2500 20 hours (2x)\n                        \u2514\u2500 10 tickets (2x)\n</code></pre> <p>Best for: - Large teams (10+ people) - Fair distribution required - Enterprise environments - Predictable usage per person</p> <p>How consumables are allocated: - Services with <code>is_team_allowed=False</code> \u2192 Owner gets personal consumables - Services with <code>is_team_allowed=True</code> \u2192 Each seat gets individual consumables</p> <p>Example: <pre><code>Owner: 10 personal hours (is_team_allowed=False)\n\nMember A (1x seat): Gets 10 hours (is_team_allowed=True)\n- Uses 8 hours \u2192 2 hours left\n- Cannot use other members' hours\n\nMember C (2x seat): Gets 20 hours (is_team_allowed=True, 2x multiplier)\n- Uses 15 hours \u2192 5 hours left\n- Cannot share with others\n\nOwner's 10 personal hours remain separate\n</code></pre></p>"},{"location":"payments/subscription-seats-guide/#comparison-table","title":"Comparison Table","text":"Feature PER_TEAM \ud83e\udd1d PER_SEAT \ud83d\udc64 Owner Consumables <code>is_team_allowed=False</code> (personal) <code>is_team_allowed=False</code> (personal) Team Consumables <code>is_team_allowed=True</code> (shared pool) <code>is_team_allowed=True</code> (per seat) Flexibility High Low Recharge Manual or Auto (team) Manual or Auto (per seat) Auto-Recharge \u2705 Team level \u2705 Per seat level Seat Multiplier Not used Determines allocation Best For Small teams Large teams Example 5-person startup 50-person company"},{"location":"payments/subscription-seats-guide/#basic-workflow","title":"Basic Workflow","text":""},{"location":"payments/subscription-seats-guide/#1-create-a-subscription","title":"1. Create a Subscription","text":"<p>First, the owner creates a subscription with a plan that supports teams.</p> <pre><code>POST /v1/payments/checking\n{\n  \"type\": \"PREVIEW\",\n  \"plans\": [1],\n  \"team_seats\": 3\n}\n</code></pre>"},{"location":"payments/subscription-seats-guide/#2-get-billing-team-info","title":"2. Get Billing Team Info","text":"<p>Check the team configuration:</p> <pre><code>GET /v2/payments/subscription/123/billing-team\n</code></pre> <p>Response: <pre><code>{\n  \"id\": 1,\n  \"subscription\": 123,\n  \"name\": \"Team 123\",\n  \"seats_limit\": 3,\n  \"seats_count\": 2,\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_period_spend\": \"100.00\",\n  \"current_period_spend\": 45.00,\n  \"currency\": \"USD\"\n}\n</code></pre></p>"},{"location":"payments/subscription-seats-guide/#3-add-team-members","title":"3. Add Team Members","text":"<p>Add users to the team:</p> <pre><code>PUT /v2/payments/subscription/123/billing-team/seat\n{\n  \"add_seats\": [\n    {\n      \"email\": \"member@example.com\",\n    }\n  ]\n}\n</code></pre>"},{"location":"payments/subscription-seats-guide/#4-team-members-use-services","title":"4. Team Members Use Services","text":"<p>When team members consume services (mentorship, events), it's deducted from the shared team balance.</p>"},{"location":"payments/subscription-seats-guide/#auto-recharge-feature","title":"Auto-Recharge Feature","text":"<p>Auto-recharge automatically tops up the team balance when it runs low.</p>"},{"location":"payments/subscription-seats-guide/#how-it-works","title":"How It Works","text":"<ol> <li>Threshold: When balance falls below $10 (configurable)</li> <li>Recharge: Automatically add $20 (configurable)</li> <li>Limit: Maximum $100 per month (configurable)</li> </ol>"},{"location":"payments/subscription-seats-guide/#configure-auto-recharge","title":"Configure Auto-Recharge","text":"<pre><code>PUT /v2/payments/subscription/123/billing-team\n{\n  \"auto_recharge_enabled\": true,\n  \"recharge_threshold_amount\": \"10.00\",\n  \"recharge_amount\": \"20.00\",\n  \"max_period_spend\": \"100.00\"\n}\n</code></pre>"},{"location":"payments/subscription-seats-guide/#example-scenario","title":"Example Scenario","text":"<pre><code>Day 1:  Balance = $50\nDay 5:  Team uses $42 \u2192 Balance = $8 (below $10 threshold)\n        \u2192 Auto-recharge triggers\n        \u2192 Add $20\n        \u2192 New balance = $28\nDay 10: Team uses $15 \u2192 Balance = $13\n        (Above threshold, no recharge)\n</code></pre>"},{"location":"payments/subscription-seats-guide/#common-operations","title":"Common Operations","text":""},{"location":"payments/subscription-seats-guide/#view-all-seats","title":"View All Seats","text":"<pre><code>GET /v2/payments/subscription/123/billing-team/seat\n</code></pre>"},{"location":"payments/subscription-seats-guide/#remove-a-seat","title":"Remove a Seat","text":"<pre><code>DELETE /v2/payments/subscription/123/billing-team/seat/456\n</code></pre>"},{"location":"payments/subscription-seats-guide/#replace-a-seat","title":"Replace a Seat","text":"<p>Transfer a seat from one user to another:</p> <pre><code>PUT /v2/payments/subscription/123/billing-team/seat\n{\n  \"replace_seats\": [\n    {\n      \"from_email\": \"old@example.com\",\n      \"to_email\": \"new@example.com\"\n    }\n  ]\n}\n</code></pre>"},{"location":"payments/subscription-seats-guide/#important-notes","title":"Important Notes","text":""},{"location":"payments/subscription-seats-guide/#permissions","title":"Permissions","text":"<ul> <li>Only the subscription owner can manage seats</li> <li>Team members can only consume services</li> </ul>"},{"location":"payments/subscription-seats-guide/#billing","title":"Billing","text":"<ul> <li>Owner pays for all team consumption</li> <li>Charges appear on owner's invoice</li> <li>Monthly spending limits protect from overspending</li> </ul>"},{"location":"payments/subscription-seats-guide/#consumption","title":"Consumption","text":"<ul> <li>Team shares a common balance</li> <li>Each member can consume based on their seat multiplier</li> <li>Unlimited consumables (how_many = -1) don't trigger auto-recharge</li> </ul>"},{"location":"payments/subscription-seats-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"payments/subscription-seats-guide/#only-the-owner-can-manage-team","title":"\"Only the owner can manage team\"","text":"<p>Problem: You're not the subscription owner.</p> <p>Solution: Only the person who created the subscription can add/remove seats.</p>"},{"location":"payments/subscription-seats-guide/#billing-period-limit-reached","title":"\"Billing period limit reached\"","text":"<p>Problem: Team hit the monthly spending limit.</p> <p>Solution: Wait for next billing period or increase <code>max_period_spend</code>.</p>"},{"location":"payments/subscription-seats-guide/#no-budget-available-for-recharge","title":"\"No budget available for recharge\"","text":"<p>Problem: Auto-recharge would exceed monthly limit.</p> <p>Solution: Increase <code>max_period_spend</code> or wait for next billing period.</p>"},{"location":"payments/subscription-seats-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Full API Documentation</li> <li>OpenAPI Specification</li> <li>Postman Collection</li> </ul>"},{"location":"payments/subscription-seats-guide/#testing-development","title":"Testing &amp; Development","text":""},{"location":"payments/subscription-seats-guide/#import-postman-collection","title":"Import Postman Collection","text":"<p>File Location: <code>openapi/subscription-seats/postman_collection.json</code></p> <p>Steps: 1. Open Postman 2. Click \"Import\" button 3. Select file: <code>openapi/subscription-seats/postman_collection.json</code> 4. Set environment variables:    - <code>base_url</code>: <code>https://breathecode.herokuapp.com</code> (or your local URL)    - <code>user_token_1</code>: Your authentication token    - <code>user_token_2</code>: Second user token (for testing)</p>"},{"location":"payments/subscription-seats-guide/#use-openapi-spec","title":"Use OpenAPI Spec","text":"<p>File Location: <code>openapi/subscription-seats/openapi.yaml</code></p> <p>View in Swagger Editor: 1. Go to editor.swagger.io 2. File \u2192 Import File 3. Select: <code>openapi/subscription-seats/openapi.yaml</code></p> <p>Generate API Client: <pre><code># Python client\nopenapi-generator-cli generate \\\n  -i openapi/subscription-seats/openapi.yaml \\\n  -g python \\\n  -o client/python/\n\n# TypeScript client\nopenapi-generator-cli generate \\\n  -i openapi/subscription-seats/openapi.yaml \\\n  -g typescript-axios \\\n  -o client/typescript/\n</code></pre></p>"},{"location":"payments/subscription-seats-guide/#need-help","title":"Need Help?","text":"<ul> <li>Check the API Reference for detailed endpoint documentation</li> <li>Review the OpenAPI spec for request/response schemas</li> <li>Import the Postman collection to test endpoints</li> <li>See Payments Overview for architecture comparison</li> </ul>"},{"location":"program-manager/blocking-users/","title":"Blocking Users","text":""},{"location":"program-manager/blocking-users/#blocking-users-from-mentorship-services","title":"Blocking Users from Mentorship Services","text":"<p>This document explains how program managers can block users from accessing mentorship services in different scenarios.</p>"},{"location":"program-manager/blocking-users/#overview","title":"Overview","text":"<p>The system allows blocking users from specific services based on different scopes. The blocking configuration uses service identifiers (like <code>\"mentorship-service\"</code>) to determine which service the blocks apply to. When a user is related to any of the blocking scopes for a service, they will be blocked from accessing that service.</p> <p>The blocking scopes are:</p> <ol> <li>Block from everywhere (platform-wide for the service)</li> <li>Block from specific academy (when user is in that academy)</li> <li>Block from specific cohort (when user is in that cohort)</li> <li>Block from specific mentorship service (when user tries to access that specific service)</li> </ol>"},{"location":"program-manager/blocking-users/#configuration","title":"Configuration","text":"<p>The blocking configuration is managed in the <code>breathecode/payments/flags.py</code> file through the <code>blocked_user_ids</code> dictionary.</p>"},{"location":"program-manager/blocking-users/#structure","title":"Structure","text":"<pre><code>blocked_user_ids = {\n    \"mentorship-service\": {  # Service identifier\n        # Users blocked from this service across the entire platform\n        \"from_everywhere\": [],\n        # Users blocked from this service when in specific academies\n        \"from_academy\": [],\n        # Users blocked from this service when in specific cohorts\n        \"from_cohort\": [],\n        # Users blocked from specific instances of this service\n        \"from_mentorship_service\": []\n    }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#how-to-block-users","title":"How to Block Users","text":""},{"location":"program-manager/blocking-users/#1-block-user-platform-wide","title":"1. Block User Platform-wide","text":"<p>To block a user from accessing a specific service type across the entire platform:</p> <ol> <li>Add the user's ID to the <code>from_everywhere</code> list under the appropriate service identifier:</li> </ol> <pre><code>blocked_user_ids = {\n    \"mentorship-service\": {  # Service to block\n        \"from_everywhere\": [123],  # User ID will be blocked from all mentorship services\n        ...\n    }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#2-block-user-from-service-in-specific-academy","title":"2. Block User from Service in Specific Academy","text":"<p>To block a user from accessing a service type when they are in a specific academy:</p> <ol> <li>Add a tuple containing the user's ID and academy slug to the <code>from_academy</code> list:</li> </ol> <pre><code>blocked_user_ids = {\n    \"mentorship-service\": {  # Service to block\n        \"from_academy\": [(123, \"downtown-miami\")],  # User 123 can't access mentorship services in downtown-miami academy\n        ...\n    }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#3-block-user-from-service-in-specific-cohort","title":"3. Block User from Service in Specific Cohort","text":"<p>To block a user from accessing a service type when they are in a specific cohort:</p> <ol> <li>Add a tuple containing the user's ID and cohort slug to the <code>from_cohort</code> list:</li> </ol> <pre><code>blocked_user_ids = {\n    \"mentorship-service\": {  # Service to block\n        \"from_cohort\": [(123, \"4geeks-fs-1\")],  # User 123 can't access mentorship services in 4geeks-fs-1 cohort\n        ...\n    }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#4-block-user-from-specific-service-instance","title":"4. Block User from Specific Service Instance","text":"<p>To block a user from accessing a specific instance of a service:</p> <ol> <li>Add a tuple containing the user's ID and service slug to the <code>from_mentorship_service</code> list:</li> </ol> <pre><code>blocked_user_ids = {\n    \"mentorship-service\": {  # Service type\n        \"from_mentorship_service\": [(123, \"geekpal-1-1\")],  # User 123 can't access the geekpal-1-1 service specifically\n        ...\n    }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#checking-block-status","title":"Checking Block Status","text":"<p>Users can check their block status for different services by making a GET request to the <code>/v1/payments/me/service/blocked</code> endpoint. The response will indicate if they are blocked and from where:</p> <pre><code>{\n  \"mentorship-service\": {\n    // Service identifier\n    \"from_everywhere\": 1, // Not blocked platform-wide\n    \"from_academy\": [(1, \"academy-slug\")], // Blocked in these academies\n    \"from_cohort\": [(1, \"cohort-slug\")], // Blocked in these cohorts\n    \"from_mentorship_service\": [(1, \"service-slug\")] // Blocked from these specific services\n  }\n}\n</code></pre>"},{"location":"program-manager/blocking-users/#important-notes","title":"Important Notes","text":"<ol> <li>Blocking is enforced through the <code>payments.can_access</code> feature flag.</li> <li>When a user is blocked, they will receive a 403 error with the message \"You have been blocked from accessing this mentorship service\".</li> <li>Blocks are evaluated based on the user's relationships:</li> <li>If they are in a blocked academy</li> <li>If they are in a blocked cohort</li> <li>If they try to access a specifically blocked service</li> <li>If they are blocked platform-wide</li> <li>Program managers should keep track of blocked users and review blocks periodically.</li> <li>Changes to the blocking configuration require a deployment to take effect.</li> </ol>"},{"location":"program-manager/blocking-users/#best-practices","title":"Best Practices","text":"<ol> <li>Document the reason for blocking each user</li> <li>Use the most specific blocking scope appropriate for the situation</li> <li>Regularly review blocked users to ensure blocks are still necessary</li> <li>Maintain a separate list of blocked users and reasons outside the code</li> <li>Consider implementing a temporary blocking mechanism for short-term blocks</li> </ol>"},{"location":"security/authentication-class/","title":"Authentication classes","text":""},{"location":"security/authentication-class/#expiringtokenauthentication","title":"<code>ExpiringTokenAuthentication</code>","text":"<p>it's the default authentication class implemented in 4Geeks.</p> <p>ExpiringTokenAuthentication is integral to the security of our Django web application. Its main purpose is to handle user authentication, i.e., verifying that a user is who they claim to be.</p> <pre><code>GET /v1/resource/path HTTP/1.1\nHost: www.example.com\nAuthorization: Token your_token_here\n</code></pre> <p>The ExpiringTokenAuthentication class within it provides a specific type of token-based authentication. Unlike simple token-based authentication where tokens remain valid indefinitely, this class ensures that tokens expire after a certain period (24 hours in this case). This means that even if an attacker manages to get hold of a token, they can only use it for a limited time.</p> <p>Upon receiving a request, the system checks the provided token, confirms it's valid and hasn't expired, and identifies the user associated with the token. If any of these checks fail, an AuthenticationFailed exception is raised, denying access.</p> <pre><code>POST /v1/auth/login HTTP/1.1\nHost: www.example.com\nContent-Type: application/json\n\n{\n  \"username\": \"john.doe\",\n  \"password\": \"supersecretpassword\"\n}\n</code></pre>"},{"location":"security/capabilities/","title":"Capabilities","text":"<p>Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing.</p> <pre><code>ExpiringTokenAuthentication -&gt; @capable_of -&gt; view\n</code></pre> <p>Authenticated methods must be decorated with the <code>@capable_of</code> decorator in increase security validation. For example:</p> <pre><code>    from breathecode.utils import capable_of\n\n    @capable_of('crud_member')\n    def post(self, request, academy_id=None):\n        serializer = StaffPOSTSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre> <p>Any view decorated with the @capable_of must be used passing an academy id either:</p> <ol> <li>Anywhere on the endpoint url, E.g: <code>path('academy/&lt;int:academy_id&gt;/member', MemberView.as_view()),</code></li> <li>Or on the request header using the <code>Academy</code> header.</li> </ol>"},{"location":"security/capabilities/#available-capabilities","title":"Available capabilities:","text":"<p>This list is alive, it will grow and vary over time:</p> <pre><code>CAPABILITIES = [\n    {\n        'slug': 'read_my_academy',\n        'description': 'Read your academy information'\n    },\n    {\n        'slug': 'crud_my_academy',\n        'description': 'Read, or update your academy information (very high level, almost the academy admin)'\n    },\n    {\n        'slug': 'crud_member',\n        'description': 'Create, update or delete academy members (very high level, almost the academy admin)'\n    },\n    {\n        'slug': 'read_member',\n        'description': 'Read academy staff member information'\n    },\n    {\n        'slug': 'crud_student',\n        'description': 'Create, update or delete students'\n    },\n    {\n        'slug': 'read_student',\n        'description': 'Read student information'\n    },\n    {\n        'slug': 'read_invite',\n        'description': 'Read invites from users'\n    },\n    {\n        'slug': 'crud_invite',\n        'description': 'Create, update or delete invites from users'\n    },\n    {\n        'slug': 'invite_resend',\n        'description': 'Resent invites for user academies'\n    },\n    {\n        'slug': 'read_assignment',\n        'description': 'Read assignment information'\n    },\n    {\n        'slug':\n        'read_assignment_sensitive_details',\n        'description':\n        'The mentor in residence is allowed to see aditional info about the task, like the \"delivery url\"'\n    },\n    {\n        'slug': 'read_shortlink',\n        'description': 'Access the list of marketing shortlinks'\n    },\n    {\n        'slug': 'crud_shortlink',\n        'description': 'Create, update and delete marketing short links'\n    },\n    {\n        'slug': 'crud_assignment',\n        'description': 'Update assignments'\n    },\n    {\n        'slug': 'task_delivery_details',\n        'description': 'Get delivery URL for a task, that url can be sent to students for delivery'\n    },\n    {\n        'slug': 'read_certificate',\n        'description': 'List and read all academy certificates'\n    },\n    {\n        'slug': 'crud_certificate',\n        'description': 'Create, update or delete student certificates'\n    },\n    {\n        'slug': 'read_layout',\n        'description': 'Read layouts to generate new certificates'\n    },\n    {\n        'slug': 'read_syllabus',\n        'description': 'List and read syllabus information'\n    },\n    {\n        'slug': 'crud_syllabus',\n        'description': 'Create, update or delete syllabus versions'\n    },\n    {\n        'slug': 'read_organization',\n        'description': 'Read academy organization details'\n    },\n    {\n        'slug': 'crud_organization',\n        'description': 'Update, create or delete academy organization details'\n    },\n    {\n        'slug': 'read_event',\n        'description': 'List and retrieve event information'\n    },\n    {\n        'slug': 'crud_event',\n        'description': 'Create, update or delete event information'\n    },\n    {\n        'slug': 'read_all_cohort',\n        'description': 'List all the cohorts or single cohort information'\n    },\n    {\n        'slug': 'read_single_cohort',\n        'description': 'single cohort information related to a user'\n    },\n    {\n        'slug': 'crud_cohort',\n        'description': 'Create, update or delete cohort info'\n    },\n    {\n        'slug': 'read_eventcheckin',\n        'description': 'List and read all the event_checkins'\n    },\n    {\n        'slug': 'read_survey',\n        'description': 'List all the nps answers'\n    },\n    {\n        'slug': 'crud_survey',\n        'description': 'Create, update or delete surveys'\n    },\n    {\n        'slug': 'read_nps_answers',\n        'description': 'List all the nps answers'\n    },\n    {\n        'slug': 'read_lead',\n        'description': 'List all the leads'\n    },\n    {\n        'slug': 'read_won_lead',\n        'description': 'List all the won leads'\n    },\n    {\n        'slug': 'crud_lead',\n        'description': 'Create, update or delete academy leads'\n    },\n    {\n        'slug': 'read_review',\n        'description': 'Read review for a particular academy'\n    },\n    {\n        'slug': 'crud_review',\n        'description': 'Create, update or delete academy reviews'\n    },\n    {\n        'slug': 'read_media',\n        'description': 'List all the medias'\n    },\n    {\n        'slug': 'crud_media',\n        'description': 'Create, update or delete academy medias'\n    },\n    {\n        'slug': 'read_media_resolution',\n        'description': 'List all the medias resolutions'\n    },\n    {\n        'slug': 'crud_media_resolution',\n        'description': 'Create, update or delete academy media resolutions'\n    },\n    {\n        'slug': 'read_cohort_activity',\n        'description': 'Read low level activity in a cohort (attendancy, etc.)'\n    },\n    {\n        'slug': 'generate_academy_token',\n        'description': 'Create a new token only to be used by the academy'\n    },\n    {\n        'slug': 'get_academy_token',\n        'description': 'Read the academy token'\n    },\n    {\n        'slug': 'send_reset_password',\n        'description': 'Generate a temporal token and resend forgot password link'\n    },\n    {\n        'slug': 'read_activity',\n        'description': 'List all the user activities'\n    },\n    {\n        'slug': 'crud_activity',\n        'description': 'Create, update or delete a user activities'\n    },\n    {\n        'slug': 'read_assignment',\n        'description': 'List all the assignments'\n    },\n    {\n        'slug': 'crud_assignment',\n        'description': 'Create, update or delete a assignment'\n    },\n    {\n        'slug':\n        'classroom_activity',\n        'description':\n        'To report student activities during the classroom or cohorts (Specially meant for teachers)'\n    },\n    {\n        'slug': 'academy_reporting',\n        'description': 'Get detailed reports about the academy activity'\n    },\n    {\n        'slug': 'generate_temporal_token',\n        'description': 'Generate a temporal token to reset github credential or forgot password'\n    },\n    {\n        'slug': 'read_mentorship_service',\n        'description': 'Get all mentorship services from one academy'\n    },\n    {\n        'slug': 'crud_mentorship_service',\n        'description': 'Create, delete or update all mentorship services from one academy'\n    },\n    {\n        'slug': 'read_mentorship_mentor',\n        'description': 'Get all mentorship mentors from one academy'\n    },\n    {\n        'slug': 'crud_mentorship_mentor',\n        'description': 'Create, delete or update all mentorship mentors from one academy'\n    },\n    {\n        'slug': 'read_mentorship_session',\n        'description': 'Get all session from one academy'\n    },\n    {\n        'slug': 'crud_mentorship_session',\n        'description': 'Create, delete or update all session from one academy'\n    },\n    {\n        'slug': 'crud_freelancer_bill',\n        'description': 'Create, delete or update all freelancer bills from one academy'\n    },\n    {\n        'slug': 'read_freelancer_bill',\n        'description': 'Read all all freelancer bills from one academy'\n    },\n    {\n        'slug': 'crud_mentorship_bill',\n        'description': 'Create, delete or update all mentroship bills from one academy'\n    },\n    {\n        'slug': 'read_mentorship_bill',\n        'description': 'Read all mentroship bills from one academy'\n    },\n    {\n        'slug': 'read_asset',\n        'description': 'Read all academy registry assets'\n    },\n    {\n        'slug': 'crud_asset',\n        'description': 'Update, create and delete registry assets'\n    },\n    {\n        'slug': 'read_tag',\n        'description': 'Read marketing tags and their details'\n    },\n    {\n        'slug': 'crud_tag',\n        'description': 'Update, create and delete a marketing tag and its details'\n    },\n    {\n        'slug': 'get_gitpod_user',\n        'description': 'List gitpod user the academy is consuming'\n    },\n    {\n        'slug': 'update_gitpod_user',\n        'description': 'Update gitpod user expiration based on available information'\n    },\n    {\n        'slug': 'read_technology',\n        'description': 'Read asset technologies'\n    },\n    {\n        'slug': 'crud_technology',\n        'description': 'Update, create and delete asset technologies'\n    },\n    {\n        'slug': 'read_keyword',\n        'description': 'Read SEO keywords'\n    },\n    {\n        'slug': 'crud_keyword',\n        'description': 'Update, create and delete SEO keywords'\n    },\n    {\n        'slug': 'read_keywordcluster',\n        'description': 'Update, create and delete asset technologies'\n    },\n    {\n        'slug': 'crud_keywordcluster',\n        'description': 'Update, create and delete asset technologies'\n    },\n]\n</code></pre>"},{"location":"security/introduction/","title":"Introduction","text":""},{"location":"security/introduction/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user, system, or client. When a user attempts to access a system or application, they must provide credentials to prove their identity. This can include entering a username and password, presenting a digital certificate, or even providing biometric data like a fingerprint.</p>"},{"location":"security/introduction/#authorization","title":"Authorization","text":"<p>Authorization is the process that comes after authentication and it determines what permissions an authenticated user has within a system. This means defining what actions a user is allowed to perform, what resources they are allowed to access, and what operations they are able to execute.</p>"},{"location":"security/schema-link/","title":"Schema link","text":"<p>It's custom authorization schema that share a key between 2 servers, it's used when you can't block microservices by ip, both servers authorize what actions can perform its pair, if both apps does not belongs to the same company you must include additionally an agreement layer.</p>"},{"location":"security/schema-link/#when-user-must-sign-an-agreement","title":"<code>When user must sign an agreement?</code>","text":"<p>When both servers does not belong to the same company, it's mandatory.</p>"},{"location":"security/schema-link/#how-is-build-that-agreement","title":"<code>How is build that agreement?</code>","text":"<p>It's builded as a collection of scopes that represent what's authorized server can do with your data.</p>"},{"location":"security/schema-link/#whats-scope","title":"<code>What's scope?</code>","text":"<p>In the context of OAuth, OpenID Connect, and many authentication/authorization systems, \"scope\" refers to the permissions that are associated with a particular token.</p>"},{"location":"security/schema-link/#how-to-link-both-servers","title":"<code>How to link both servers?</code>","text":"<p>Each server must register the other server in its database, it must share the same algorithm, strategy, keys and schema, and the key can't be shared, because during the keys rotations many of them will breaks.</p>"},{"location":"security/schema-link/#objects","title":"Objects","text":""},{"location":"security/schema-link/#token","title":"<code>Token</code>","text":"<p>This object represent the json payload.</p> <ul> <li><code>sub</code>: The \"subject\" claim in a JWT. This usually represents the principal entity (typically a user) for which the JWT is intended. In this case, user_id would be the identifier of the user in the context of your system.</li> <li><code>iss</code>: The \"issuer\" claim in a JWT. This represents the entity that generated and signed the JWT. In this case, it's being read from an environment variable API_URL, with a default value of 'http://localhost:8000'.</li> <li><code>app</code>: This is a custom claim you've defined. It appears to specify the name of the application generating the token, in this case '4geeks'.</li> <li><code>aud</code>: The \"audience\" claim. This represents the intended recipients of the JWT. In this case, it's app.slug, presumably the identifier for an application that should accept this token.</li> <li><code>exp</code>: The \"expiration time\" claim. This is the time after which the JWT should no longer be accepted. It's calculated as the current time now plus a certain number of minutes determined by JWT_LIFETIME.</li> <li><code>iat</code>: The \"issued at\" claim. This represents the time at which the JWT was issued. It's the current time now minus one second (to ensure the token is valid immediately on issuance).</li> <li><code>typ</code>: The \"type\" claim. It's a hint about the type of token. In this case, it's 'JWT' to indicate that this is a JSON Web Token.</li> </ul>"},{"location":"security/schema-link/#app","title":"<code>App</code>","text":"<p>This object represent the app on your database, this object must be cached.</p> <ul> <li><code>id</code>: The unique identifier for the application. This is often used as a reference to the application in the system.</li> <li><code>private_key</code>: This is a cryptographic key that is kept secret and only known to the application. This can be used for things like signing tokens or encrypting data.</li> <li><code>public_key</code>: This is the counterpart to the private key. It can be freely shared and is often used to verify tokens signed with the private key, or decrypt data encrypted with the private key.</li> <li><code>algorithm</code>: This refers to the algorithm used for cryptographic operations. This could be a specific type of symmetric or asymmetric encryption, or a digital signature algorithm.</li> <li><code>strategy</code>: This could refer to a particular strategy used for authentication or authorization in your system.</li> <li><code>schema</code>: This could be the structure or format that the app's data follows. In the context of databases, a schema defines how data is organized and how relationships are enforced.</li> <li><code>require_an_agreement</code>: This is likely a Boolean value (True/False) indicating whether the user needs to agree to certain terms before using the application.</li> <li><code>webhook_url</code>: Webhooks provide a way for applications to get real-time data updates. This URL is likely where the application will send HTTP requests when certain events occur.</li> <li><code>redirect_url</code>: In OAuth or similar authentication/authorization flows, this is the URL where users are redirected after they authorize the application. This URL often includes a code or token as a query parameter, which the application can exchange for an access token.</li> <li><code>app_url</code>: This is likely the URL where the actual application can be accessed by users.</li> </ul>"},{"location":"security/schema-link/#using-json-web-token","title":"Using Json Web Token","text":"<p>JWT stands for JSON Web Token. It is a standard (RFC 7519) for creating access tokens that assert some number of claims. For example, a server could generate a token that has the claim \"logged in as admin\" and provide that to a client. The client could then use that token to prove that it's logged in as admin.</p> <p>A JWT is composed of three parts: a header, a payload, and a signature. These parts are separated by dots (.) and are Base64Url encoded.</p> <ul> <li> <p><code>Header</code>: The header typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> </li> <li> <p><code>Payload</code>: The second part of the token is the payload, which contains the claims. Claims are statements about an entity (typically, the user) and additional metadata. There are three types of claims: registered, public, and private claims.</p> </li> <li> <p><code>Signature</code>: To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> </li> </ul> <p>The resulting string is three Base64-URL strings concatenated with dots. The string is compact, URL-safe, and can be conveniently passed in HTML and HTTP environments.</p>"},{"location":"security/schema-link/#params","title":"<code>Params</code>","text":"<ul> <li><code>Token</code>: JWT token.</li> <li><code>App</code>: App's slug that sign this token.</li> </ul> <pre><code>GET /data HTTP/1.1\nHost: api.example.com\nAuthorization: Link App={App},Token={Token}\n</code></pre>"},{"location":"security/schema-link/#using-signature","title":"Using Signature","text":"<p>It's a mechanism that validates the authenticity and integrity of data. It provides a way to verify that the data came from a specific source and has not been altered in transit.</p>"},{"location":"security/schema-link/#params_1","title":"<code>Params</code>","text":"<ul> <li>App: it represents a unique identifier for the app making the request. This is included in the header so the server knows which application is making the request.</li> <li>Token: A nonce is a random or semi-random number that is generated for a specific use, typically to avoid replay attacks. In this case, it's a sign that refer to a signature generated using a cryptographic algorithm.</li> <li>SignedHeaders: This part of the header includes the list of HTTP headers that are included in the signature. These are joined into a string separated by semicolons.</li> <li>Date: This is the timestamp when the request is made. It's often used to ensure that a request is not replayed (that is, sent again by an attacker).</li> </ul> <pre><code>GET /api/resource HTTP/1.1\nHost: www.example.com\nAuthorization: Signature App={App},Nonce={Token},SignedHeaders={header1};{header2};{header3},Date={Date}\n</code></pre>"},{"location":"security/schema-link/#code","title":"Code","text":""},{"location":"security/schema-link/#sender-code","title":"<code>Sender Code</code>","text":"<p>Service is a requests wrapper that manage the authorization header, it use the authorization strategy specified in the app object.</p> <pre><code># Make an action over multiple users\ns = Service(app.id)\nrequest = s.get('v1/auth/user')\ndata = request.json()\nprint(data)\n\n# Make an action over a specify user\ns = Service(app.id, user.id)\nrequest = s.get('v1/auth/user')\ndata = request.json()\nprint(data)\n\n# Force Json Web Token as authorization strategy\ns = Service(app.id)\nrequest = s.get('v1/auth/user', mode='JWT')\ndata = request.json()\nprint(data)\n\n# Force Json Web Token as authorization strategy\ns = Service(app.id)\nrequest = s.get('v1/auth/user', mode='SIGNATURE')\ndata = request.json()\nprint(data)\n</code></pre>"},{"location":"security/schema-link/#receiver","title":"Receiver","text":"<p>Protect a endpoint to access to it having these scopes, like the sender, @scope get <code>mode</code> as argument.</p> <pre><code>@api_view(['POST'])\n@permission_classes([AllowAny])\n@scope(['action_name1:data_name1', 'action_name2:data_name2', ...])\ndef endpoint(request, app: dict, token: dict):\n    handler = self.extensions(request)\n    lang = get_user_language(request)\n\n    extra = {}\n    if app.require_an_agreement:\n        extra['appuseragreement__app__id'] = app.id\n\n    if token.sub:\n        extra['id'] = token.sub\n\n    if user_id:\n        if token.sub and token.sub != user_id:\n            raise ValidationException(translation(lang,\n                                                    en='This user does not have access to this resource',\n                                                    es='Este usuario no tiene acceso a este recurso'),\n                                        code=403,\n                                        slug='user-with-no-access',\n                                        silent=True)\n\n        if 'id' not in extra:\n            extra['id'] = user_id\n\n        user = User.objects.filter(**extra).first()\n        if not user:\n            raise ValidationException(translation(lang, en='User not found', es='Usuario no encontrado'),\n                                        code=404,\n                                        slug='user-not-found',\n                                        silent=True)\n\n        serializer = AppUserSerializer(user, many=False)\n        return Response(serializer.data)\n\n    # test this path\n    items = User.objects.filter(**extra)\n    items = handler.queryset(items)\n    serializer = AppUserSerializer(items, many=True)\n\n    return handler.response(serializer.data)\n</code></pre>"},{"location":"services/google_cloud/google-cloud-functions/","title":"Google Cloud Functions","text":""},{"location":"services/google_cloud/google-cloud-functions/#write-a-http-function","title":"Write a HTTP function","text":"<p>https://cloud.google.com/functions/docs/writing/http</p>"},{"location":"services/google_cloud/google-cloud-functions/#see-active-functions","title":"See active functions","text":"<p>https://console.cloud.google.com/functions/list</p>"},{"location":"services/google_cloud/google-cloud-functions/#testing-function","title":"Testing function","text":"<p>https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python</p>"},{"location":"services/google_cloud/google-cloud-functions/#list-functions","title":"List functions","text":"Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator"},{"location":"services/google_cloud/storage/","title":"Storage","text":""},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage","title":"<code>Storage</code>","text":"<p>Google Cloud Storage</p> Source code in <code>breathecode/services/google_cloud/storage.py</code> <pre><code>class Storage:\n    \"\"\"Google Cloud Storage\"\"\"\n\n    client: storage.Client\n\n    def __init__(self) -&gt; None:\n        credentials.resolve_credentials()\n        self.client = self._get_client()\n\n    @circuit\n    def _get_client(self) -&gt; storage.Client:\n        \"\"\"Get Google Cloud Storage client\n\n        Returns:\n            storage.Client: Google Cloud Storage client\n        \"\"\"\n        return storage.Client()\n\n    def file(self, bucket_name: str, file_name: str) -&gt; File:\n        \"\"\"Get File object\n\n        Args:\n            bucket_name (str): Name of bucket in Google Cloud Storage\n            file_name (str): Name of blob in Google Cloud Bucket\n\n        Returns:\n            File: File object\n        \"\"\"\n        bucket = self.client.bucket(bucket_name)\n        return File(bucket, file_name)\n\n    def generate_download_signed_url(self, bucket_name: str, file_name: str, expiration_hours: int = 1) -&gt; str:\n        \"\"\"Generate a signed URL for downloading a file\n\n        Args:\n            bucket_name (str): Name of bucket in Google Cloud Storage\n            file_name (str): Name of blob in Google Cloud Bucket\n            expiration_hours (int): Hours until the URL expires (default: 1, max: 24)\n\n        Returns:\n            str: Signed URL for downloading the file\n        \"\"\"\n        from datetime import timedelta\n\n        expiration_hours = min(expiration_hours, 24)  # Max 24 hours\n        cloud_file = self.file(bucket_name, file_name)\n        return cloud_file.generate_signed_url(expiration=timedelta(hours=expiration_hours))\n</code></pre>"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage.file","title":"<code>file(bucket_name, file_name)</code>","text":"<p>Get File object</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of bucket in Google Cloud Storage</p> required <code>file_name</code> <code>str</code> <p>Name of blob in Google Cloud Bucket</p> required <p>Returns:</p> Name Type Description <code>File</code> <code>File</code> <p>File object</p> Source code in <code>breathecode/services/google_cloud/storage.py</code> <pre><code>def file(self, bucket_name: str, file_name: str) -&gt; File:\n    \"\"\"Get File object\n\n    Args:\n        bucket_name (str): Name of bucket in Google Cloud Storage\n        file_name (str): Name of blob in Google Cloud Bucket\n\n    Returns:\n        File: File object\n    \"\"\"\n    bucket = self.client.bucket(bucket_name)\n    return File(bucket, file_name)\n</code></pre>"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage.generate_download_signed_url","title":"<code>generate_download_signed_url(bucket_name, file_name, expiration_hours=1)</code>","text":"<p>Generate a signed URL for downloading a file</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of bucket in Google Cloud Storage</p> required <code>file_name</code> <code>str</code> <p>Name of blob in Google Cloud Bucket</p> required <code>expiration_hours</code> <code>int</code> <p>Hours until the URL expires (default: 1, max: 24)</p> <code>1</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Signed URL for downloading the file</p> Source code in <code>breathecode/services/google_cloud/storage.py</code> <pre><code>def generate_download_signed_url(self, bucket_name: str, file_name: str, expiration_hours: int = 1) -&gt; str:\n    \"\"\"Generate a signed URL for downloading a file\n\n    Args:\n        bucket_name (str): Name of bucket in Google Cloud Storage\n        file_name (str): Name of blob in Google Cloud Bucket\n        expiration_hours (int): Hours until the URL expires (default: 1, max: 24)\n\n    Returns:\n        str: Signed URL for downloading the file\n    \"\"\"\n    from datetime import timedelta\n\n    expiration_hours = min(expiration_hours, 24)  # Max 24 hours\n    cloud_file = self.file(bucket_name, file_name)\n    return cloud_file.generate_signed_url(expiration=timedelta(hours=expiration_hours))\n</code></pre>"},{"location":"services/slack%20integration/icons/","title":"Icons","text":"<p>The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1</p>"},{"location":"signals/quickstart/","title":"Quickstart","text":""},{"location":"signals/quickstart/#signals","title":"Signals","text":"<p>The official documentation for django signals can be found here.</p> <p>At 4Geeks, signals are similar concept to \"events\", we use signals as custom \"events\" that can notify important things that happen in one app to all the other app's (if they are listening).</p> <p>For example: When a student drops from a cohort</p> <p>There is a signal to notify when a <code>student educational status gets updated</code>, this is useful because other application may react to it. Here is the signal being initialized, here is being triggered/dispatched when a student gets saved and this is an example where the signal is being received on the breathecode.marketing.app to trigger some additional tasks within the system.</p>"},{"location":"signals/quickstart/#when-to-use-a-signal","title":"When to use a signal","text":"<p>Inside the breathecode team, we see signals for asynchronous processing of any side effects, we try to focus on them for communication between apps only.</p>"},{"location":"signals/quickstart/#declare-a-new-signal","title":"Declare a new signal","text":"<p>You have many examples that you can find inside the code, each breathecode app has a file <code>signals.py</code> that contains all the signals dispatched by that app. If the file does not exist within one of the apps, and you need to create a signal for that app, you can create the file yourself.</p> <p>If you wanted to create a signal for when a cohort is saved, you should start by initializing it inside <code>breathecode/admissions/signals.py</code> like this:</p> <pre><code>from django.dispatch import Signal\n\ncohort_saved = Signal()\n</code></pre>"},{"location":"signals/quickstart/#dispatching-a-signal","title":"Dispatching a signal","text":"<p>All the initialized signals are available on the same application <code>signals.py</code> file, if the signal you want to dispatch is not there, you should probably declare a new one.</p> <p>After the signal is initialized, it can be dispatched anywhere withing the same app, for example inside a serializer create method like this:</p> <pre><code>from .signals import cohort_saved\n\nclass CohortSerializer(CohortSerializerMixin):\n\n    def create(self, validated_data):\n        cohort = Cohort.objects.create(**validated_data, **self.context)\n        cohort_saved.send_robust(instance=self, sender=CohortUser)\n        return cohort\n</code></pre>"},{"location":"signals/quickstart/#receiving-a-signal","title":"Receiving a signal","text":"<p>All django applications can subscribe to receive a signal, even if those signals are coming from another app, but you should always add your receiving code inside the receivers.py of the app that will react to the signal.</p> <p>The following code will receive the <code>cohort_saved</code> signal and print on the screen if its being created or updated.</p> <p>Note: Its a good idea to always connect receivers to tasks, that way you can asynconosly pospone any processing that you will do after the cohort its created.</p> <pre><code>from breathecode.admissions.signals import student_edu_status_updated, cohort_saved\nfrom .models import FormEntry, ActiveCampaignAcademy\nfrom .tasks import add_cohort_task_to_student, add_cohort_slug_as_acp_tag\n\n@receiver(cohort_saved, sender=Cohort)\ndef cohort_post_save(sender, instance, created, *args, **kwargs):\n    if created:\n        print(f\"The cohort {instance.id} was just created\")\n        # you can call a task from task.py here.\n    else:\n        print(f\"The cohort {instance.id} was just updated\")\n</code></pre>"},{"location":"supervisors/quickstart/","title":"Supervisors Documentation","text":""},{"location":"supervisors/quickstart/#overview","title":"Overview","text":"<p>The Supervisors system in the <code>breathecode</code> Django application provides automated quality assurance by periodically monitoring the system for issues and triggering corrective actions. Supervisors are implemented as Python functions decorated with <code>@supervisor</code>, which run at specified intervals to detect issues (e.g., data inconsistencies). Detected issues are stored as <code>SupervisorIssue</code> objects and handled by functions decorated with <code>@issue</code>. The system uses Celery for asynchronous task execution and a Django management command to schedule supervisors and issue handlers.</p> <p>This documentation covers the supervisors defined in <code>breathecode/payments/supervisors.py</code>, their triggering mechanism, and how to extend or maintain the system.</p>"},{"location":"supervisors/quickstart/#purpose","title":"Purpose","text":"<p>Supervisors ensure data integrity and compliance with business rules by: - Identifying issues such as orphaned team members (active <code>TeamMember</code> objects without associated <code>Consumable</code> objects) or subscriptions exceeding team size limits. - Creating <code>SupervisorIssue</code> records for detected problems. - Triggering issue handlers to resolve problems (e.g., creating missing consumables or notifying users). - Retrying failed resolutions with configurable attempts and delays.</p>"},{"location":"supervisors/quickstart/#components","title":"Components","text":""},{"location":"supervisors/quickstart/#models","title":"Models","text":"<ul> <li><code>Supervisor</code> (in <code>breathecode.monitoring.models</code>):</li> <li>Tracks metadata for each supervisor function.</li> <li>Fields:<ul> <li><code>task_module</code>: The Python module containing the supervisor (e.g., <code>breathecode.payments.supervisors</code>).</li> <li><code>task_name</code>: The supervisor function name (e.g., <code>supervise_orphaned_team_members</code>).</li> <li><code>delta</code>: The interval between runs (e.g., <code>timedelta(hours=2)</code>).</li> <li><code>ran_at</code>: The last execution time (<code>datetime</code>).</li> </ul> </li> <li><code>SupervisorIssue</code> (in <code>breathecode.monitoring.models</code>):</li> <li>Stores detected issues for processing by issue handlers.</li> <li>Fields:<ul> <li><code>supervisor</code>: Foreign key to the <code>Supervisor</code> instance.</li> <li><code>error</code>: The issue description (e.g., <code>Team member 123 (user@example.com) has no consumables</code>).</li> <li><code>code</code>: The issue handler code (e.g., <code>fix-orphaned-team-member</code>).</li> <li><code>params</code>: Parameters for the issue handler (e.g., <code>{'team_member_id': 123}</code>).</li> <li><code>ran_at</code>: When the issue was detected (<code>datetime</code>).</li> <li><code>occurrences</code>: Number of times the issue was detected.</li> <li><code>fixed</code>: When the issue was resolved (<code>datetime</code>, nullable).</li> <li><code>attempts</code>: Number of resolution attempts.</li> </ul> </li> </ul>"},{"location":"supervisors/quickstart/#decorators","title":"Decorators","text":"<ul> <li><code>@supervisor(delta, auto=True, raises=False)</code> (in <code>breathecode.utils.decorators</code>):</li> <li>Registers a supervisor function to run periodically.</li> <li>Parameters:<ul> <li><code>delta</code>: Interval between runs (e.g., <code>timedelta(hours=2)</code>). Defaults to 1 hour if <code>None</code>.</li> <li><code>auto</code>: If <code>True</code>, automatically runs the supervisor (unused in provided code).</li> <li><code>raises</code>: If <code>True</code>, raises exceptions (unused in provided code).</li> </ul> </li> <li>Functionality:<ul> <li>Adds the supervisor to the global <code>paths</code> set as <code>(module, name, delta)</code>.</li> <li>Creates or updates a <code>Supervisor</code> model instance.</li> <li>Wraps the supervisor function to process yielded issues, creating <code>SupervisorIssue</code> objects.</li> <li>Supports both synchronous and asynchronous supervisors (using <code>async_wrapper</code> for async generators).</li> </ul> </li> <li><code>@issue(code, attempts, delta)</code>:</li> <li>Associates a function with an issue <code>code</code> for handling specific issues.</li> <li>Parameters:<ul> <li><code>code</code>: The issue identifier (e.g., <code>fix-orphaned-team-member</code>).</li> <li><code>attempts</code>: Maximum retry attempts (e.g., 3).</li> <li><code>delta</code>: Delay between retries (e.g., <code>timedelta(minutes=30)</code>).</li> </ul> </li> <li>Functionality:<ul> <li>Executes the handler with <code>params</code> from the <code>SupervisorIssue</code>.</li> <li>Retries if the handler returns <code>None</code> or raises an exception, up to <code>attempts</code> times.</li> </ul> </li> </ul>"},{"location":"supervisors/quickstart/#management-command","title":"Management Command","text":"<ul> <li>Command: <code>python manage.py run_supervisors</code> (assumed name, located in <code>breathecode/monitoring/management/commands/run_supervisors.py</code>).</li> <li>Functionality:</li> <li>Deletes <code>SupervisorIssue</code> objects older than 7 days.</li> <li>Registers all supervisors from the <code>paths</code> set as <code>Supervisor</code> model instances.</li> <li>Schedules supervisors that are due to run using <code>run_supervisor.delay(supervisor_id)</code>.</li> <li>Schedules issue handlers for unresolved issues using <code>fix_issue.delay(issue_id)</code>.</li> </ul>"},{"location":"supervisors/quickstart/#celery-tasks","title":"Celery Tasks","text":"<ul> <li><code>run_supervisor</code> (in <code>breathecode.monitoring.tasks</code>):</li> <li>Executes a supervisor function by <code>Supervisor</code> ID.</li> <li>Updates <code>ran_at</code> to <code>timezone.now()</code>.</li> <li><code>fix_issue</code> (in <code>breathecode.monitoring.tasks</code>):</li> <li>Calls the <code>@issue</code> handler for a <code>SupervisorIssue</code> based on its <code>code</code>.</li> <li>Passes <code>params</code> to the handler.</li> <li>Updates <code>attempts</code> and <code>fixed</code> fields.</li> </ul>"},{"location":"supervisors/quickstart/#supervisors-in-breathecodepaymentssupervisorspy","title":"Supervisors in <code>breathecode/payments/supervisors.py</code>","text":""},{"location":"supervisors/quickstart/#supervise_orphaned_team_members","title":"<code>supervise_orphaned_team_members</code>","text":"<ul> <li>Purpose: Identifies active <code>TeamMember</code> objects without associated <code>Consumable</code> objects.</li> <li>Interval: Every 2 hours (<code>delta=timedelta(hours=2)</code>).</li> <li>Logic:</li> <li>Queries <code>TeamMember</code> objects where:<ul> <li><code>status=TeamMember.Status.ACTIVE</code></li> <li><code>user</code> is not null</li> <li><code>joined_at</code> is not null</li> <li>No <code>Consumable</code> exists for the <code>TeamMember</code></li> </ul> </li> <li>Yields an issue for each orphaned member:     <pre><code>{\n    'code': 'fix-orphaned-team-member',\n    'message': f'Team member {member.id} ({member.email}) has no consumables',\n    'params': {'team_member_id': member.id}\n}\n</code></pre></li> </ul>"},{"location":"supervisors/quickstart/#supervise_team_member_limits","title":"<code>supervise_team_member_limits</code>","text":"<ul> <li>Purpose: Identifies <code>Subscription</code> objects with more active <code>TeamMember</code> objects than allowed by their <code>ServiceItem.max_team_members</code>.</li> <li>Interval: Every 6 hours (<code>delta=timedelta(hours=6)</code>).</li> <li>Logic:</li> <li>Queries <code>ServiceItem</code> objects with <code>is_team_allowed=True</code>.</li> <li>For each <code>ServiceItem</code>, finds <code>Subscription</code> objects where the count of active <code>TeamMember</code> objects (via <code>Consumable</code>) exceeds <code>max_team_members</code>.</li> <li>Yields an issue for each violation:     <pre><code>{\n    'code': 'fix-team-size-exceeded',\n    'message': f'Subscription {subscription.id} has {subscription.active_team_count} team members, max allowed: {service_item.max_team_members}',\n    'params': {\n        'subscription_id': subscription.id,\n        'service_item_id': service_item.id,\n        'current_count': subscription.active_team_count,\n        'max_allowed': service_item.max_team_members\n    }\n}\n</code></pre></li> </ul>"},{"location":"supervisors/quickstart/#issue-handlers","title":"Issue Handlers","text":""},{"location":"supervisors/quickstart/#fix_orphaned_team_memberteam_member_id-int","title":"<code>fix_orphaned_team_member(team_member_id: int)</code>","text":"<ul> <li>Code: <code>fix-orphaned-team-member</code></li> <li>Attempts: 3</li> <li>Retry Delay: 30 minutes (<code>timedelta(minutes=30)</code>)</li> <li>Logic:</li> <li>Checks if the <code>TeamMember</code> exists and is active.</li> <li>If consumables already exist, marks as resolved.</li> <li>Calls <code>create_team_member_consumables(team_member)</code> to create missing consumables.</li> <li>Returns <code>True</code> if resolved, <code>None</code> to retry on error.</li> <li>Logging:</li> <li>Success: <code>logger.info(f\"Fixed orphaned team member {team_member_id}\")</code></li> <li>Failure: <code>logger.error(f\"Failed to fix orphaned team member {team_member_id}: {e}\")</code></li> </ul>"},{"location":"supervisors/quickstart/#fix_team_size_exceededsubscription_id-int-service_item_id-int-current_count-int-max_allowed-int","title":"<code>fix_team_size_exceeded(subscription_id: int, service_item_id: int, current_count: int, max_allowed: int)</code>","text":"<ul> <li>Code: <code>fix-team-size-exceeded</code></li> <li>Attempts: 2</li> <li>Retry Delay: 1 hour (<code>timedelta(hours=1)</code>)</li> <li>Logic:</li> <li>Checks if the <code>Subscription</code> and <code>ServiceItem</code> exist.</li> <li>Sends an email notification to the subscription owner using <code>send_email_message</code>.</li> <li>Returns <code>True</code> if the notification is sent, <code>None</code> to retry on error.</li> <li>Logging:</li> <li>Success: <code>logger.warning(f\"Notified user about team size exceeded: subscription {subscription_id}\")</code></li> <li>Failure: <code>logger.error(f\"Failed to handle team size exceeded for subscription {subscription_id}: {e}\")</code></li> </ul>"},{"location":"supervisors/quickstart/#triggering-mechanism","title":"Triggering Mechanism","text":"<p>Supervisors are triggered via the <code>run_supervisors</code> management command, which is typically run periodically (e.g., via a cron job or Celery Beat). The process is as follows:</p> <ol> <li>Command Execution:</li> <li>Run <code>python manage.py run_supervisors</code>.</li> <li>Deletes <code>SupervisorIssue</code> objects older than 7 days.</li> <li>Registers all supervisors from the <code>paths</code> set as <code>Supervisor</code> model instances.</li> <li> <p>Calls <code>run_supervisors()</code> and <code>fix_issues()</code>.</p> </li> <li> <p>Supervisor Scheduling:</p> </li> <li><code>run_supervisors</code> queries all <code>Supervisor</code> objects.</li> <li>For each supervisor, checks if it\u2019s due to run (<code>ran_at is None</code> or <code>now - delta &gt; ran_at</code>).</li> <li>Schedules eligible supervisors via <code>run_supervisor.delay(supervisor_id)</code> (a Celery task).</li> <li> <p>Logs: <code>Supervisor breathecode.payments.supervisors.supervise_orphaned_team_members scheduled</code>.</p> </li> <li> <p>Supervisor Execution:</p> </li> <li>The <code>run_supervisor</code> task:<ul> <li>Retrieves the <code>Supervisor</code> by ID.</li> <li>Imports and runs the supervisor function (e.g., <code>supervise_orphaned_team_members</code>).</li> <li>Updates <code>ran_at = timezone.now()</code>.</li> </ul> </li> <li> <p>The supervisor yields issue dictionaries, which the <code>@supervisor</code> decorator\u2019s <code>wrapper</code> converts to <code>SupervisorIssue</code> objects:</p> <ul> <li><code>supervisor</code>: Links to the <code>Supervisor</code> instance.</li> <li><code>error</code>: Issue message.</li> <li><code>code</code>: Issue handler code.</li> <li><code>params</code>: Parameters for the handler.</li> <li><code>ran_at</code>: Detection time.</li> <li><code>occurrences</code>: Incremented for recurring issues.</li> </ul> </li> <li> <p>Issue Handling:</p> </li> <li><code>fix_issues</code> queries <code>SupervisorIssue</code> objects where <code>fixed=None</code> and <code>attempts &lt; 3</code>.</li> <li>Schedules <code>fix_issue.delay(issue_id)</code> for each issue.</li> <li> <p>The <code>fix_issue</code> task:</p> <ul> <li>Retrieves the <code>SupervisorIssue</code>.</li> <li>Calls the <code>@issue</code> handler based on the <code>code</code> (e.g., <code>fix_orphaned_team_member</code>).</li> <li>Updates <code>attempts</code> and <code>fixed</code> if resolved.</li> <li>Retries if <code>None</code> is returned, up to the handler\u2019s <code>attempts</code> limit.</li> </ul> </li> <li> <p>Scheduling:</p> </li> <li>The command should be run periodically (e.g., every 5 minutes via cron or Celery Beat):      <pre><code>*/5 * * * * python manage.py run_supervisors\n</code></pre></li> <li>This ensures supervisors run at their specified intervals (2 hours for <code>supervise_orphaned_team_members</code>, 6 hours for <code>supervise_team_member_limits</code>).</li> </ol>"},{"location":"supervisors/quickstart/#example-flow","title":"Example Flow","text":"<ol> <li>9:00 AM: Run <code>python manage.py run_supervisors</code>.</li> <li>Deletes old issues.</li> <li>Registers supervisors in <code>Supervisor</code>.</li> <li>Schedules <code>supervise_orphaned_team_members</code> (due immediately).</li> <li>run_supervisor Task:</li> <li>Runs <code>supervise_orphaned_team_members</code>, finds <code>TeamMember</code> ID 123 without consumables.</li> <li>Creates a <code>SupervisorIssue</code> with <code>code='fix-orphaned-team-member'</code>, <code>params={'team_member_id': 123}</code>.</li> <li>fix_issues:</li> <li>Schedules <code>fix_issue.delay(issue_id)</code> for the issue.</li> <li><code>fix_orphaned_team_member</code> creates consumables and marks the issue as resolved.</li> <li>11:00 AM: Next run checks if <code>supervise_orphaned_team_members</code> is due again.</li> </ol>"},{"location":"supervisors/quickstart/#best-practices","title":"Best Practices","text":"<ul> <li>Idempotency: Ensure issue handlers (e.g., <code>create_team_member_consumables</code>) are idempotent to avoid duplicate actions.</li> <li>Performance:</li> <li>Add indexes to optimize queries:     <pre><code>class TeamMember(models.Model):\n    status = models.CharField(max_length=20, choices=TeamMember.Status.choices)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    joined_at = models.DateTimeField()\n    class Meta:\n        indexes = [\n            models.Index(fields=['status', 'user', 'joined_at']),\n        ]\n</code></pre> <pre><code>class Consumable(models.Model):\n    team_member = models.ForeignKey('TeamMember', on_delete=models.CASCADE, null=True)\n    service_item = models.ForeignKey('ServiceItem', on_delete=models.CASCADE)\n    class Meta:\n        indexes = [\n            models.Index(fields=['team_member']),\n        ]\n</code></pre></li> <li>Batch <code>SupervisorIssue</code> creation for large datasets:     <pre><code>issues = [\n    SupervisorIssue(\n        supervisor=instance,\n        error=f'Team member {member.id} ({member.email}) has no consumables',\n        code='fix-orphaned-team-member',\n        params={'team_member_id': member.id},\n        ran_at=timezone.now()\n    )\n    for member in orphaned_members\n]\nSupervisorIssue.objects.bulk_create(issues)\n</code></pre></li> <li>Monitoring: Add metrics (e.g., via <code>statsd</code>) to track supervisor runs and issue resolutions.</li> <li>Retry Consistency: Align <code>fix_issues</code> retry limit with <code>@issue</code> <code>attempts</code> (e.g., <code>fix_team_size_exceeded</code> has <code>attempts=2</code>, but <code>fix_issues</code> assumes 3).</li> </ul>"},{"location":"supervisors/quickstart/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Supervisor Not Running: Check if the command is scheduled (e.g., via cron or Celery Beat) and if Celery workers are active.</li> <li>Issues Not Resolved: Verify <code>fix_issue</code> task is running and the <code>@issue</code> handler\u2019s <code>code</code> matches the <code>SupervisorIssue.code</code>.</li> <li>Performance Issues: Profile queries and add indexes as needed.</li> <li>Logging: Check logs (<code>logger.info</code>, <code>logger.error</code>) for errors in <code>fix_orphaned_team_member</code> or <code>fix_team_size_exceeded</code>.</li> </ul>"},{"location":"supervisors/quickstart/#extending-the-system","title":"Extending the System","text":"<p>To add a new supervisor: 1. Define the supervisor function in <code>breathecode/payments/supervisors.py</code>:    <pre><code>@supervisor(delta=timedelta(hours=4))\ndef supervise_new_condition():\n    for item in SomeModel.objects.filter(some_condition=True):\n        yield {\n            'code': 'fix-new-condition',\n            'message': f'Issue with {item.id}',\n            'params': {'item_id': item.id}\n        }\n</code></pre> 2. Define the issue handler:    <pre><code>@issue(code='fix-new-condition', attempts=3, delta=timedelta(minutes=30))\ndef fix_new_condition(item_id: int):\n    try:\n        item = SomeModel.objects.get(id=item_id)\n        # Fix logic\n        logger.info(f\"Fixed item {item_id}\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to fix item {item_id}: {e}\")\n        return None\n</code></pre> 3. Ensure the management command is run periodically.</p>"},{"location":"testing/parametrize/","title":"Multiple parameters","text":"<p>This is the function to be tested, it receive x bits and convert it to an integer.</p> <pre><code>def bytes_to_integer(*bit: int):\n    how_many = len(bit)\n    result = 0\n\n    for i in range(how_many):\n        offset = 2**(how_many - 1 - i)\n        result += bit[i] * offset\n\n    return result\n</code></pre> <p>This have 16 possible values, we can build all cases providing the bit 3 and 4 as 00, 01, 10, 11 in row, and in each iteration set the bit 1 and 2 starting from 00 until 11, like it where in the following table.</p> Decimal 4-bit Binary 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 10 1010 11 1011 12 1100 13 1101 14 1110 15 1111 <p>So, the bit 1 have a value of 8, the bit 2 is 4, the bit 3 is 2, and the bit 1 is 1 or 0, it can sum each component and check if the result is ok.</p> <pre><code>@pytest.mark.parametrize('bit1,bit2,res1', [(0, 0, 0), (0, 1, 4), (1, 0, 8), (1, 1, 12)])\n@pytest.mark.parametrize('bit3,bit4,res2', [(0, 0, 0), (0, 1, 1), (1, 0, 2), (1, 1, 3)])\ndef test_bytes_to_integer(bit1, bit2, bit3, bit4, res1, res2):\n    number = bytes_to_integer(bit1, bit2, bit3, bit4)\n    assert number == res1 + res2\n</code></pre> <p>This test will be executed 16 times with each row in the table, this avoid to write the test 16 times or use random values that should generate a random behavior, this case pass each one of the case have a significant overhead when the tests are running, it's recommended when the functionality is core or important in the api.</p>"},{"location":"testing/running-tests/","title":"Running tests","text":""},{"location":"testing/running-tests/#run-a-test-file","title":"Run a test file","text":"<pre><code>poetry run test breathecode/payments/tests/urls/tests_me_service_slug_consumptionsession_hash.py\n</code></pre>"},{"location":"testing/running-tests/#pytest-options","title":"Pytest options","text":"<ul> <li><code>-v</code>: verbose</li> <li><code>-vv</code>: more verbose</li> <li><code>-s</code>: don't capture the stdout, useful when the test execution won't end.</li> <li><code>-k</code>: only run test methods and classes that match the pattern or substring.</li> </ul>"},{"location":"testing/running-tests/#run-tests-in-parallel","title":"Run tests in parallel","text":"<pre><code>poetry run test:parallel\n</code></pre>"},{"location":"testing/running-tests/#run-tests-in-parallel-in-a-module","title":"Run tests in parallel in a module","text":"<pre><code>poetry run test:parallel ./breathecode/\n</code></pre>"},{"location":"testing/running-tests/#run-coverage-in-parallel","title":"Run coverage in parallel","text":"<pre><code>poetry run test:coverage\n</code></pre>"},{"location":"testing/running-tests/#run-coverage-in-parallel-in-a-module","title":"Run coverage in parallel in a module","text":"<pre><code>poetry run test:coverage breathecode.admissions\n</code></pre>"},{"location":"testing/mixins/bc-cache/","title":"bc.cache","text":""},{"location":"testing/mixins/bc-cache/#breathecode.tests.mixins.breathecode_mixin.cache.Cache","title":"<code>Cache</code>","text":"<p>Mixin with the purpose of cover all the related with cache</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/cache.py</code> <pre><code>class Cache:\n    \"\"\"Mixin with the purpose of cover all the related with cache\"\"\"\n\n    clear = CacheMixin.clear_cache\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n</code></pre>"},{"location":"testing/mixins/bc-check/","title":"bc.check","text":""},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check","title":"<code>Check</code>","text":"<p>Mixin with the purpose of cover all the related with the custom asserts</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>class Check:\n    \"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\"\n\n    sha256 = Sha256Mixin.assertHash\n    token = TokenMixin.assertToken\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def datetime_in_range(self, start: datetime, end: datetime, date: datetime) -&gt; None:\n        \"\"\"\n        Check if a range if between start and end argument.\n\n        Usage:\n\n        ```py\n        from django.utils import timezone\n\n        start = timezone.now()\n        in_range = timezone.now()\n        end = timezone.now()\n        out_of_range = timezone.now()\n\n        # pass because this datetime is between start and end\n        self.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n\n        # fail because this datetime is not between start and end\n        self.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n        ```\n        \"\"\"\n\n        self._parent.assertLess(start, date)\n        self._parent.assertGreater(end, date)\n\n    def partial_equality(self, first: dict | list[dict], second: dict | list[dict]) -&gt; None:\n        \"\"\"\n        Fail if the two objects are partially unequal as determined by the '==' operator.\n\n        Usage:\n\n        ```py\n        obj1 = {'key1': 1, 'key2': 2}\n        obj2 = {'key2': 2, 'key3': 1}\n        obj3 = {'key2': 2}\n\n        # it's fail because the key3 is not in the obj1\n        self.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n\n        # it's fail because the key1 is not in the obj2\n        self.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n\n        # it's pass because the key2 exists in the obj1\n        self.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n\n        # it's pass because the key2 exists in the obj2\n        self.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n\n        # it's fail because the key1 is not in the obj3\n        self.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n\n        # it's fail because the key3 is not in the obj3\n        self.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n        ```\n        \"\"\"\n\n        assert type(first) == type(second)\n\n        if isinstance(first, list):\n            assert len(first) == len(second)\n\n            original = []\n\n            for i in range(0, len(first)):\n                original.append(self._fill_partial_equality(first[i], second[i]))\n\n        else:\n            original = self._fill_partial_equality(first, second)\n\n        self._parent.assertEqual(original, second)\n\n    def calls(self, first: list[call], second: list[call]) -&gt; None:\n        \"\"\"\n        Fail if the two objects are partially unequal as determined by the '==' operator.\n\n        Usage:\n\n        ```py\n        self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n        ```\n        \"\"\"\n\n        is_unittest = hasattr(self._parent, \"assertEqual\")\n\n        if is_unittest:\n            self._parent.assertEqual(\n                len(first), len(second), msg=f\"Does not have same length\\n\\n{first}\\n\\n!=\\n\\n{second}\"\n            )\n\n            for i in range(0, len(first)):\n                self._parent.assertEqual(first[i].args, second[i].args, msg=f\"args in index {i} does not match\")\n                self._parent.assertEqual(first[i].kwargs, second[i].kwargs, msg=f\"kwargs in index {i} does not match\")\n\n        else:\n            assert len(first) == len(second), f\"not have same length than {first}\\n{second}\"\n\n            for i in range(0, len(first)):\n                assert first[i].args == second[i].args, f\"args in index {i} does not match\"\n                assert first[i].kwargs == second[i].kwargs, f\"kwargs in index {i} does not match\"\n\n    def _fill_partial_equality(self, first: dict, second: dict) -&gt; dict:\n        original = {}\n\n        for key in second.keys():\n            original[key] = second[key]\n\n        return original\n\n    def queryset_of(self, query: Any, model: Model) -&gt; None:\n        \"\"\"\n        Check if the first argument is a queryset of a models provided as second argument.\n\n        Usage:\n\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n\n        self.bc.database.create(cohort=1)\n\n        collection = []\n        queryset = Cohort.objects.filter()\n\n        # pass because the first argument is a QuerySet and it's type Cohort\n        self.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n\n        # fail because the first argument is a QuerySet and it is not type Academy\n        self.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n\n        # fail because the first argument is not a QuerySet\n        self.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n        ```\n        \"\"\"\n\n        if not isinstance(query, QuerySet):\n            self._parent.fail(\"The first argument is not a QuerySet\")\n\n        if query.model != model:\n            self._parent.fail(f\"The QuerySet is type {query.model.__name__} instead of {model.__name__}\")\n\n    def queryset_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n        \"\"\"\n        Check if the queryset have the following primary keys.\n\n        Usage:\n\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n\n        self.bc.database.create(cohort=1)\n\n        collection = []\n        queryset = Cohort.objects.filter()\n\n        # pass because the QuerySet has the primary keys 1\n        self.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n\n        # fail because the QuerySet has the primary keys 1 but the second argument is empty\n        self.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n        ```\n        \"\"\"\n\n        if not isinstance(query, QuerySet):\n            self._parent.fail(\"The first argument is not a QuerySet\")\n\n        assert [x.pk for x in query] == pks\n\n    def list_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n        \"\"\"\n        Check if the list have the following primary keys.\n\n        Usage:\n\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n\n        model = self.bc.database.create(cohort=1)\n\n        collection = [model.cohort]\n\n        # pass because the QuerySet has the primary keys 1\n        self.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n\n        # fail because the QuerySet has the primary keys 1 but the second argument is empty\n        self.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n        ```\n        \"\"\"\n\n        if not isinstance(query, list):\n            self._parent.fail(\"The first argument is not a list\")\n\n        self._parent.assertEqual([x.pk for x in query], pks)\n\n    def count_queries(self, n, db=\"default\", verbose=False):\n        queries = [query[\"sql\"] for query in connections[db].queries]\n\n        if not verbose:\n            self._parent.assertEqual(n, len(queries), \"different number of queries, use verbose=True to see more info\")\n\n        if verbose and n != len(queries):\n            result = \"\\n\"\n            result += \"---------------- Queries ----------------\\n\\n\"\n            for query in connections[db].queries:\n                result += f'{query[\"time\"]} {query[\"sql\"]}\\n\\n'\n            result += \"----------------- Count -----------------\\n\\n\"\n            result += f\"Queries: {len(connections[db].queries)}\\n\\n\"\n            result += \"-----------------------------------------\\n\\n\"\n            self._parent.fail(result)\n\n    @contextmanager\n    def raises(self, expected_exception, expected_message):\n        try:\n            yield\n        except expected_exception as e:\n            assert str(e) == expected_message, f\"Expected '{expected_message}', but got '{str(e)}'\"\n        except Exception as e:\n            pytest.fail(f\"Expected {expected_exception} but it was not raised.\")\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.calls","title":"<code>calls(first, second)</code>","text":"<p>Fail if the two objects are partially unequal as determined by the '==' operator.</p> <p>Usage:</p> <pre><code>self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def calls(self, first: list[call], second: list[call]) -&gt; None:\n    \"\"\"\n    Fail if the two objects are partially unequal as determined by the '==' operator.\n\n    Usage:\n\n    ```py\n    self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n    ```\n    \"\"\"\n\n    is_unittest = hasattr(self._parent, \"assertEqual\")\n\n    if is_unittest:\n        self._parent.assertEqual(\n            len(first), len(second), msg=f\"Does not have same length\\n\\n{first}\\n\\n!=\\n\\n{second}\"\n        )\n\n        for i in range(0, len(first)):\n            self._parent.assertEqual(first[i].args, second[i].args, msg=f\"args in index {i} does not match\")\n            self._parent.assertEqual(first[i].kwargs, second[i].kwargs, msg=f\"kwargs in index {i} does not match\")\n\n    else:\n        assert len(first) == len(second), f\"not have same length than {first}\\n{second}\"\n\n        for i in range(0, len(first)):\n            assert first[i].args == second[i].args, f\"args in index {i} does not match\"\n            assert first[i].kwargs == second[i].kwargs, f\"kwargs in index {i} does not match\"\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.datetime_in_range","title":"<code>datetime_in_range(start, end, date)</code>","text":"<p>Check if a range if between start and end argument.</p> <p>Usage:</p> <pre><code>from django.utils import timezone\n\nstart = timezone.now()\nin_range = timezone.now()\nend = timezone.now()\nout_of_range = timezone.now()\n\n# pass because this datetime is between start and end\nself.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n\n# fail because this datetime is not between start and end\nself.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def datetime_in_range(self, start: datetime, end: datetime, date: datetime) -&gt; None:\n    \"\"\"\n    Check if a range if between start and end argument.\n\n    Usage:\n\n    ```py\n    from django.utils import timezone\n\n    start = timezone.now()\n    in_range = timezone.now()\n    end = timezone.now()\n    out_of_range = timezone.now()\n\n    # pass because this datetime is between start and end\n    self.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n\n    # fail because this datetime is not between start and end\n    self.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n    ```\n    \"\"\"\n\n    self._parent.assertLess(start, date)\n    self._parent.assertGreater(end, date)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.list_with_pks","title":"<code>list_with_pks(query, pks)</code>","text":"<p>Check if the list have the following primary keys.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\n\nmodel = self.bc.database.create(cohort=1)\n\ncollection = [model.cohort]\n\n# pass because the QuerySet has the primary keys 1\nself.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n\n# fail because the QuerySet has the primary keys 1 but the second argument is empty\nself.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def list_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n    \"\"\"\n    Check if the list have the following primary keys.\n\n    Usage:\n\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n\n    model = self.bc.database.create(cohort=1)\n\n    collection = [model.cohort]\n\n    # pass because the QuerySet has the primary keys 1\n    self.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n\n    # fail because the QuerySet has the primary keys 1 but the second argument is empty\n    self.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n    ```\n    \"\"\"\n\n    if not isinstance(query, list):\n        self._parent.fail(\"The first argument is not a list\")\n\n    self._parent.assertEqual([x.pk for x in query], pks)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.partial_equality","title":"<code>partial_equality(first, second)</code>","text":"<p>Fail if the two objects are partially unequal as determined by the '==' operator.</p> <p>Usage:</p> <pre><code>obj1 = {'key1': 1, 'key2': 2}\nobj2 = {'key2': 2, 'key3': 1}\nobj3 = {'key2': 2}\n\n# it's fail because the key3 is not in the obj1\nself.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n\n# it's fail because the key1 is not in the obj2\nself.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n\n# it's pass because the key2 exists in the obj1\nself.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n\n# it's pass because the key2 exists in the obj2\nself.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n\n# it's fail because the key1 is not in the obj3\nself.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n\n# it's fail because the key3 is not in the obj3\nself.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def partial_equality(self, first: dict | list[dict], second: dict | list[dict]) -&gt; None:\n    \"\"\"\n    Fail if the two objects are partially unequal as determined by the '==' operator.\n\n    Usage:\n\n    ```py\n    obj1 = {'key1': 1, 'key2': 2}\n    obj2 = {'key2': 2, 'key3': 1}\n    obj3 = {'key2': 2}\n\n    # it's fail because the key3 is not in the obj1\n    self.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n\n    # it's fail because the key1 is not in the obj2\n    self.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n\n    # it's pass because the key2 exists in the obj1\n    self.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n\n    # it's pass because the key2 exists in the obj2\n    self.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n\n    # it's fail because the key1 is not in the obj3\n    self.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n\n    # it's fail because the key3 is not in the obj3\n    self.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n    ```\n    \"\"\"\n\n    assert type(first) == type(second)\n\n    if isinstance(first, list):\n        assert len(first) == len(second)\n\n        original = []\n\n        for i in range(0, len(first)):\n            original.append(self._fill_partial_equality(first[i], second[i]))\n\n    else:\n        original = self._fill_partial_equality(first, second)\n\n    self._parent.assertEqual(original, second)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_of","title":"<code>queryset_of(query, model)</code>","text":"<p>Check if the first argument is a queryset of a models provided as second argument.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\n\nself.bc.database.create(cohort=1)\n\ncollection = []\nqueryset = Cohort.objects.filter()\n\n# pass because the first argument is a QuerySet and it's type Cohort\nself.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n\n# fail because the first argument is a QuerySet and it is not type Academy\nself.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n\n# fail because the first argument is not a QuerySet\nself.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def queryset_of(self, query: Any, model: Model) -&gt; None:\n    \"\"\"\n    Check if the first argument is a queryset of a models provided as second argument.\n\n    Usage:\n\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n\n    self.bc.database.create(cohort=1)\n\n    collection = []\n    queryset = Cohort.objects.filter()\n\n    # pass because the first argument is a QuerySet and it's type Cohort\n    self.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n\n    # fail because the first argument is a QuerySet and it is not type Academy\n    self.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n\n    # fail because the first argument is not a QuerySet\n    self.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n    ```\n    \"\"\"\n\n    if not isinstance(query, QuerySet):\n        self._parent.fail(\"The first argument is not a QuerySet\")\n\n    if query.model != model:\n        self._parent.fail(f\"The QuerySet is type {query.model.__name__} instead of {model.__name__}\")\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_with_pks","title":"<code>queryset_with_pks(query, pks)</code>","text":"<p>Check if the queryset have the following primary keys.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\n\nself.bc.database.create(cohort=1)\n\ncollection = []\nqueryset = Cohort.objects.filter()\n\n# pass because the QuerySet has the primary keys 1\nself.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n\n# fail because the QuerySet has the primary keys 1 but the second argument is empty\nself.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def queryset_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n    \"\"\"\n    Check if the queryset have the following primary keys.\n\n    Usage:\n\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n\n    self.bc.database.create(cohort=1)\n\n    collection = []\n    queryset = Cohort.objects.filter()\n\n    # pass because the QuerySet has the primary keys 1\n    self.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n\n    # fail because the QuerySet has the primary keys 1 but the second argument is empty\n    self.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n    ```\n    \"\"\"\n\n    if not isinstance(query, QuerySet):\n        self._parent.fail(\"The first argument is not a QuerySet\")\n\n    assert [x.pk for x in query] == pks\n</code></pre>"},{"location":"testing/mixins/bc-database/","title":"bc.database","text":""},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database","title":"<code>Database</code>","text":"<p>Mixin with the purpose of cover all the related with the database</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>class Database:\n    \"\"\"Mixin with the purpose of cover all the related with the database\"\"\"\n\n    _cache: dict[str, Model] = {}\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n    how_many = 0\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def reset_queries(self):\n        reset_queries()\n\n    # @override_settings(DEBUG=True)\n    def get_queries(self, db=\"default\"):\n        return [query[\"sql\"] for query in connections[db].queries]\n\n    # @override_settings(DEBUG=True)\n    def print_queries(self, db=\"default\"):\n        print()\n        print(\"---------------- Queries ----------------\\n\")\n        for query in connections[db].queries:\n            print(f'{query[\"time\"]} {query[\"sql\"]}\\n')\n\n        print(\"----------------- Count -----------------\\n\")\n        print(f\"Queries: {len(connections[db].queries)}\\n\")\n        print(\"-----------------------------------------\\n\")\n\n    @classmethod\n    def get_model(cls, path: str) -&gt; Model:\n        \"\"\"\n        Return the model matching the given app_label and model_name.\n\n        As a shortcut, app_label may be in the form &lt;app_label&gt;.&lt;model_name&gt;.\n\n        model_name is case-insensitive.\n\n        Raise LookupError if no application exists with this label, or no\n        model exists with this name in the application. Raise ValueError if\n        called with a single argument that doesn't contain exactly one dot.\n\n        Usage:\n\n        ```py\n        # class breathecode.admissions.models.Cohort\n        Cohort = self.bc.database.get_model('admissions.Cohort')\n        ```\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\n\n        if path in cls._cache:\n            return cls._cache[path]\n\n        app_label, model_name = path.split(\".\")\n        cls._cache[path] = apps.get_model(app_label, model_name)\n\n        return cls._cache[path]\n\n    def list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n        `dict=True` else get a list of `Model` instances.\n\n        Usage:\n\n        ```py\n        # get all the Cohort as list of dict\n        self.bc.database.get('admissions.Cohort')\n\n        # get all the Cohort as list of instances of model\n        self.bc.database.get('admissions.Cohort', dict=False)\n        ```\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\n\n        model = Database.get_model(path)\n        result = model.objects.filter()\n\n        if dict:\n            result = [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in result]\n\n        return result\n\n    @database_sync_to_async\n    def async_list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n        `dict=True` else get a list of `Model` instances.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\n\n        return self.list_of(path, dict)\n\n    @sync_to_async\n    def alist_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n        `dict=True` else get a list of `Model` instances.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\n\n        return self.list_of(path, dict)\n\n    def delete(self, path: str, pk: Optional[int | str] = None) -&gt; tuple[int, dict[str, int]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else\n        all the entries.\n\n        Usage:\n\n        ```py\n        # create 19110911 cohorts \ud83e\uddbe\n        self.bc.database.create(cohort=19110911)\n\n        # exists 19110911 cohorts \ud83e\uddbe\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n\n        # remove all the cohorts\n        self.bc.database.delete(10)\n\n        # exists 19110910 cohorts\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n        ```\n\n        # remove all the cohorts\n        self.bc.database.delete()\n\n        # exists 0 cohorts\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 0)\n        ```\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        \"\"\"\n\n        lookups = {\"pk\": pk} if pk else {}\n\n        model = Database.get_model(path)\n        return model.objects.filter(**lookups).delete()\n\n    def get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n        `dict=True` else get the `Model` instance.\n\n        Usage:\n\n        ```py\n        # get the Cohort with the pk 1 as dict\n        self.bc.database.get('admissions.Cohort', 1)\n\n        # get the Cohort with the pk 1 as instance of model\n        self.bc.database.get('admissions.Cohort', 1, dict=False)\n        ```\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\n        model = Database.get_model(path)\n        result = model.objects.filter(pk=pk).first()\n\n        if dict:\n            result = ModelsMixin.remove_dinamics_fields(self, result.__dict__.copy())\n\n        return result\n\n    @database_sync_to_async\n    def async_get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n        \"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n        `dict=True` else get the `Model` instance.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\n\n        return self.get(path, pk, dict)\n\n    def count(self, path: str) -&gt; int:\n        \"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n        Usage:\n\n        ```py\n        self.bc.database.count('admissions.Cohort')\n        ```\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\n        model = Database.get_model(path)\n        return model.objects.count()\n\n    @database_sync_to_async\n    def async_count(self, path: str) -&gt; int:\n        \"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\n\n        return self.count(path)\n\n    @cache\n    def _get_models(self) -&gt; list[Model]:\n        values = {}\n        for key in apps.app_configs:\n            values[key] = apps.get_app_config(key).get_models()\n        return values\n\n    def camel_case_to_snake_case(self, name):\n        name = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", name)\n        return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", name).lower()\n\n    def _get_model_field_info(self, model, key):\n        attr = getattr(model, key)\n        meta = vars(attr)[\"field\"].related_model._meta\n        model = vars(attr)[\"field\"].related_model\n        blank = attr.field.blank\n        null = attr.field.null\n\n        result = {\n            \"field\": key,\n            \"blank\": blank,\n            \"null\": null,\n            \"app_name\": meta.app_label,\n            \"model_name\": meta.object_name,\n            \"handler\": attr,\n            \"model\": model,\n        }\n\n        if hasattr(attr, \"through\"):\n            result[\"custom_through\"] = \"_\" not in attr.through.__name__\n            result[\"through_fields\"] = attr.rel.through_fields\n\n        return result\n\n    @cache\n    def _get_models_descriptors(self) -&gt; list[Model]:\n        values = {}\n        apps = self._get_models()\n\n        for app_key in apps:\n            values[app_key] = {}\n            models = apps[app_key]\n            for model in models:\n                values[app_key][model.__name__] = {}\n                values[app_key][model.__name__][\"meta\"] = {\n                    \"app_name\": model._meta.app_label,\n                    \"model_name\": model._meta.object_name,\n                    \"model\": model,\n                }\n\n                values[app_key][model.__name__][\"to_one\"] = [\n                    self._get_model_field_info(model, x)\n                    for x in dir(model)\n                    if isinstance(getattr(model, x), ForwardManyToOneDescriptor)\n                ]\n\n                values[app_key][model.__name__][\"to_many\"] = [\n                    self._get_model_field_info(model, x)\n                    for x in dir(model)\n                    if isinstance(getattr(model, x), ManyToManyDescriptor)\n                ]\n\n        return values\n\n    @cache\n    def _get_models_dependencies(self) -&gt; list[Model]:\n        values = {}\n        descriptors = self._get_models_descriptors()\n        for app_key in descriptors:\n            for descriptor_key in descriptors[app_key]:\n                descriptor = descriptors[app_key][descriptor_key]\n\n                if app_key not in values:\n                    values[app_key] = set()\n\n                primary_values = values[app_key][\"primary\"] if \"primary\" in values[app_key] else []\n                secondary_values = values[app_key][\"secondary\"] if \"secondary\" in values[app_key] else []\n\n                values[app_key] = {\n                    \"primary\": {\n                        *primary_values,\n                        *[\n                            x[\"app_name\"]\n                            for x in descriptor[\"to_one\"]\n                            if x[\"app_name\"] != app_key and x[\"null\"] == False\n                        ],\n                        *[\n                            x[\"app_name\"]\n                            for x in descriptor[\"to_many\"]\n                            if x[\"app_name\"] != app_key and x[\"null\"] == False\n                        ],\n                    },\n                    \"secondary\": {\n                        *secondary_values,\n                        *[\n                            x[\"app_name\"]\n                            for x in descriptor[\"to_one\"]\n                            if x[\"app_name\"] != app_key and x[\"null\"] == True\n                        ],\n                        *[\n                            x[\"app_name\"]\n                            for x in descriptor[\"to_many\"]\n                            if x[\"app_name\"] != app_key and x[\"null\"] == True\n                        ],\n                    },\n                }\n\n        return values\n\n    def _sort_models_handlers(\n        self,\n        dependencies_resolved=None,\n        primary_values=None,\n        secondary_values=None,\n        primary_dependencies=None,\n        secondary_dependencies=None,\n        consume_primary=True,\n    ) -&gt; list[Model]:\n\n        dependencies_resolved = dependencies_resolved or set()\n        primary_values = primary_values or []\n        secondary_values = secondary_values or []\n\n        if not primary_dependencies and not secondary_dependencies:\n            dependencies = self._get_models_dependencies()\n\n            primary_dependencies = {}\n            for x in dependencies:\n                primary_dependencies[x] = dependencies[x][\"primary\"]\n\n            secondary_dependencies = {}\n            for x in dependencies:\n                secondary_dependencies[x] = dependencies[x][\"secondary\"]\n\n        for dependency in dependencies_resolved:\n            for key in primary_dependencies:\n\n                if dependency in primary_dependencies[key]:\n                    primary_dependencies[key].remove(dependency)\n\n        primary_found = [\n            x\n            for x in [y for y in primary_dependencies if y not in dependencies_resolved]\n            if len(primary_dependencies[x]) == 0\n        ]\n\n        for x in primary_found:\n            dependencies_resolved.add(x)\n\n        secondary_found = [\n            x\n            for x in [y for y in secondary_dependencies if y not in dependencies_resolved]\n            if len(secondary_dependencies[x]) == 0\n        ]\n\n        if consume_primary and primary_found:\n            primary_values.append(primary_found)\n\n        elif not consume_primary and secondary_found:\n            secondary_values.append(secondary_found)\n\n        for x in primary_found:\n            del primary_dependencies[x]\n\n            for dependency in primary_dependencies:\n                if x in primary_dependencies[dependency]:\n                    primary_dependencies[dependency].remove(x)\n\n        if primary_dependencies:\n            return self._sort_models_handlers(\n                dependencies_resolved,\n                primary_values,\n                secondary_values,\n                primary_dependencies,\n                secondary_dependencies,\n                consume_primary=True,\n            )\n\n        if secondary_dependencies:\n            return primary_values, [x for x in secondary_dependencies if len(secondary_dependencies[x])]\n\n        return primary_values, secondary_values\n\n    @cache\n    def _get_models_handlers(self) -&gt; list[Model]:\n        arguments = {}\n        arguments_banned = set()\n        order, deferred = self._sort_models_handlers()\n        descriptors = self._get_models_descriptors()\n\n        def manage_model(models, descriptor, *args, **kwargs):\n            model_field_name = self.camel_case_to_snake_case(descriptor[\"meta\"][\"model_name\"])\n            app_name = descriptor[\"meta\"][\"app_name\"]\n            model_name = descriptor[\"meta\"][\"model_name\"]\n\n            if model_field_name in kwargs and f\"{app_name}__{model_field_name}\" in kwargs:\n                raise Exception(\n                    f\"Exists many apps with the same model name `{model_name}`, please use \"\n                    f\"`{app_name}__{model_field_name}` instead of `{model_field_name}`\"\n                )\n\n            arg = False\n            if f\"{app_name}__{model_field_name}\" in kwargs:\n                arg = kwargs[f\"{app_name}__{model_field_name}\"]\n\n            elif model_field_name in kwargs:\n                arg = kwargs[model_field_name]\n\n            if not model_field_name in models and is_valid(arg):\n                kargs = {}\n\n                for x in descriptor[\"to_one\"]:\n                    related_model_field_name = self.camel_case_to_snake_case(x[\"model_name\"])\n                    if related_model_field_name in models:\n                        kargs[x[\"field\"]] = just_one(models[related_model_field_name])\n\n                without_through = [x for x in descriptor[\"to_many\"] if x[\"custom_through\"] == False]\n                for x in without_through:\n                    related_model_field_name = self.camel_case_to_snake_case(x[\"model_name\"])\n\n                    if related_model_field_name in models:\n                        kargs[x[\"field\"]] = get_list(models[related_model_field_name])\n\n                models[model_field_name] = create_models(arg, f\"{app_name}.{model_name}\", **kargs)\n\n                with_through = [\n                    x for x in descriptor[\"to_many\"] if x[\"custom_through\"] == True and not x[\"field\"].endswith(\"_set\")\n                ]\n                for x in with_through:\n                    related_model_field_name = self.camel_case_to_snake_case(x[\"model_name\"])\n                    if related_model_field_name in models:\n\n                        for item in get_list(models[related_model_field_name]):\n                            through_current = x[\"through_fields\"][0]\n                            through_related = x[\"through_fields\"][1]\n                            through_args = {through_current: models[model_field_name], through_related: item}\n\n                            x[\"handler\"].through.objects.create(**through_args)\n\n            return models\n\n        def link_deferred_model(models, descriptor, *args, **kwargs):\n            model_field_name = self.camel_case_to_snake_case(descriptor[\"meta\"][\"model_name\"])\n            app_name = descriptor[\"meta\"][\"app_name\"]\n            model_name = descriptor[\"meta\"][\"model_name\"]\n\n            if model_field_name in kwargs and f\"{app_name}__{model_field_name}\" in kwargs:\n                raise Exception(\n                    f\"Exists many apps with the same model name `{model_name}`, please use \"\n                    f\"`{app_name}__{model_field_name}` instead of `{model_field_name}`\"\n                )\n\n            if model_field_name in models:\n                items = (\n                    models[model_field_name]\n                    if isinstance(models[model_field_name], list)\n                    else [models[model_field_name]]\n                )\n                for m in items:\n\n                    for x in descriptor[\"to_one\"]:\n                        related_model_field_name = self.camel_case_to_snake_case(x[\"model_name\"])\n                        model_exists = related_model_field_name in models\n                        is_list = isinstance(models[model_field_name], list) if model_exists else False\n                        if model_exists and not is_list and not getattr(models[model_field_name], x[\"field\"]):\n                            setattr(m, x[\"field\"], just_one(models[related_model_field_name]))\n\n                        if model_exists and is_list:\n                            for y in models[model_field_name]:\n                                if getattr(y, x[\"field\"]):\n                                    setattr(m, x[\"field\"], just_one(models[related_model_field_name]))\n\n                    for x in descriptor[\"to_many\"]:\n                        related_model_field_name = self.camel_case_to_snake_case(x[\"model_name\"])\n                        if related_model_field_name in models and not getattr(models[model_field_name], x[\"field\"]):\n                            setattr(m, x[\"field\"], get_list(models[related_model_field_name]))\n\n                    setattr(m, \"__mixer__\", None)\n                    m.save()\n\n            return models\n\n        def wrapper(*args, **kwargs):\n            models = {}\n            for generation_round in order:\n                for app_key in generation_round:\n                    for descriptor_key in descriptors[app_key]:\n                        descriptor = descriptors[app_key][descriptor_key]\n                        attr = self.camel_case_to_snake_case(descriptor[\"meta\"][\"model_name\"])\n\n                        models = manage_model(models, descriptor, *args, **kwargs)\n\n                        if app_key not in arguments:\n                            arguments[app_key] = {}\n                            arguments[attr] = ...\n\n                        else:\n                            arguments_banned.add(attr)\n\n                        arguments[f\"{app_key}__{attr}\"] = ...\n\n            for generation_round in order:\n                for app_key in generation_round:\n                    for descriptor_key in descriptors[app_key]:\n                        descriptor = descriptors[app_key][descriptor_key]\n                        attr = self.camel_case_to_snake_case(descriptor[\"meta\"][\"model_name\"])\n\n                        models = link_deferred_model(models, descriptor, *args, **kwargs)\n\n                        if app_key not in arguments:\n                            arguments[app_key] = {}\n                            arguments[attr] = ...\n\n                        else:\n                            arguments_banned.add(attr)\n\n                        arguments[f\"{app_key}__{attr}\"] = ...\n\n            return AttrDict(**models)\n\n        return wrapper\n\n    def create_v2(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n        \"\"\"\n        Unstable version of mixin that create all models, do not use this.\n        \"\"\"\n        models = self._get_models_handlers()(*args, **kwargs)\n        return models\n\n    def create_v3(self, **models) -&gt; dict[str, Model | list[Model]]:\n        \"\"\"\n        Unstable version of mixin that create all models, do not use this.\n        \"\"\"\n        return DatabaseV3.create(**models)\n\n    def create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n        \"\"\"\n        Create one o many instances of models and return it like a dict of models.\n\n        Usage:\n\n        ```py\n        # create three users\n        self.bc.database.create(user=3)\n\n        # create one user with a specific first name\n        user = {'first_name': 'Lacey'}\n        self.bc.database.create(user=user)\n\n        # create two users with a specific first name and last name\n        users = [\n            {'first_name': 'Lacey', 'last_name': 'Sturm'},\n            {'first_name': 'The', 'last_name': 'Warning'},\n        ]\n        self.bc.database.create(user=users)\n\n        # create two users with the same first name\n        user = {'first_name': 'Lacey'}\n        self.bc.database.create(user=(2, user))\n\n        # setting up manually the relationships\n        cohort_user = {'cohort_id': 2}\n        self.bc.database.create(cohort=2, cohort_user=cohort_user)\n        ```\n\n        It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or\n        `list[tuple]`.\n\n        Behavior for type of argument:\n\n        - `bool`: if it is true generate a instance of a model.\n        - `int`: generate a instance of a model n times, if `n` &gt; 1 this is a list.\n        - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model.\n        - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times,\n        if `n` &gt; 1 this is a list, this pass to mixer.blend custom values to the model.\n        - `list[dict]`: generate a instance of a model n times, if `n` &gt; 1 this is a list,\n        this pass to mixer.blend custom values to the model.\n        - `list[tuple]`: generate a instance of a model n times, if `n` &gt; 1 this is a list for each element,\n        this pass to mixer.blend custom values to the model.\n\n        Keywords arguments deprecated:\n        - models: this arguments is use to implement inheritance, receive as argument the output of other\n        `self.bc.database.create()` execution.\n        - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to\n        get credentials.\n        \"\"\"\n\n        # TODO: remove it in a future\n        if self._parent:\n            return GenerateModelsMixin.generate_models(self._parent, _new_implementation=True, *args, **kwargs)\n\n        return GenerateModelsMixin().generate_models(_new_implementation=True, *args, **kwargs)\n\n    @database_sync_to_async\n    def async_create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\n\n        return self.create(*args, **kwargs)\n\n    @sync_to_async\n    def acreate(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n        \"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\n\n        return self.create(*args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.acreate","title":"<code>acreate(*args, **kwargs)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@sync_to_async\ndef acreate(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\n\n    return self.create(*args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.alist_of","title":"<code>alist_of(path, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter()</code>, get a list of values of models as <code>list[dict]</code> if <code>dict=True</code> else get a list of <code>Model</code> instances.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@sync_to_async\ndef alist_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n    `dict=True` else get a list of `Model` instances.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\n\n    return self.list_of(path, dict)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_count","title":"<code>async_count(path)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_count(self, path: str) -&gt; int:\n    \"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\n\n    return self.count(path)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_create","title":"<code>async_create(*args, **kwargs)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\n\n    return self.create(*args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_get","title":"<code>async_get(path, pk, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).first()</code>, get the values of model as <code>dict</code> if <code>dict=True</code> else get the <code>Model</code> instance.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n    `dict=True` else get the `Model` instance.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\n\n    return self.get(path, pk, dict)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_list_of","title":"<code>async_list_of(path, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter()</code>, get a list of values of models as <code>list[dict]</code> if <code>dict=True</code> else get a list of <code>Model</code> instances.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n    `dict=True` else get a list of `Model` instances.\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\n\n    return self.list_of(path, dict)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.count","title":"<code>count(path)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Usage:</p> <pre><code>self.bc.database.count('admissions.Cohort')\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def count(self, path: str) -&gt; int:\n    \"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n\n    Usage:\n\n    ```py\n    self.bc.database.count('admissions.Cohort')\n    ```\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\n    model = Database.get_model(path)\n    return model.objects.count()\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create","title":"<code>create(*args, **kwargs)</code>","text":"<p>Create one o many instances of models and return it like a dict of models.</p> <p>Usage:</p> <pre><code># create three users\nself.bc.database.create(user=3)\n\n# create one user with a specific first name\nuser = {'first_name': 'Lacey'}\nself.bc.database.create(user=user)\n\n# create two users with a specific first name and last name\nusers = [\n    {'first_name': 'Lacey', 'last_name': 'Sturm'},\n    {'first_name': 'The', 'last_name': 'Warning'},\n]\nself.bc.database.create(user=users)\n\n# create two users with the same first name\nuser = {'first_name': 'Lacey'}\nself.bc.database.create(user=(2, user))\n\n# setting up manually the relationships\ncohort_user = {'cohort_id': 2}\nself.bc.database.create(cohort=2, cohort_user=cohort_user)\n</code></pre> <p>It get the model name as snake case, you can pass a <code>bool</code>, <code>int</code>, <code>dict</code>, <code>tuple</code>, <code>list[dict]</code> or <code>list[tuple]</code>.</p> <p>Behavior for type of argument:</p> <ul> <li><code>bool</code>: if it is true generate a instance of a model.</li> <li><code>int</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list.</li> <li><code>dict</code>: generate a instance of a model, this pass to mixer.blend custom values to the model.</li> <li><code>tuple</code>: one element need to be a int and the other be a dict, generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list, this pass to mixer.blend custom values to the model.</li> <li><code>list[dict]</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list, this pass to mixer.blend custom values to the model.</li> <li><code>list[tuple]</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list for each element, this pass to mixer.blend custom values to the model.</li> </ul> <p>Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other <code>self.bc.database.create()</code> execution. - authenticate: create a user and use <code>APITestCase.client.force_authenticate(user=models['user'])</code> to get credentials.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n    \"\"\"\n    Create one o many instances of models and return it like a dict of models.\n\n    Usage:\n\n    ```py\n    # create three users\n    self.bc.database.create(user=3)\n\n    # create one user with a specific first name\n    user = {'first_name': 'Lacey'}\n    self.bc.database.create(user=user)\n\n    # create two users with a specific first name and last name\n    users = [\n        {'first_name': 'Lacey', 'last_name': 'Sturm'},\n        {'first_name': 'The', 'last_name': 'Warning'},\n    ]\n    self.bc.database.create(user=users)\n\n    # create two users with the same first name\n    user = {'first_name': 'Lacey'}\n    self.bc.database.create(user=(2, user))\n\n    # setting up manually the relationships\n    cohort_user = {'cohort_id': 2}\n    self.bc.database.create(cohort=2, cohort_user=cohort_user)\n    ```\n\n    It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or\n    `list[tuple]`.\n\n    Behavior for type of argument:\n\n    - `bool`: if it is true generate a instance of a model.\n    - `int`: generate a instance of a model n times, if `n` &gt; 1 this is a list.\n    - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model.\n    - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times,\n    if `n` &gt; 1 this is a list, this pass to mixer.blend custom values to the model.\n    - `list[dict]`: generate a instance of a model n times, if `n` &gt; 1 this is a list,\n    this pass to mixer.blend custom values to the model.\n    - `list[tuple]`: generate a instance of a model n times, if `n` &gt; 1 this is a list for each element,\n    this pass to mixer.blend custom values to the model.\n\n    Keywords arguments deprecated:\n    - models: this arguments is use to implement inheritance, receive as argument the output of other\n    `self.bc.database.create()` execution.\n    - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to\n    get credentials.\n    \"\"\"\n\n    # TODO: remove it in a future\n    if self._parent:\n        return GenerateModelsMixin.generate_models(self._parent, _new_implementation=True, *args, **kwargs)\n\n    return GenerateModelsMixin().generate_models(_new_implementation=True, *args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create_v2","title":"<code>create_v2(*args, **kwargs)</code>","text":"<p>Unstable version of mixin that create all models, do not use this.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def create_v2(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n    \"\"\"\n    Unstable version of mixin that create all models, do not use this.\n    \"\"\"\n    models = self._get_models_handlers()(*args, **kwargs)\n    return models\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create_v3","title":"<code>create_v3(**models)</code>","text":"<p>Unstable version of mixin that create all models, do not use this.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def create_v3(self, **models) -&gt; dict[str, Model | list[Model]]:\n    \"\"\"\n    Unstable version of mixin that create all models, do not use this.\n    \"\"\"\n    return DatabaseV3.create(**models)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete","title":"<code>delete(path, pk=None)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).delete()</code>, delete a element if <code>pk</code> is provided else all the entries.</p> <p>Usage:</p> <pre><code># create 19110911 cohorts \ud83e\uddbe\nself.bc.database.create(cohort=19110911)\n\n# exists 19110911 cohorts \ud83e\uddbe\nself.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n\n# remove all the cohorts\nself.bc.database.delete(10)\n\n# exists 19110910 cohorts\nself.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--remove-all-the-cohorts","title":"remove all the cohorts","text":"<p>self.bc.database.delete()</p>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--exists-0-cohorts","title":"exists 0 cohorts","text":"<p>self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ```</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def delete(self, path: str, pk: Optional[int | str] = None) -&gt; tuple[int, dict[str, int]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else\n    all the entries.\n\n    Usage:\n\n    ```py\n    # create 19110911 cohorts \ud83e\uddbe\n    self.bc.database.create(cohort=19110911)\n\n    # exists 19110911 cohorts \ud83e\uddbe\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n\n    # remove all the cohorts\n    self.bc.database.delete(10)\n\n    # exists 19110910 cohorts\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n    ```\n\n    # remove all the cohorts\n    self.bc.database.delete()\n\n    # exists 0 cohorts\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 0)\n    ```\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    \"\"\"\n\n    lookups = {\"pk\": pk} if pk else {}\n\n    model = Database.get_model(path)\n    return model.objects.filter(**lookups).delete()\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.get","title":"<code>get(path, pk, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).first()</code>, get the values of model as <code>dict</code> if <code>dict=True</code> else get the <code>Model</code> instance.</p> <p>Usage:</p> <pre><code># get the Cohort with the pk 1 as dict\nself.bc.database.get('admissions.Cohort', 1)\n\n# get the Cohort with the pk 1 as instance of model\nself.bc.database.get('admissions.Cohort', 1, dict=False)\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n    `dict=True` else get the `Model` instance.\n\n    Usage:\n\n    ```py\n    # get the Cohort with the pk 1 as dict\n    self.bc.database.get('admissions.Cohort', 1)\n\n    # get the Cohort with the pk 1 as instance of model\n    self.bc.database.get('admissions.Cohort', 1, dict=False)\n    ```\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\n    model = Database.get_model(path)\n    result = model.objects.filter(pk=pk).first()\n\n    if dict:\n        result = ModelsMixin.remove_dinamics_fields(self, result.__dict__.copy())\n\n    return result\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.get_model","title":"<code>get_model(path)</code>  <code>classmethod</code>","text":"<p>Return the model matching the given app_label and model_name.</p> <p>As a shortcut, app_label may be in the form .. <p>model_name is case-insensitive.</p> <p>Raise LookupError if no application exists with this label, or no model exists with this name in the application. Raise ValueError if called with a single argument that doesn't contain exactly one dot.</p> <p>Usage:</p> <pre><code># class breathecode.admissions.models.Cohort\nCohort = self.bc.database.get_model('admissions.Cohort')\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@classmethod\ndef get_model(cls, path: str) -&gt; Model:\n    \"\"\"\n    Return the model matching the given app_label and model_name.\n\n    As a shortcut, app_label may be in the form &lt;app_label&gt;.&lt;model_name&gt;.\n\n    model_name is case-insensitive.\n\n    Raise LookupError if no application exists with this label, or no\n    model exists with this name in the application. Raise ValueError if\n    called with a single argument that doesn't contain exactly one dot.\n\n    Usage:\n\n    ```py\n    # class breathecode.admissions.models.Cohort\n    Cohort = self.bc.database.get_model('admissions.Cohort')\n    ```\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\n\n    if path in cls._cache:\n        return cls._cache[path]\n\n    app_label, model_name = path.split(\".\")\n    cls._cache[path] = apps.get_model(app_label, model_name)\n\n    return cls._cache[path]\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.list_of","title":"<code>list_of(path, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter()</code>, get a list of values of models as <code>list[dict]</code> if <code>dict=True</code> else get a list of <code>Model</code> instances.</p> <p>Usage:</p> <pre><code># get all the Cohort as list of dict\nself.bc.database.get('admissions.Cohort')\n\n# get all the Cohort as list of instances of model\nself.bc.database.get('admissions.Cohort', dict=False)\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n    \"\"\"\n    This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n    `dict=True` else get a list of `Model` instances.\n\n    Usage:\n\n    ```py\n    # get all the Cohort as list of dict\n    self.bc.database.get('admissions.Cohort')\n\n    # get all the Cohort as list of instances of model\n    self.bc.database.get('admissions.Cohort', dict=False)\n    ```\n\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\n\n    model = Database.get_model(path)\n    result = model.objects.filter()\n\n    if dict:\n        result = [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in result]\n\n    return result\n</code></pre>"},{"location":"testing/mixins/bc-datetime/","title":"bc.datetime","text":""},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime","title":"<code>Datetime</code>","text":"<p>Mixin with the purpose of cover all the related with datetime</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>class Datetime:\n    \"\"\"Mixin with the purpose of cover all the related with datetime\"\"\"\n\n    to_iso_string = DatetimeMixin.datetime_to_iso\n    from_iso_string = DatetimeMixin.iso_to_datetime\n    now = DatetimeMixin.datetime_now\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def from_timedelta(self, delta=timedelta(seconds=0)) -&gt; str:\n        \"\"\"\n        Transform from timedelta to the totals seconds in str.\n\n        Usage:\n\n        ```py\n        from datetime import timedelta\n        delta = timedelta(seconds=777)\n        self.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n        ```\n        \"\"\"\n\n        return str(delta.total_seconds())\n\n    def to_datetime_integer(self, timezone: str, date: datetime) -&gt; int:\n        \"\"\"\n        Transform datetime to datetime integer.\n\n        Usage:\n\n        ```py\n        utc_now = timezone.now()\n\n        # date\n        date = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n\n        # equals to 202203210751\n        self.bc.datetime.to_datetime_integer('america/new_york', date)\n        ```\n        \"\"\"\n\n        return DatetimeInteger.from_datetime(timezone, date)\n</code></pre>"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.from_timedelta","title":"<code>from_timedelta(delta=timedelta(seconds=0))</code>","text":"<p>Transform from timedelta to the totals seconds in str.</p> <p>Usage:</p> <pre><code>from datetime import timedelta\ndelta = timedelta(seconds=777)\nself.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>def from_timedelta(self, delta=timedelta(seconds=0)) -&gt; str:\n    \"\"\"\n    Transform from timedelta to the totals seconds in str.\n\n    Usage:\n\n    ```py\n    from datetime import timedelta\n    delta = timedelta(seconds=777)\n    self.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n    ```\n    \"\"\"\n\n    return str(delta.total_seconds())\n</code></pre>"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.to_datetime_integer","title":"<code>to_datetime_integer(timezone, date)</code>","text":"<p>Transform datetime to datetime integer.</p> <p>Usage:</p> <pre><code>utc_now = timezone.now()\n\n# date\ndate = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n\n# equals to 202203210751\nself.bc.datetime.to_datetime_integer('america/new_york', date)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>def to_datetime_integer(self, timezone: str, date: datetime) -&gt; int:\n    \"\"\"\n    Transform datetime to datetime integer.\n\n    Usage:\n\n    ```py\n    utc_now = timezone.now()\n\n    # date\n    date = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n\n    # equals to 202203210751\n    self.bc.datetime.to_datetime_integer('america/new_york', date)\n    ```\n    \"\"\"\n\n    return DatetimeInteger.from_datetime(timezone, date)\n</code></pre>"},{"location":"testing/mixins/bc-fake/","title":"bc.fake","text":"<p>Represents a instance of Faker you can learn about it in their webside</p>"},{"location":"testing/mixins/bc-format/","title":"bc.format","text":""},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format","title":"<code>Format</code>","text":"<p>Mixin with the purpose of cover all the related with format or parse something</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>class Format:\n    \"\"\"Mixin with the purpose of cover all the related with format or parse something\"\"\"\n\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n    ENCODE = ENCODE\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def call(self, *args: Any, **kwargs: Any) -&gt; str:\n        \"\"\"\n        Wraps a call into it and return its args and kwargs.\n\n        example:\n\n        ```py\n        args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\n\n        assert args == (2, 3, 4)\n        assert kwargs == {'a': 1, 'b': 2, 'c': 3}\n        ```\n        \"\"\"\n\n        return args, kwargs\n\n    def querystring(self, query: dict) -&gt; str:\n        \"\"\"\n        Build a querystring from a given dict.\n        \"\"\"\n\n        return urllib.parse.urlencode(query)\n\n    def queryset(self, query: dict) -&gt; str:\n        \"\"\"\n        Build a QuerySet from a given dict.\n        \"\"\"\n\n        return Q(**query)\n\n    # remove lang from args\n    def lookup(self, lang: str, overwrite: dict = dict(), **kwargs: dict | tuple) -&gt; dict[str, Any]:\n        \"\"\"\n        Generate from lookups the values in test side to be used in querystring.\n\n        example:\n\n        ```py\n        query = self.bc.format.lookup(\n            'en',\n            strings={\n                'exact': [\n                    'remote_meeting_url',\n                ],\n            },\n            bools={\n                'is_null': ['ended_at'],\n            },\n            datetimes={\n                'gte': ['starting_at'],\n                'lte': ['ending_at'],\n            },\n            slugs=[\n                'cohort_time_slot__cohort',\n                'cohort_time_slot__cohort__academy',\n                'cohort_time_slot__cohort__syllabus_version__syllabus',\n            ],\n            overwrite={\n                'cohort': 'cohort_time_slot__cohort',\n                'academy': 'cohort_time_slot__cohort__academy',\n                'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n                'start': 'starting_at',\n                'end': 'ending_at',\n                'upcoming': 'ended_at',\n            },\n        )\n\n        url = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n\n        # this test avoid to pass a invalid param to ORM\n        response = self.client.get(url)\n        ```\n        \"\"\"\n\n        result = {}\n\n        # foreign\n        ids = kwargs.get(\"ids\", tuple())\n        slugs = kwargs.get(\"slugs\", tuple())\n\n        # fields\n        ints = kwargs.get(\"ints\", dict())\n        strings = kwargs.get(\"strings\", dict())\n        datetimes = kwargs.get(\"datetimes\", dict())\n        bools = kwargs.get(\"bools\", dict())\n\n        # opts\n        custom_fields = kwargs.get(\"custom_fields\", dict())\n\n        # serialize foreign\n        ids = tuple(ids)\n        slugs = tuple(slugs)\n\n        overwrite = dict([(v, k) for k, v in overwrite.items()])\n\n        # foreign\n\n        for field in ids:\n            if field == \"\":\n                result[\"id\"] = field.integer(\"exact\")\n                continue\n\n            name = overwrite.get(field, field)\n            result[name] = Field.id(\"\")\n\n        for field in slugs:\n            if field == \"\":\n                result[\"id\"] = Field.integer(\"exact\")\n                result[\"slug\"] = Field.string(\"exact\")\n                continue\n\n            name = overwrite.get(field, field)\n            result[name] = Field.slug(\"\")\n\n        # fields\n\n        for mode in ints:\n            for field in ints[mode]:\n                name = overwrite.get(field, field)\n                result[name] = Field.int(mode)\n\n        for mode in strings:\n            for field in strings[mode]:\n                name = overwrite.get(field, field)\n                result[name] = Field.string(mode)\n\n        for mode in datetimes:\n            for field in datetimes[mode]:\n                name = overwrite.get(field, field)\n                result[name] = Field.datetime(mode)\n\n        for mode in bools:\n            for field in bools[mode]:\n                name = overwrite.get(field, field)\n                result[name] = Field.bool(mode)\n\n        # custom fields\n\n        for field in custom_fields:\n            name = overwrite.get(field, field)\n            result[name] = custom_fields[field]()\n\n        return result\n\n    def table(self, arg: QuerySet) -&gt; dict[str, Any] | list[dict[str, Any]]:\n        \"\"\"\n        Convert a QuerySet in a list.\n\n        Usage:\n\n        ```py\n        model = self.bc.database.create(user=1, group=1)\n\n        self.bc.format.model(model.user.groups.all())  # = [{...}]\n        ```\n        \"\"\"\n\n        return [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in arg]\n\n    def to_dict(self, arg: Any) -&gt; dict[str, Any] | list[dict[str, Any]]:\n        \"\"\"\n        Parse the object to a `dict` or `list[dict]`.\n\n        Usage:\n\n        ```py\n        # setup the database, model.user is instance of dict and model.cohort\n        # is instance list of dicts\n        model = self.bc.database.create(user=1, cohort=2)\n\n        # Parsing one model to a dict\n        self.bc.format.to_dict(model.user)  # = {...}\n\n        # Parsing many models to a list of dict (infered from the type of\n        # argument)\n        self.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n        ```\n        \"\"\"\n\n        if isinstance(arg, list) or isinstance(arg, QuerySet):\n            return [self._one_to_dict(x) for x in arg]\n\n        return self._one_to_dict(arg)\n\n    def to_decimal_string(self, decimal: int | float) -&gt; str:\n        \"\"\"\n        Parse a number to the django representation of a decimal.\n\n        Usage:\n\n        ```py\n        self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n        ```\n        \"\"\"\n        return \"%.15f\" % round(decimal, 15)\n\n    def _one_to_dict(self, arg) -&gt; dict[str, Any]:\n        \"\"\"Parse the object to a `dict`\"\"\"\n\n        if isinstance(arg, Model):\n            return ModelsMixin.remove_dinamics_fields(None, vars(arg)).copy()\n\n        if isinstance(arg, dict):\n            return arg.copy()\n\n        raise NotImplementedError(f\"{arg.__name__} is not implemented yet\")\n\n    def describe_models(self, models: dict[str, Model]) -&gt; str:\n        \"\"\"\n        Describe the models.\n\n        Usage:\n\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1, cohort=1)\n\n        # print the docstring to the corresponding test\n        self.bc.format.describe_models(model)\n        ```\n        \"\"\"\n\n        title_spaces = \" \" * 8\n        model_spaces = \" \" * 10\n        result = {}\n\n        for key in models:\n            model = models[key]\n\n            if isinstance(model, list):\n                for v in model:\n                    name, obj = self._describe_model(v)\n                    result[name] = obj\n\n            else:\n                name, obj = self._describe_model(model)\n                result[name] = obj\n\n        print(title_spaces + \"Descriptions of models are being generated:\")\n\n        for line in yaml.dump(result).split(\"\\n\"):\n            if not line.startswith(\" \"):\n                print()\n\n            print(model_spaces + line)\n\n        # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch\n        assert False\n\n    # TODO: this method is buggy in the line `if not hasattr(model, key)`\n    def _describe_model(self, model: Model):\n        pk_name = self._get_pk_name(model)\n        attrs = dir(model)\n        result = {}\n\n        for key in attrs:\n            if key.startswith(\"_\"):\n                continue\n\n            if key == \"DoesNotExist\":\n                continue\n\n            if key == \"MultipleObjectsReturned\":\n                continue\n\n            if key.startswith(\"get_next_\"):\n                continue\n\n            if key.startswith(\"get_previous_\"):\n                continue\n\n            if key.endswith(\"_set\"):\n                continue\n\n            if not hasattr(model, key):\n                continue\n\n            attr = getattr(model, key)\n\n            if attr.__class__.__name__ == \"method\":\n                continue\n\n            if isinstance(attr, Model):\n                result[key] = f\"{attr.__class__.__name__}({self._get_pk_name(attr)}={self._repr_pk(attr.pk)})\"\n\n            elif attr.__class__.__name__ == \"ManyRelatedManager\":\n                instances = [\n                    f\"{attr.model.__name__}({self._get_pk_name(x)}={self._repr_pk(x.pk)})\" for x in attr.get_queryset()\n                ]\n                result[key] = instances\n\n        return (f\"{model.__class__.__name__}({pk_name}={self._repr_pk(model.pk)})\", result)\n\n    def _repr_pk(self, pk: str | int) -&gt; int | str:\n        if isinstance(pk, int):\n            return pk\n\n        return f'\"{pk}\"'\n\n    def _get_pk_name(self, model: Model):\n        from django.db.models.fields import Field, SlugField\n\n        attrs = [\n            x\n            for x in dir(model)\n            if hasattr(model.__class__, x)\n            and (\n                isinstance(getattr(model.__class__, x), SlugField) or isinstance(getattr(model.__class__, x), SlugField)\n            )\n            and getattr(model.__class__, x).primary_key\n        ]\n\n        for key in dir(model):\n            if (\n                hasattr(model.__class__, key)\n                and hasattr(getattr(model.__class__, key), \"field\")\n                and getattr(model.__class__, key).field.primary_key\n            ):\n                return key\n\n        return \"pk\"\n\n    def from_base64(self, hash: str | bytes) -&gt; str:\n        \"\"\"\n        Transform a base64 hash to string.\n        \"\"\"\n\n        if isinstance(hash, str):\n            hash = hash.encode()\n\n        return base64.b64decode(hash).decode(ENCODE)\n\n    def to_base64(self, string: str | bytes) -&gt; str:\n        \"\"\"\n        Transform a base64 hash to string.\n        \"\"\"\n\n        if isinstance(string, str):\n            string = string.encode()\n\n        return base64.b64encode(string).decode(ENCODE)\n\n    def to_querystring(self, params: dict) -&gt; str:\n        \"\"\"\n        Transform dict to querystring\n        \"\"\"\n\n        return urllib.parse.urlencode(params)\n\n    def from_bytes(self, s: bytes, encode: str = ENCODE) -&gt; str:\n        \"\"\"\n        Transform bytes to a string.\n        \"\"\"\n\n        return s.decode(encode)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.call","title":"<code>call(*args, **kwargs)</code>","text":"<p>Wraps a call into it and return its args and kwargs.</p> <p>example:</p> <pre><code>args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\n\nassert args == (2, 3, 4)\nassert kwargs == {'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def call(self, *args: Any, **kwargs: Any) -&gt; str:\n    \"\"\"\n    Wraps a call into it and return its args and kwargs.\n\n    example:\n\n    ```py\n    args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\n\n    assert args == (2, 3, 4)\n    assert kwargs == {'a': 1, 'b': 2, 'c': 3}\n    ```\n    \"\"\"\n\n    return args, kwargs\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.describe_models","title":"<code>describe_models(models)</code>","text":"<p>Describe the models.</p> <p>Usage:</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1, cohort=1)\n\n# print the docstring to the corresponding test\nself.bc.format.describe_models(model)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def describe_models(self, models: dict[str, Model]) -&gt; str:\n    \"\"\"\n    Describe the models.\n\n    Usage:\n\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1, cohort=1)\n\n    # print the docstring to the corresponding test\n    self.bc.format.describe_models(model)\n    ```\n    \"\"\"\n\n    title_spaces = \" \" * 8\n    model_spaces = \" \" * 10\n    result = {}\n\n    for key in models:\n        model = models[key]\n\n        if isinstance(model, list):\n            for v in model:\n                name, obj = self._describe_model(v)\n                result[name] = obj\n\n        else:\n            name, obj = self._describe_model(model)\n            result[name] = obj\n\n    print(title_spaces + \"Descriptions of models are being generated:\")\n\n    for line in yaml.dump(result).split(\"\\n\"):\n        if not line.startswith(\" \"):\n            print()\n\n        print(model_spaces + line)\n\n    # This make sure the element are being printed and prevent `describe_models` are pushed to dev branch\n    assert False\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_base64","title":"<code>from_base64(hash)</code>","text":"<p>Transform a base64 hash to string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def from_base64(self, hash: str | bytes) -&gt; str:\n    \"\"\"\n    Transform a base64 hash to string.\n    \"\"\"\n\n    if isinstance(hash, str):\n        hash = hash.encode()\n\n    return base64.b64decode(hash).decode(ENCODE)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_bytes","title":"<code>from_bytes(s, encode=ENCODE)</code>","text":"<p>Transform bytes to a string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def from_bytes(self, s: bytes, encode: str = ENCODE) -&gt; str:\n    \"\"\"\n    Transform bytes to a string.\n    \"\"\"\n\n    return s.decode(encode)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.lookup","title":"<code>lookup(lang, overwrite=dict(), **kwargs)</code>","text":"<p>Generate from lookups the values in test side to be used in querystring.</p> <p>example:</p> <pre><code>query = self.bc.format.lookup(\n    'en',\n    strings={\n        'exact': [\n            'remote_meeting_url',\n        ],\n    },\n    bools={\n        'is_null': ['ended_at'],\n    },\n    datetimes={\n        'gte': ['starting_at'],\n        'lte': ['ending_at'],\n    },\n    slugs=[\n        'cohort_time_slot__cohort',\n        'cohort_time_slot__cohort__academy',\n        'cohort_time_slot__cohort__syllabus_version__syllabus',\n    ],\n    overwrite={\n        'cohort': 'cohort_time_slot__cohort',\n        'academy': 'cohort_time_slot__cohort__academy',\n        'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n        'start': 'starting_at',\n        'end': 'ending_at',\n        'upcoming': 'ended_at',\n    },\n)\n\nurl = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n\n# this test avoid to pass a invalid param to ORM\nresponse = self.client.get(url)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def lookup(self, lang: str, overwrite: dict = dict(), **kwargs: dict | tuple) -&gt; dict[str, Any]:\n    \"\"\"\n    Generate from lookups the values in test side to be used in querystring.\n\n    example:\n\n    ```py\n    query = self.bc.format.lookup(\n        'en',\n        strings={\n            'exact': [\n                'remote_meeting_url',\n            ],\n        },\n        bools={\n            'is_null': ['ended_at'],\n        },\n        datetimes={\n            'gte': ['starting_at'],\n            'lte': ['ending_at'],\n        },\n        slugs=[\n            'cohort_time_slot__cohort',\n            'cohort_time_slot__cohort__academy',\n            'cohort_time_slot__cohort__syllabus_version__syllabus',\n        ],\n        overwrite={\n            'cohort': 'cohort_time_slot__cohort',\n            'academy': 'cohort_time_slot__cohort__academy',\n            'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n            'start': 'starting_at',\n            'end': 'ending_at',\n            'upcoming': 'ended_at',\n        },\n    )\n\n    url = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n\n    # this test avoid to pass a invalid param to ORM\n    response = self.client.get(url)\n    ```\n    \"\"\"\n\n    result = {}\n\n    # foreign\n    ids = kwargs.get(\"ids\", tuple())\n    slugs = kwargs.get(\"slugs\", tuple())\n\n    # fields\n    ints = kwargs.get(\"ints\", dict())\n    strings = kwargs.get(\"strings\", dict())\n    datetimes = kwargs.get(\"datetimes\", dict())\n    bools = kwargs.get(\"bools\", dict())\n\n    # opts\n    custom_fields = kwargs.get(\"custom_fields\", dict())\n\n    # serialize foreign\n    ids = tuple(ids)\n    slugs = tuple(slugs)\n\n    overwrite = dict([(v, k) for k, v in overwrite.items()])\n\n    # foreign\n\n    for field in ids:\n        if field == \"\":\n            result[\"id\"] = field.integer(\"exact\")\n            continue\n\n        name = overwrite.get(field, field)\n        result[name] = Field.id(\"\")\n\n    for field in slugs:\n        if field == \"\":\n            result[\"id\"] = Field.integer(\"exact\")\n            result[\"slug\"] = Field.string(\"exact\")\n            continue\n\n        name = overwrite.get(field, field)\n        result[name] = Field.slug(\"\")\n\n    # fields\n\n    for mode in ints:\n        for field in ints[mode]:\n            name = overwrite.get(field, field)\n            result[name] = Field.int(mode)\n\n    for mode in strings:\n        for field in strings[mode]:\n            name = overwrite.get(field, field)\n            result[name] = Field.string(mode)\n\n    for mode in datetimes:\n        for field in datetimes[mode]:\n            name = overwrite.get(field, field)\n            result[name] = Field.datetime(mode)\n\n    for mode in bools:\n        for field in bools[mode]:\n            name = overwrite.get(field, field)\n            result[name] = Field.bool(mode)\n\n    # custom fields\n\n    for field in custom_fields:\n        name = overwrite.get(field, field)\n        result[name] = custom_fields[field]()\n\n    return result\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.queryset","title":"<code>queryset(query)</code>","text":"<p>Build a QuerySet from a given dict.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def queryset(self, query: dict) -&gt; str:\n    \"\"\"\n    Build a QuerySet from a given dict.\n    \"\"\"\n\n    return Q(**query)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.querystring","title":"<code>querystring(query)</code>","text":"<p>Build a querystring from a given dict.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def querystring(self, query: dict) -&gt; str:\n    \"\"\"\n    Build a querystring from a given dict.\n    \"\"\"\n\n    return urllib.parse.urlencode(query)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.table","title":"<code>table(arg)</code>","text":"<p>Convert a QuerySet in a list.</p> <p>Usage:</p> <pre><code>model = self.bc.database.create(user=1, group=1)\n\nself.bc.format.model(model.user.groups.all())  # = [{...}]\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def table(self, arg: QuerySet) -&gt; dict[str, Any] | list[dict[str, Any]]:\n    \"\"\"\n    Convert a QuerySet in a list.\n\n    Usage:\n\n    ```py\n    model = self.bc.database.create(user=1, group=1)\n\n    self.bc.format.model(model.user.groups.all())  # = [{...}]\n    ```\n    \"\"\"\n\n    return [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in arg]\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_base64","title":"<code>to_base64(string)</code>","text":"<p>Transform a base64 hash to string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_base64(self, string: str | bytes) -&gt; str:\n    \"\"\"\n    Transform a base64 hash to string.\n    \"\"\"\n\n    if isinstance(string, str):\n        string = string.encode()\n\n    return base64.b64encode(string).decode(ENCODE)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_decimal_string","title":"<code>to_decimal_string(decimal)</code>","text":"<p>Parse a number to the django representation of a decimal.</p> <p>Usage:</p> <pre><code>self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_decimal_string(self, decimal: int | float) -&gt; str:\n    \"\"\"\n    Parse a number to the django representation of a decimal.\n\n    Usage:\n\n    ```py\n    self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n    ```\n    \"\"\"\n    return \"%.15f\" % round(decimal, 15)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_dict","title":"<code>to_dict(arg)</code>","text":"<p>Parse the object to a <code>dict</code> or <code>list[dict]</code>.</p> <p>Usage:</p> <pre><code># setup the database, model.user is instance of dict and model.cohort\n# is instance list of dicts\nmodel = self.bc.database.create(user=1, cohort=2)\n\n# Parsing one model to a dict\nself.bc.format.to_dict(model.user)  # = {...}\n\n# Parsing many models to a list of dict (infered from the type of\n# argument)\nself.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_dict(self, arg: Any) -&gt; dict[str, Any] | list[dict[str, Any]]:\n    \"\"\"\n    Parse the object to a `dict` or `list[dict]`.\n\n    Usage:\n\n    ```py\n    # setup the database, model.user is instance of dict and model.cohort\n    # is instance list of dicts\n    model = self.bc.database.create(user=1, cohort=2)\n\n    # Parsing one model to a dict\n    self.bc.format.to_dict(model.user)  # = {...}\n\n    # Parsing many models to a list of dict (infered from the type of\n    # argument)\n    self.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n    ```\n    \"\"\"\n\n    if isinstance(arg, list) or isinstance(arg, QuerySet):\n        return [self._one_to_dict(x) for x in arg]\n\n    return self._one_to_dict(arg)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_querystring","title":"<code>to_querystring(params)</code>","text":"<p>Transform dict to querystring</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_querystring(self, params: dict) -&gt; str:\n    \"\"\"\n    Transform dict to querystring\n    \"\"\"\n\n    return urllib.parse.urlencode(params)\n</code></pre>"},{"location":"testing/mixins/bc-random/","title":"bc.random","text":""},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random","title":"<code>Random</code>","text":"<p>Mixin with the purpose of cover all the related with the custom asserts</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>class Random:\n    \"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\"\n\n    _parent: APITestCase\n    _bc: interfaces.BreathecodeInterface\n\n    def __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def image(self, width: int = 10, height: int = 10, ext=\"png\") -&gt; tuple[TextIOWrapper, str]:\n        \"\"\"\n        Generate a random image.\n\n        Usage:\n\n        ```py\n        # generate a random image with width of 20px and height of 10px\n        file, filename = self.bc.random.image(20, 10)\n        ```\n        \"\"\"\n\n        size = (width, height)\n        filename = fake.slug() + f\".{ext}\"\n        image = Image.new(\"RGB\", size)\n        arr = np.random.randint(low=0, high=255, size=(size[1], size[0]))\n\n        image = Image.fromarray(arr.astype(\"uint8\"))\n        image.save(filename, IMAGE_TYPES[ext])\n\n        file = open(filename, \"rb\")\n\n        self._bc.garbage_collector.register_image(file)\n\n        return file, filename\n\n    def file(self) -&gt; tuple[TextIOWrapper, str]:\n        \"\"\"\n        Generate a random file.\n\n        Usage:\n\n        ```py\n        # generate a random file\n        file, filename = self.bc.random.file()\n        ```\n        \"\"\"\n\n        ext = self.string(lower=True, size=2)\n\n        file = tempfile.NamedTemporaryFile(suffix=f\".{ext}\", delete=False)\n        file.write(os.urandom(1024))\n\n        self._bc.garbage_collector.register_file(file)\n\n        return file, file.name\n\n    def string(self, lower=False, upper=False, symbol=False, number=False, size=0) -&gt; str:\n        chars = \"\"\n\n        if lower:\n            chars = chars + string.ascii_lowercase\n\n        if upper:\n            chars = chars + string.ascii_uppercase\n\n        if symbol:\n            chars = chars + string.punctuation\n\n        if number:\n            chars = chars + string.digits\n\n        return \"\".join(random.choices(chars, k=size))\n</code></pre>"},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random.file","title":"<code>file()</code>","text":"<p>Generate a random file.</p> <p>Usage:</p> <pre><code># generate a random file\nfile, filename = self.bc.random.file()\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>def file(self) -&gt; tuple[TextIOWrapper, str]:\n    \"\"\"\n    Generate a random file.\n\n    Usage:\n\n    ```py\n    # generate a random file\n    file, filename = self.bc.random.file()\n    ```\n    \"\"\"\n\n    ext = self.string(lower=True, size=2)\n\n    file = tempfile.NamedTemporaryFile(suffix=f\".{ext}\", delete=False)\n    file.write(os.urandom(1024))\n\n    self._bc.garbage_collector.register_file(file)\n\n    return file, file.name\n</code></pre>"},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random.image","title":"<code>image(width=10, height=10, ext='png')</code>","text":"<p>Generate a random image.</p> <p>Usage:</p> <pre><code># generate a random image with width of 20px and height of 10px\nfile, filename = self.bc.random.image(20, 10)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>def image(self, width: int = 10, height: int = 10, ext=\"png\") -&gt; tuple[TextIOWrapper, str]:\n    \"\"\"\n    Generate a random image.\n\n    Usage:\n\n    ```py\n    # generate a random image with width of 20px and height of 10px\n    file, filename = self.bc.random.image(20, 10)\n    ```\n    \"\"\"\n\n    size = (width, height)\n    filename = fake.slug() + f\".{ext}\"\n    image = Image.new(\"RGB\", size)\n    arr = np.random.randint(low=0, high=255, size=(size[1], size[0]))\n\n    image = Image.fromarray(arr.astype(\"uint8\"))\n    image.save(filename, IMAGE_TYPES[ext])\n\n    file = open(filename, \"rb\")\n\n    self._bc.garbage_collector.register_image(file)\n\n    return file, filename\n</code></pre>"},{"location":"testing/mixins/bc-request/","title":"bc.request","text":""},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request","title":"<code>Request</code>","text":"<p>Mixin with the purpose of cover all the related with the request</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>class Request:\n    \"\"\"Mixin with the purpose of cover all the related with the request\"\"\"\n\n    _parent: APITestCase\n\n    def __init__(self, parent, bc) -&gt; None:\n        self._parent = parent\n        self._bc = bc\n\n    def set_headers(self, **kargs: str) -&gt; None:\n        \"\"\"\n        Set headers.\n\n        ```py\n        # It set the headers with:\n        #   Academy: 1\n        #   ThingOfImportance: potato\n        self.bc.request.set_headers(academy=1, thing_of_importance='potato')\n        ```\n        \"\"\"\n        warn(\n            \"Use rest_framework.test.APIClient instead. Example: client.get(..., headers={...})\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n        headers = {}\n\n        items = [\n            index\n            for index in kargs\n            if kargs[index] and (isinstance(kargs[index], str) or isinstance(kargs[index], int))\n        ]\n\n        for index in items:\n            headers[f\"HTTP_{index.upper()}\"] = str(kargs[index])\n\n        self._parent.client.credentials(**headers)\n\n    def authenticate(self, user) -&gt; None:\n        \"\"\"\n        Forces authentication in a request inside a APITestCase.\n\n        Usage:\n\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1)\n\n        # that setup the request to use the credential of user passed\n        self.client.force_authenticate(model.user)\n        ```\n\n        Keywords arguments:\n\n        - user: a instance of user model `breathecode.authenticate.models.User`\n        \"\"\"\n        warn(\"Use `client.manual_authentication` instead\", DeprecationWarning, stacklevel=2)\n        self._parent.client.force_authenticate(user=user)\n\n    def manual_authentication(self, user) -&gt; None:\n        \"\"\"\n        Generate a manual authentication using a token, this method is more slower than `authenticate`.\n\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1)\n\n        # that setup the request to use the credential with tokens of user passed\n        self.bc.request.manual_authentication(model.user)\n        ```\n\n        Keywords arguments:\n\n        - user: a instance of user model `breathecode.authenticate.models.User`.\n        \"\"\"\n        from breathecode.authenticate.models import Token\n\n        warn(\"Use `client.credentials` instead\", DeprecationWarning, stacklevel=2)\n\n        token = Token.objects.create(user=user)\n        self._parent.client.credentials(HTTP_AUTHORIZATION=f\"Token {token.key}\")\n\n    def sign_jwt_link(\n        self, app, user_id: Optional[int] = None, reverse: bool = False, client: Optional[APIClient] = None\n    ):\n        \"\"\"\n        Set Json Web Token in the request.\n\n        Usage:\n\n        ```py\n        # setup the database\n        model = self.bc.database.create(app=1, user=1)\n\n        # that setup the request to use the credential of user passed\n        self.bc.request.authenticate(model.app, model.user.id)\n        ```\n\n        Keywords arguments:\n\n        - user: a instance of user model `breathecode.authenticate.models.User`\n        \"\"\"\n        from datetime import datetime, timedelta\n\n        from django.utils import timezone\n\n        now = timezone.now()\n\n        if not client:\n            client = self._parent.client\n\n        # https://datatracker.ietf.org/doc/html/rfc7519#section-4\n        payload = {\n            \"sub\": str(user_id or \"\"),\n            \"iss\": os.getenv(\"API_URL\", \"http://localhost:8000\"),\n            \"app\": app.slug,\n            \"aud\": \"breathecode\",\n            \"exp\": datetime.timestamp(now + timedelta(minutes=2)),\n            \"iat\": datetime.timestamp(now) - 1,\n            \"typ\": \"JWT\",\n        }\n\n        if reverse:\n            payload[\"aud\"] = app.slug\n            payload[\"app\"] = \"breathecode\"\n\n        if app.algorithm == \"HMAC_SHA256\":\n\n            token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"HS256\")\n\n        elif app.algorithm == \"HMAC_SHA512\":\n            token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"HS512\")\n\n        elif app.algorithm == \"ED25519\":\n            token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"EdDSA\")\n\n        else:\n            raise Exception(\"Algorithm not implemented\")\n\n        client.credentials(HTTP_AUTHORIZATION=f\"Link App={app.slug},Token={token}\")\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.authenticate","title":"<code>authenticate(user)</code>","text":"<p>Forces authentication in a request inside a APITestCase.</p> <p>Usage:</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1)\n\n# that setup the request to use the credential of user passed\nself.client.force_authenticate(model.user)\n</code></pre> <p>Keywords arguments:</p> <ul> <li>user: a instance of user model <code>breathecode.authenticate.models.User</code></li> </ul> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def authenticate(self, user) -&gt; None:\n    \"\"\"\n    Forces authentication in a request inside a APITestCase.\n\n    Usage:\n\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1)\n\n    # that setup the request to use the credential of user passed\n    self.client.force_authenticate(model.user)\n    ```\n\n    Keywords arguments:\n\n    - user: a instance of user model `breathecode.authenticate.models.User`\n    \"\"\"\n    warn(\"Use `client.manual_authentication` instead\", DeprecationWarning, stacklevel=2)\n    self._parent.client.force_authenticate(user=user)\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.manual_authentication","title":"<code>manual_authentication(user)</code>","text":"<p>Generate a manual authentication using a token, this method is more slower than <code>authenticate</code>.</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1)\n\n# that setup the request to use the credential with tokens of user passed\nself.bc.request.manual_authentication(model.user)\n</code></pre> <p>Keywords arguments:</p> <ul> <li>user: a instance of user model <code>breathecode.authenticate.models.User</code>.</li> </ul> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def manual_authentication(self, user) -&gt; None:\n    \"\"\"\n    Generate a manual authentication using a token, this method is more slower than `authenticate`.\n\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1)\n\n    # that setup the request to use the credential with tokens of user passed\n    self.bc.request.manual_authentication(model.user)\n    ```\n\n    Keywords arguments:\n\n    - user: a instance of user model `breathecode.authenticate.models.User`.\n    \"\"\"\n    from breathecode.authenticate.models import Token\n\n    warn(\"Use `client.credentials` instead\", DeprecationWarning, stacklevel=2)\n\n    token = Token.objects.create(user=user)\n    self._parent.client.credentials(HTTP_AUTHORIZATION=f\"Token {token.key}\")\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.set_headers","title":"<code>set_headers(**kargs)</code>","text":"<p>Set headers.</p> <pre><code># It set the headers with:\n#   Academy: 1\n#   ThingOfImportance: potato\nself.bc.request.set_headers(academy=1, thing_of_importance='potato')\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def set_headers(self, **kargs: str) -&gt; None:\n    \"\"\"\n    Set headers.\n\n    ```py\n    # It set the headers with:\n    #   Academy: 1\n    #   ThingOfImportance: potato\n    self.bc.request.set_headers(academy=1, thing_of_importance='potato')\n    ```\n    \"\"\"\n    warn(\n        \"Use rest_framework.test.APIClient instead. Example: client.get(..., headers={...})\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n\n    headers = {}\n\n    items = [\n        index\n        for index in kargs\n        if kargs[index] and (isinstance(kargs[index], str) or isinstance(kargs[index], int))\n    ]\n\n    for index in items:\n        headers[f\"HTTP_{index.upper()}\"] = str(kargs[index])\n\n    self._parent.client.credentials(**headers)\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.sign_jwt_link","title":"<code>sign_jwt_link(app, user_id=None, reverse=False, client=None)</code>","text":"<p>Set Json Web Token in the request.</p> <p>Usage:</p> <pre><code># setup the database\nmodel = self.bc.database.create(app=1, user=1)\n\n# that setup the request to use the credential of user passed\nself.bc.request.authenticate(model.app, model.user.id)\n</code></pre> <p>Keywords arguments:</p> <ul> <li>user: a instance of user model <code>breathecode.authenticate.models.User</code></li> </ul> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def sign_jwt_link(\n    self, app, user_id: Optional[int] = None, reverse: bool = False, client: Optional[APIClient] = None\n):\n    \"\"\"\n    Set Json Web Token in the request.\n\n    Usage:\n\n    ```py\n    # setup the database\n    model = self.bc.database.create(app=1, user=1)\n\n    # that setup the request to use the credential of user passed\n    self.bc.request.authenticate(model.app, model.user.id)\n    ```\n\n    Keywords arguments:\n\n    - user: a instance of user model `breathecode.authenticate.models.User`\n    \"\"\"\n    from datetime import datetime, timedelta\n\n    from django.utils import timezone\n\n    now = timezone.now()\n\n    if not client:\n        client = self._parent.client\n\n    # https://datatracker.ietf.org/doc/html/rfc7519#section-4\n    payload = {\n        \"sub\": str(user_id or \"\"),\n        \"iss\": os.getenv(\"API_URL\", \"http://localhost:8000\"),\n        \"app\": app.slug,\n        \"aud\": \"breathecode\",\n        \"exp\": datetime.timestamp(now + timedelta(minutes=2)),\n        \"iat\": datetime.timestamp(now) - 1,\n        \"typ\": \"JWT\",\n    }\n\n    if reverse:\n        payload[\"aud\"] = app.slug\n        payload[\"app\"] = \"breathecode\"\n\n    if app.algorithm == \"HMAC_SHA256\":\n\n        token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"HS256\")\n\n    elif app.algorithm == \"HMAC_SHA512\":\n        token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"HS512\")\n\n    elif app.algorithm == \"ED25519\":\n        token = jwt.encode(payload, bytes.fromhex(app.private_key), algorithm=\"EdDSA\")\n\n    else:\n        raise Exception(\"Algorithm not implemented\")\n\n    client.credentials(HTTP_AUTHORIZATION=f\"Link App={app.slug},Token={token}\")\n</code></pre>"},{"location":"testing/mixins/bc/","title":"bc","text":""},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode","title":"<code>Breathecode</code>","text":"<p>               Bases: <code>BreathecodeInterface</code></p> <p>Collection of mixins for testing purposes</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/breathecode.py</code> <pre><code>class Breathecode(BreathecodeInterface):\n    \"\"\"Collection of mixins for testing purposes\"\"\"\n\n    cache: Cache\n    random: Random\n    datetime: Datetime\n    request: Request\n    database: Database\n    check: Check\n    format: Format\n    fake: Faker\n    garbage_collector: GarbageCollector\n    _parent: APITestCase\n\n    def __init__(self, parent) -&gt; None:\n        self._parent = parent\n\n        self.cache = Cache(parent, self)\n        self.random = Random(parent, self)\n        self.datetime = Datetime(parent, self)\n        self.request = Request(parent, self)\n        self.database = Database(parent, self)\n        self.check = Check(parent, self)\n        self.format = Format(parent, self)\n        self.garbage_collector = GarbageCollector(parent, self)\n        self.fake = fake\n\n    def help(self, *args) -&gt; None:\n        \"\"\"\n        Print a list of mixin with a tree style (command of Linux).\n\n        Usage:\n\n        ```py\n        # this print a tree with all the mixins\n        self.bc.help()\n\n        # this print just the docs of corresponding method\n        self.bc.help('bc.datetime.now')\n        ```\n        \"\"\"\n\n        if args:\n            for arg in args:\n                self._get_doctring(arg)\n\n        else:\n            self._help_tree()\n\n        # prevent left a `self.bc.help()` in the code\n        assert False\n\n    def _get_doctring(self, path: str) -&gt; None:\n        parts_of_path = path.split(\".\")\n        current_path = \"\"\n        current = None\n\n        for part_of_path in parts_of_path:\n            if not current:\n                if not hasattr(self._parent, part_of_path):\n                    current_path += f\".{part_of_path}\"\n                    break\n\n                current = getattr(self._parent, part_of_path)\n\n            else:\n                if not hasattr(current, part_of_path):\n                    current_path += f\".{part_of_path}\"\n                    current = None\n                    break\n\n                current = getattr(current, part_of_path)\n\n        if current:\n            from unittest.mock import patch, MagicMock\n\n            if callable(current):\n                print(f\"self.{path}{print_arguments(current)}:\")\n            else:\n                print(f\"self.{path}:\")\n\n            print()\n\n            with patch(\"sys.stdout.write\", MagicMock()) as mock:\n                help(current)\n\n            for args, _ in mock.call_args_list:\n                if args[0] == \"\\n\":\n                    print()\n                lines = args[0].split(\"\\n\")\n\n                for line in lines[3:-1]:\n                    print(f\"    {line}\")\n\n        else:\n            print(f\"self.{path}:\")\n            print()\n            print(f\"    self{current_path} not exists.\")\n\n        print()\n\n    def _help_tree(self, level: int = 0, parent: Optional[dict] = None, last_item: bool = False) -&gt; list[str]:\n        \"\"\"Print a list of mixin with a tree style (command of Linux)\"\"\"\n\n        result: list[str] = []\n\n        if not parent:\n            result.append(\"bc\")\n\n        parent = [x for x in dir(parent or self) if not x.startswith(\"_\")]\n\n        if last_item:\n            starts = \"    \" + (\"\u2502   \" * (level - 1))\n\n        else:\n            starts = \"\u2502   \" * level\n\n        for key in parent:\n            item = getattr(self, key)\n\n            if callable(item):\n                result.append(f\"{starts}\u251c\u2500\u2500 {key}{print_arguments(item)}\")\n\n            else:\n                result.append(f\"{starts}\u251c\u2500\u2500 {key}\")\n\n                last_item = parent.index(key) == len(parent) - 1\n                result = [*result, *Breathecode._help_tree(item, level + 1, item, last_item)]\n\n        result[-1] = result[-1].replace(\"  \u251c\u2500\u2500 \", \"  \u2514\u2500\u2500 \")\n        result[-1] = result[-1].replace(r\"\u251c\u2500\u2500 ([a-zA-Z0-9]+)$\", r\"\u2514\u2500\u2500 \\1\")\n\n        for n in range(len(result) - 1, -1, -1):\n            if result[n][0] == \"\u251c\":\n                result[n] = re.sub(r\"^\u251c\", r\"\u2514\", result[n])\n                break\n\n        if level == 0:\n            print(\"\\n\".join(result))\n\n        return result\n</code></pre>"},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode.help","title":"<code>help(*args)</code>","text":"<p>Print a list of mixin with a tree style (command of Linux).</p> <p>Usage:</p> <pre><code># this print a tree with all the mixins\nself.bc.help()\n\n# this print just the docs of corresponding method\nself.bc.help('bc.datetime.now')\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/breathecode.py</code> <pre><code>def help(self, *args) -&gt; None:\n    \"\"\"\n    Print a list of mixin with a tree style (command of Linux).\n\n    Usage:\n\n    ```py\n    # this print a tree with all the mixins\n    self.bc.help()\n\n    # this print just the docs of corresponding method\n    self.bc.help('bc.datetime.now')\n    ```\n    \"\"\"\n\n    if args:\n        for arg in args:\n            self._get_doctring(arg)\n\n    else:\n        self._help_tree()\n\n    # prevent left a `self.bc.help()` in the code\n    assert False\n</code></pre>"},{"location":"testing/mocks/mock-requests/","title":"Mock requests","text":"<p>Mocks for <code>requests</code> module</p>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_delete_mock","title":"<code>apply_requests_delete_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.delete</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_delete_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.delete', apply_requests_delete_mock([\n    204,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    None,\n]))\ndef test_xyz():\n    delete_eventbrite_descriptions_for_event(1)\n\n    assert requests.delete.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_delete_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.delete`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_delete_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.delete', apply_requests_delete_mock([\n        204,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        delete_eventbrite_descriptions_for_event(1)\n\n        assert requests.delete.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"DELETE\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_get_mock","title":"<code>apply_requests_get_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.get</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_get_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.get', apply_requests_get_mock([\n    200,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    { 'data': { ... } },\n]))\ndef test_xyz():\n    get_eventbrite_descriptions_for_event(1)\n\n    assert requests.get.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_get_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.get`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_get_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.get', apply_requests_get_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        get_eventbrite_descriptions_for_event(1)\n\n        assert requests.get.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"GET\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_head_mock","title":"<code>apply_requests_head_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.head</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_head_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.head', apply_requests_head_mock([\n    200,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    None,\n]))\ndef test_xyz():\n    get_meta_for_eventbrite_description_for_event(1)\n\n    assert requests.head.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_head_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.head`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_head_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.head', apply_requests_head_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        get_meta_for_eventbrite_description_for_event(1)\n\n        assert requests.head.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"HEAD\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_mock","title":"<code>apply_requests_mock(method='get', endpoints=None)</code>","text":"<p>Apply Storage Blob Mock</p> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_mock(method=\"get\", endpoints=None):\n    \"\"\"Apply Storage Blob Mock\"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    method = method.lower()\n    REQUESTS_INSTANCES[method] = request_mock(endpoints)\n    return REQUESTS_INSTANCES[method]\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_patch_mock","title":"<code>apply_requests_patch_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.patch</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_patch_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.patch', apply_requests_patch_mock([\n    200,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    None,\n]))\ndef test_xyz():\n    patch_eventbrite_descriptions_for_event(1)\n\n    assert requests.patch.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_patch_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.patch`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_patch_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.patch', apply_requests_patch_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        patch_eventbrite_descriptions_for_event(1)\n\n        assert requests.patch.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"PATCH\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_post_mock","title":"<code>apply_requests_post_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.post</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_post_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.post', apply_requests_post_mock([\n    201,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    { 'data': { ... } },\n]))\ndef test_xyz():\n    post_eventbrite_descriptions_for_event(1)\n\n    assert requests.post.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_post_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.post`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_post_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.post', apply_requests_post_mock([\n        201,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        post_eventbrite_descriptions_for_event(1)\n\n        assert requests.post.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"POST\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_put_mock","title":"<code>apply_requests_put_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.put</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_put_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.put', apply_requests_put_mock([\n    200,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    { 'data': { ... } },\n]))\ndef test_xyz():\n    put_eventbrite_descriptions_for_event(1)\n\n    assert requests.put.call_args_list == [\n        call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_put_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.put`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_put_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.put', apply_requests_put_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        put_eventbrite_descriptions_for_event(1)\n\n        assert requests.put.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"PUT\", endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_request_mock","title":"<code>apply_requests_request_mock(endpoints=None)</code>","text":"<p>Apply a mock to <code>requests.request</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_request_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n@patch('requests.request', apply_requests_request_mock([\n    200,\n    'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n    { 'data': { ... } },\n]))\ndef test_xyz():\n    get_eventbrite_description_for_event(1)\n\n    assert requests.request.call_args_list == [\n        call('GET',\n            'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n            headers={'Authorization': f'Bearer 1234567890'},\n            data=None),\n    ]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_request_mock(endpoints=None):\n    \"\"\"\n    Apply a mock to `requests.request`.\n\n    Usage:\n\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_request_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n\n    @patch('requests.request', apply_requests_request_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        get_eventbrite_description_for_event(1)\n\n        assert requests.request.call_args_list == [\n            call('GET',\n                'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\n\n    if endpoints is None:\n        endpoints = []\n\n    return apply_requests_mock(\"REQUEST\", endpoints)\n</code></pre>"},{"location":"testing/mocks/using-mocks/","title":"Using mocks","text":""},{"location":"testing/mocks/using-mocks/#mock-object","title":"Mock object","text":"<p>Mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.</p>"},{"location":"testing/mocks/using-mocks/#how-to-apply-a-automatic-mock","title":"How to apply a automatic mock","text":""},{"location":"testing/mocks/using-mocks/#the-most-easier-way-to-create-a-mock","title":"<code>The most easier way to create a mock</code>","text":"<p>The decorator <code>@patch.object</code> is the best option to implement a mock</p> <pre><code>@patch.object(object_class_or_module, 'method_or_function_to_be_mocked', MagicMock())\n</code></pre>"},{"location":"testing/mocks/using-mocks/#this-is-the-code-to-test","title":"<code>This is the code to test</code>","text":"<pre><code># utils.py\nfrom .actions import shoot_gun, kenny_s_birth, show\n\ndef kenny_killer(kenny_id: int) -&gt; None:\n    # get the current kenny\n    kenny = Kenny.objects.filter(id=kenny_id).first()\n\n    # see - South Park - Coon and friends\n    if kenny:\n        shoot_gun(kenny)\n        kenny_number = kenny_s_birth()\n        show(kenny_number)\n</code></pre>"},{"location":"testing/mocks/using-mocks/#this-is-a-example-of-use-of-mocks","title":"<code>This is a example of use of mocks</code>","text":"<pre><code>from unittest.mock import MagicMock, call, patch\nfrom rest_framework.test import APITestCase\nfrom .models import Kenny\nfrom .utils import kenny_killer\n\nimport app.actions as actions\n\n# this is a wrapper that implement the kenny_s_birth static behavior to the test\ndef kenny_s_birth_mock(number: int):\n    def kenny_s_birth():\n        return number\n\n    # the side_effect is a function that manage the behavior of the mocked function\n    return MagicMock(side_effect=kenny_s_birth)\n\nclass KennyTestSuite(APITestCase):\n    # \ud83d\udd3d this function is automatically mocked\n    @patch.object(actions, 'shoot_gun', MagicMock())\n\n    # \ud83d\udd3d this function is manually mocked\n    @patch.object(actions, 'kenny_s_birth', kenny_s_birth_mock(1000))\n\n    # \ud83d\udd3d this function is automatically mocked\n    @patch.object(actions, 'show', MagicMock())\n\n    def test_kill_kenny(self):\n        kenny = Kenny()\n        kenny.save()\n\n        kenny_killer(kenny_id=1)\n\n        # shoot_gun() is called with a kenny instance\n        self.assertEqual(actions.shoot_gun.call_args_list, [call(kenny)])\n\n        # kenny_s_birth() is called with zero arguments\n        self.assertEqual(actions.kenny_s_birth.call_args_list, [call()])\n\n        # show is called\n        self.assertEqual(actions.show.call_args_list, [call(1)])\n</code></pre>"},{"location":"troubleshooting/check_task_status/","title":"Task Status Diagnostic Tool","text":"<p>This document explains the <code>check_task_status</code> management command, which helps diagnose issues with tasks that appear stuck in Celery Task Manager.</p>"},{"location":"troubleshooting/check_task_status/#overview","title":"Overview","text":"<p>The command was created to investigate issue #8696, where tasks appear as PENDING/SCHEDULED in the Django admin interface even though they may have been processed.</p>"},{"location":"troubleshooting/check_task_status/#features","title":"Features","text":"<ol> <li>Identifies tasks stuck in SCHEDULED status for extended periods</li> <li>Examines sample tasks for detailed investigation</li> <li>Verifies actual execution status by checking:</li> <li>Celery task state via AsyncResult</li> <li>Downstream effects of specific task types</li> <li>Checks for tasks stuck in other non-terminal states</li> <li>Generates recommendations based on findings</li> <li>Can save complete diagnostic output to a log file</li> </ol>"},{"location":"troubleshooting/check_task_status/#command-arguments","title":"Command Arguments","text":"Argument Type Default Description <code>--hours</code> int 906 Number of hours to look back for stuck tasks <code>--check-execution</code> flag False Enables verification of actual task execution <code>--limit</code> int 5 Maximum number of sample tasks to analyze per task type <code>--log-file</code> string None Path where to save the diagnostic log file"},{"location":"troubleshooting/check_task_status/#how-to-run","title":"How to Run","text":"<p>Basic usage:</p> <pre><code>python manage.py check_task_status\n</code></pre> <p>With all options:</p> <pre><code>python manage.py check_task_status --hours=24 --check-execution --limit=10 --log-file=/path/to/task_diagnosis.log\n</code></pre>"},{"location":"troubleshooting/check_task_status/#output-details","title":"Output Details","text":"<p>The command outputs:</p> <ol> <li>Summary of stuck tasks grouped by task module and name</li> <li>Task counts and maximum duration they've been stuck</li> <li>Sample of specific task instances with their:</li> <li>ID, arguments, last run timestamp</li> <li>Task ID for Celery correlation</li> <li>Status message and attempt count</li> <li>When <code>--check-execution</code> is used:</li> <li>Celery task state from AsyncResult</li> <li>Task-specific execution verification</li> <li>Evidence of downstream effects</li> <li>Tasks stuck in non-terminal states</li> <li>Recommendations for resolution</li> </ol>"},{"location":"troubleshooting/check_task_status/#example-output","title":"Example Output","text":"<pre><code>Analyzing tasks stuck for more than 906 hours:\n================================================================================\n\nTask: task_manager.django.tasks.execute_signal\nCount: 66597\nMax Hours Stuck: 906.60\n\nSample Tasks:\nID: 12345678\nArguments: {\"instance_id\": 98765, \"model_path\": \"breathecode.assignments.Task\", \"action\": \"status_updated\"}\nLast Run: 2025-02-15 10:23:45+00:00\nTask ID: 87d6f3a5-c612-49b3-9fe1-23456789abcd\nStatus Message: None\nAttempts: 2\n----------------------------------------\n\nTask: breathecode.notify.tasks.async_deliver_hook\nCount: 63090\nMax Hours Stuck: 906.50\n\nSample Tasks:\nID: 23456789\nArguments: {\"hook_id\": 12345, \"retry\": false}\nLast Run: 2025-02-16 08:45:12+00:00\nTask ID: 9e45f2a6-d723-48c4-8fd2-34567890bcde\nStatus Message: None\nAttempts: 3\n----------------------------------------\n\nOther potentially stuck tasks by status:\n================================================================================\n\nStatus: PENDING\nCount: 1234\n\nRecommendations:\n================================================================================\n\n1. Check Celery workers are running and processing tasks\n2. Verify Redis connection and queue status\n3. Look for any error patterns in the sample tasks\n4. Consider resetting stuck tasks or investigating specific task modules\n5. Check if the task_manager and actual task function are properly communicating status updates\n6. For tasks with successful Celery execution but pending TaskManager status, update the TaskManager database\n</code></pre>"},{"location":"troubleshooting/check_task_status/#task-specific-verification","title":"Task-Specific Verification","text":"<p>The command checks specific task types:</p> <ol> <li> <p><code>breathecode.assignments.tasks.async_learnpack_webhook</code>:</p> </li> <li> <p>Verifies if webhook status was updated in database</p> </li> <li> <p><code>breathecode.notify.tasks.async_deliver_hook</code>:</p> </li> <li>Checks if hook delivery completed successfully</li> </ol>"},{"location":"troubleshooting/check_task_status/#interpreting-results","title":"Interpreting Results","text":""},{"location":"troubleshooting/check_task_status/#possible-issues","title":"Possible Issues","text":"<ol> <li> <p>Task Execution Issues: Tasks are not being processed by Celery</p> </li> <li> <p>Celery workers may not be running</p> </li> <li> <p>Redis message broker might be disconnected or data lost</p> </li> <li> <p>Status Update Issues: Tasks are executed but status not updated</p> </li> <li>Database connection issues when updating status</li> <li>Task execution errors preventing status update</li> <li>Code issues in task functions not properly updating status</li> </ol>"},{"location":"troubleshooting/check_task_status/#recommended-actions","title":"Recommended Actions","text":"<p>Based on diagnostic results:</p> <ul> <li> <p>If tasks show successful execution but status not updated:</p> </li> <li> <p>Check the TaskManager status update code</p> </li> <li> <p>Run a one-time fix script to update the status of completed tasks</p> </li> <li> <p>If tasks have not executed:</p> </li> <li>Verify Celery worker status</li> <li>Check Redis connectivity and memory usage</li> <li>Examine Celery task queue for backlog</li> </ul>"},{"location":"troubleshooting/check_task_status/#progress-tracking","title":"Progress Tracking","text":"<p>The command includes progress indicators to help troubleshoot long-running checks:</p> <pre><code>[Line ~62] Starting task status check for tasks older than 906 hours...\n[Line ~65] Querying database for stuck tasks... This may take a moment\n[Line ~75] Database query complete. Processing results...\n[Line ~95] Processing complete. Found 245 stuck task types.\n[Line ~106] Analyzing task type 1/245: task_manager.django.tasks.execute_signal\n</code></pre> <p>These indicators help identify where the command might be hanging and track progress through large datasets.</p>"},{"location":"troubleshooting/check_task_status/#implementation-location","title":"Implementation Location","text":"<p>The command is located at:</p> <pre><code>breathecode/monitoring/management/commands/check_task_status.py\n</code></pre>"},{"location":"workflows/file-uploading/","title":"File uploading","text":""},{"location":"workflows/file-uploading/#steps","title":"Steps","text":"<ul> <li>Get operation type meta.</li> <li>Split file into chunks.</li> <li>Check if chunk lenght is less than <code>max_chunks</code> or <code>null</code>.</li> <li>Upload each chunk.</li> <li>Process the file and send the metadata if required.</li> <li>If the file is not processed automatically you should pass the file id to another endpoint.</li> </ul>"},{"location":"workflows/file-uploading/#notes","title":"Notes","text":"<ul> <li>For user uploading, use <code>/v2/media/me/chunk</code> and <code>/v2/media/me/chunk/upload</code>.</li> <li>For academy uploading, use <code>/v2/media/academy/chunk</code> and <code>/v2/media/academy/chunk/upload</code> with the <code>Academy</code> header.</li> <li>Status <code>TRANSFERRING</code> means that the file is being processed.</li> <li>Status <code>CREATED</code> means that the <code>file.id</code> must be provided to another endpoint for processing.</li> </ul>"},{"location":"workflows/file-uploading/#get-available-operation-types","title":"Get available operation types","text":""},{"location":"workflows/file-uploading/#request","title":"Request","text":"<pre><code>GET /v2/media/operationtype HTTP/1.1\nHost: breathecode.herokuapp.com\n</code></pre>"},{"location":"workflows/file-uploading/#response","title":"Response","text":"<pre><code>[\n\u00a0 \u00a0 \"media\",\n\u00a0 \u00a0 \"proof-of-payment\"\n]\n</code></pre>"},{"location":"workflows/file-uploading/#get-operation-type-meta","title":"Get operation type meta","text":""},{"location":"workflows/file-uploading/#request_1","title":"Request","text":"<pre><code>GET /v2/media/operationtype/media HTTP/1.1\nHost: breathecode.herokuapp.com\n</code></pre>"},{"location":"workflows/file-uploading/#response_1","title":"Response","text":"<pre><code>{\n\u00a0 \u00a0 \"chunk_size\": 10485760,\n\u00a0 \u00a0 \"max_chunks\": null\n}\n</code></pre>"},{"location":"workflows/file-uploading/#upload-chunk","title":"Upload chunk","text":""},{"location":"workflows/file-uploading/#request_2","title":"Request","text":"<pre><code>POST /v2/media/me/chunk HTTP/1.1\nHost: breathecode.herokuapp.com\nContent-Type: multipart/form-data; boundary=...\n\n{\n    \"operation_type\": \"media\",\n    \"total_chunks\": 3,\n    \"chunk\": chunk,\n    \"chunk_index\": 0\n}\n</code></pre>"},{"location":"workflows/file-uploading/#response_2","title":"Response","text":"<pre><code>{\n\u00a0 \u00a0 \"academy\": null,\n\u00a0 \u00a0 \"chunk_index\": 0,\n\u00a0 \u00a0 \"mime\": \"image/png\",\n\u00a0 \u00a0 \"name\": \"chunk.png\",\n\u00a0 \u00a0 \"operation_type\": \"media\",\n\u00a0 \u00a0 \"total_chunks\": 3,\n\u00a0 \u00a0 \"user\": 1\n}\n</code></pre>"},{"location":"workflows/file-uploading/#end-file-uploading-and-ask-for-processing","title":"End file uploading and ask for processing","text":""},{"location":"workflows/file-uploading/#request_3","title":"Request","text":"<pre><code>POST /v2/media/me/chunk/upload HTTP/1.1\nHost: breathecode.herokuapp.com\nContent-Type: application/json\n\n{\n    \"operation_type\": \"media\",\n    \"total_chunks\": 3,\n    \"filename\": \"chunk.png\",\n    \"mime\": \"image/png\",\n    \"meta\": \"{\\\"slug\\\":\\\"my-media\\\",\\\"name\\\":\\\"my-name\\\",\\\"categories\\\":[\\\"my-category\\\"],\\\"academy\\\":1}\"\n}\n</code></pre>"},{"location":"workflows/file-uploading/#response_3","title":"Response","text":"<pre><code>{\n\u00a0 \u00a0 \"id\": 1,\n\u00a0 \u00a0 \"academy\": null,\n\u00a0 \u00a0 \"mime\": \"image/png\",\n\u00a0 \u00a0 \"name\": \"a291e39ac495b2effd38d508417cd731\",\n\u00a0 \u00a0 \"operation_type\": \"media\",\n\u00a0 \u00a0 \"user\": 1,\n\u00a0 \u00a0 \"status\": \"TRANSFERRING\"\n}\n</code></pre>"}]}