# Generated by Django 3.2.16 on 2023-02-23 06:34

import breathecode.utils.validators.language
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("admissions", "0054_cohortuser_history_log"),
        ("events", "0042_alter_eventtype_icon_url"),
        ("mentorship", "0020_alter_mentorshipservice_language"),
        ("payments", "0019_auto_20230214_0438"),
    ]

    operations = [
        migrations.CreateModel(
            name="EventTypeSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "slug",
                    models.SlugField(
                        help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "academy",
                    models.ForeignKey(
                        help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
                    ),
                ),
                ("event_types", models.ManyToManyField(blank=True, help_text="Event types", to="events.EventType")),
            ],
        ),
        migrations.RemoveField(
            model_name="mentorshipserviceset",
            name="name",
        ),
        migrations.RemoveField(
            model_name="planserviceitem",
            name="mentorship_service_set",
        ),
        migrations.AddField(
            model_name="bag",
            name="selected_mentorship_service_sets",
            field=models.ManyToManyField(
                blank=True,
                help_text="Selected mentorship service sets for the plans of services",
                to="payments.MentorshipServiceSet",
            ),
        ),
        migrations.AddField(
            model_name="planfinancing",
            name="cohort_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Cohort which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="admissions.cohort",
            ),
        ),
        migrations.AddField(
            model_name="planfinancing",
            name="mentorship_service_set_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Mentorship service set which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.mentorshipserviceset",
            ),
        ),
        migrations.AddField(
            model_name="planserviceitem",
            name="mentorship_service_sets",
            field=models.ManyToManyField(
                blank=True,
                help_text="Available mentorship service sets to be sold in this service and plan",
                to="payments.MentorshipServiceSet",
            ),
        ),
        migrations.AddField(
            model_name="subscription",
            name="cohort_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Cohort which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="admissions.cohort",
            ),
        ),
        migrations.AddField(
            model_name="subscription",
            name="mentorship_service_set_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Mentorship service set which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.mentorshipserviceset",
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="academy",
            field=models.ForeignKey(
                help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="amount_per_half",
            field=models.FloatField(default=0, help_text="Amount per half"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="amount_per_month",
            field=models.FloatField(default=0, help_text="Amount per month"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="amount_per_quarter",
            field=models.FloatField(default=0, help_text="Amount per quarter"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="amount_per_year",
            field=models.FloatField(default=0, help_text="Amount per year"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="chosen_period",
            field=models.CharField(
                choices=[
                    ("NO_SET", "No set"),
                    ("MONTH", "Month"),
                    ("QUARTER", "Quarter"),
                    ("HALF", "Half"),
                    ("YEAR", "Year"),
                ],
                default="NO_SET",
                help_text="Chosen period used to calculate the amount and build the subscription",
                max_length=7,
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="currency",
            field=models.ForeignKey(
                help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="expires_at",
            field=models.DateTimeField(
                blank=True,
                default=None,
                help_text="Expiration date of the bag, used for preview bag together with the token",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="how_many_installments",
            field=models.IntegerField(
                default=0, help_text="How many installments to collect and build the plan financing"
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="is_recurrent",
            field=models.BooleanField(default=False, help_text="will it be a recurrent payment?"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="plans",
            field=models.ManyToManyField(blank=True, help_text="Plans", to="payments.Plan"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="selected_cohorts",
            field=models.ManyToManyField(
                blank=True, help_text="Selected cohorts for the plans of services", to="admissions.Cohort"
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="service_items",
            field=models.ManyToManyField(blank=True, help_text="Service items", to="payments.ServiceItem"),
        ),
        migrations.AlterField(
            model_name="bag",
            name="status",
            field=models.CharField(
                choices=[("RENEWAL", "Renewal"), ("CHECKING", "Checking"), ("PAID", "Paid")],
                default="CHECKING",
                help_text="Bag status",
                max_length=8,
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="token",
            field=models.CharField(
                blank=True, db_index=True, default=None, help_text="Token of the bag", max_length=40, null=True
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="type",
            field=models.CharField(
                choices=[("BAG", "Bag"), ("CHARGE", "Charge"), ("PREVIEW", "Preview")],
                default="BAG",
                help_text="Bag type",
                max_length=7,
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="bag",
            name="was_delivered",
            field=models.BooleanField(default=False, help_text="Was it delivered to the user?"),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="cohort",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Cohort which the consumable belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admissions.cohort",
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="event_type",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Event type which the consumable belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="events.eventtype",
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="how_many",
            field=models.IntegerField(default=-1, help_text="How many units of this service can be used"),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="mentorship_service",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Mentorship service which the consumable belongs to",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="mentorship.mentorshipservice",
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="service_item",
            field=models.ForeignKey(
                help_text="Service item, we remind the service item to know how many units was issued",
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.serviceitem",
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="unit_type",
            field=models.CharField(
                choices=[("UNIT", "Unit")], default="UNIT", help_text="Unit type (e.g. UNIT))", max_length=10
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="consumable",
            name="valid_until",
            field=models.DateTimeField(
                blank=True,
                default=None,
                help_text="Valid until, this is null if the consumable is valid until resources are exhausted",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="consumable",
            field=models.ForeignKey(
                help_text="Consumable", on_delete=django.db.models.deletion.CASCADE, to="payments.consumable"
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="duration",
            field=models.DurationField(default=datetime.timedelta, help_text="Duration of the session"),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="eta",
            field=models.DateTimeField(help_text="Estimated time of arrival"),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="how_many",
            field=models.FloatField(default=0, help_text="How many units of this service can be used"),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="path",
            field=models.CharField(blank=True, help_text="Path of the request", max_length=200),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="related_id",
            field=models.IntegerField(blank=True, default=None, help_text="Related id", null=True),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="related_slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Related slug, it's human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="request",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Request parameters, it's used to remind and recover and consumption session",
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="status",
            field=models.CharField(
                choices=[("PENDING", "Pending"), ("DONE", "Done"), ("CANCELLED", "Cancelled")],
                default="PENDING",
                help_text="Status of the session",
                max_length=12,
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="consumptionsession",
            name="was_discounted",
            field=models.BooleanField(default=False, help_text="Was it discounted"),
        ),
        migrations.AlterField(
            model_name="currency",
            name="code",
            field=models.CharField(help_text="ISO 4217 currency code (e.g. USD, EUR, MXN)", max_length=3, unique=True),
        ),
        migrations.AlterField(
            model_name="currency",
            name="decimals",
            field=models.IntegerField(default=0, help_text="Number of decimals (e.g. 2 for USD and EUR, 0 for JPY)"),
        ),
        migrations.AlterField(
            model_name="currency",
            name="name",
            field=models.CharField(
                help_text="Currency name (e.g. US Dollar, Euro, Mexican Peso)", max_length=20, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="financialreputation",
            name="in_4geeks",
            field=models.CharField(
                choices=[
                    ("FULFILLED", "Fulfilled"),
                    ("REJECTED", "Rejected"),
                    ("PENDING", "Pending"),
                    ("REFUNDED", "Refunded"),
                    ("DISPUTED_AS_FRAUD", "Disputed as fraud"),
                ],
                default="GOOD",
                help_text="4Geeks reputation",
                max_length=17,
            ),
        ),
        migrations.AlterField(
            model_name="financialreputation",
            name="in_stripe",
            field=models.CharField(
                choices=[
                    ("FULFILLED", "Fulfilled"),
                    ("REJECTED", "Rejected"),
                    ("PENDING", "Pending"),
                    ("REFUNDED", "Refunded"),
                    ("DISPUTED_AS_FRAUD", "Disputed as fraud"),
                ],
                default="GOOD",
                help_text="Stripe reputation",
                max_length=17,
            ),
        ),
        migrations.AlterField(
            model_name="financialreputation",
            name="user",
            field=models.OneToOneField(
                help_text="Customer",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reputation",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="financingoption",
            name="currency",
            field=models.ForeignKey(
                help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
            ),
        ),
        migrations.AlterField(
            model_name="financingoption",
            name="how_many_months",
            field=models.IntegerField(
                default=1, help_text="How many months and installments to collect (e.g. 1, 2, 3, ...)"
            ),
        ),
        migrations.AlterField(
            model_name="financingoption",
            name="monthly_price",
            field=models.FloatField(default=1, help_text="Monthly price (e.g. 1, 2, 3, ...)"),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="academy",
            field=models.ForeignKey(
                help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
            ),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="bag",
            field=models.ForeignKey(help_text="Bag", on_delete=django.db.models.deletion.CASCADE, to="payments.bag"),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="currency",
            field=models.ForeignKey(
                help_text="Currency of the invoice", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
            ),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="paid_at",
            field=models.DateTimeField(help_text="Date when the invoice was paid"),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="refund_stripe_id",
            field=models.CharField(
                blank=True, default=None, help_text="Stripe id for refunding", max_length=32, null=True
            ),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="refunded_at",
            field=models.DateTimeField(
                blank=True, default=None, help_text="Date when the invoice was refunded", null=True
            ),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="status",
            field=models.CharField(
                choices=[
                    ("FULFILLED", "Fulfilled"),
                    ("REJECTED", "Rejected"),
                    ("PENDING", "Pending"),
                    ("REFUNDED", "Refunded"),
                    ("DISPUTED_AS_FRAUD", "Disputed as fraud"),
                ],
                default="PENDING",
                help_text="Invoice status",
                max_length=17,
            ),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="stripe_id",
            field=models.CharField(blank=True, default=None, help_text="Stripe id", max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name="invoice",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="mentorshipserviceset",
            name="slug",
            field=models.SlugField(
                help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                max_length=100,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentcontact",
            name="stripe_id",
            field=models.CharField(help_text="Stripe id", max_length=20),
        ),
        migrations.AlterField(
            model_name="paymentcontact",
            name="user",
            field=models.OneToOneField(
                help_text="Customer",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payment_contact",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="currency",
            field=models.ForeignKey(
                help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="financing_options",
            field=models.ManyToManyField(
                blank=True, help_text="Available financing options", to="payments.FinancingOption"
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="is_onboarding",
            field=models.BooleanField(default=False, help_text="Is onboarding plan?"),
        ),
        migrations.AlterField(
            model_name="plan",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                help_text="Academy owner",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="admissions.academy",
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="price_per_half",
            field=models.FloatField(blank=True, default=None, help_text="Price per half", null=True),
        ),
        migrations.AlterField(
            model_name="plan",
            name="price_per_month",
            field=models.FloatField(blank=True, default=None, help_text="Price per month", null=True),
        ),
        migrations.AlterField(
            model_name="plan",
            name="price_per_quarter",
            field=models.FloatField(blank=True, default=None, help_text="Price per quarter", null=True),
        ),
        migrations.AlterField(
            model_name="plan",
            name="price_per_year",
            field=models.FloatField(blank=True, default=None, help_text="Price per year", null=True),
        ),
        migrations.AlterField(
            model_name="plan",
            name="slug",
            field=models.CharField(
                help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                max_length=60,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="status",
            field=models.CharField(
                choices=[
                    ("DRAFT", "Draft"),
                    ("ACTIVE", "Active"),
                    ("UNLISTED", "Unlisted"),
                    ("DELETED", "Deleted"),
                    ("DISCONTINUED", "Discontinued"),
                ],
                default="DRAFT",
                help_text="Status",
                max_length=12,
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="time_of_life",
            field=models.IntegerField(
                blank=True, default=1, help_text="Timelife of plan (e.g. 1, 2, 3, ...)", null=True
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="time_of_life_unit",
            field=models.CharField(
                blank=True,
                choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                default="MONTH",
                help_text="Timelife unit (e.g. DAY, WEEK, MONTH or YEAR)",
                max_length=10,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="plan",
            name="trial_duration",
            field=models.IntegerField(default=1, help_text="Trial duration (e.g. 1, 2, 3, ...)"),
        ),
        migrations.AlterField(
            model_name="plan",
            name="trial_duration_unit",
            field=models.CharField(
                choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                default="MONTH",
                help_text="Trial duration unit (e.g. DAY, WEEK, MONTH or YEAR)",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="academy",
            field=models.ForeignKey(
                help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="invoices",
            field=models.ManyToManyField(blank=True, help_text="Invoices", to="payments.Invoice"),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="monthly_price",
            field=models.FloatField(
                default=0, help_text="Monthly price, we keep this to avoid we changes him/her amount"
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="next_payment_at",
            field=models.DateTimeField(help_text="Next payment date"),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="plan_expires_at",
            field=models.DateTimeField(
                default=None, help_text="Plan expires at, after this date the plan will not be renewed", null=True
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="plans",
            field=models.ManyToManyField(blank=True, help_text="Plans to be suplied", to="payments.Plan"),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="status",
            field=models.CharField(
                choices=[
                    ("FREE_TRIAL", "Free trial"),
                    ("ACTIVE", "Active"),
                    ("CANCELLED", "Cancelled"),
                    ("DEPRECATED", "Deprecated"),
                    ("PAYMENT_ISSUE", "Payment issue"),
                    ("ERROR", "Error"),
                    ("FULLY_PAID", "Fully Paid"),
                ],
                default="ACTIVE",
                help_text="Status",
                max_length=13,
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="status_message",
            field=models.CharField(
                blank=True, default=None, help_text="Error message if status is ERROR", max_length=250, null=True
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="planfinancing",
            name="valid_until",
            field=models.DateTimeField(
                help_text="Valid until, before this date each month the customer must pay, after this date the plan financing will be destroyed and if it is belonging to a cohort, the certificate will be issued after pay every installments"
            ),
        ),
        migrations.AlterField(
            model_name="planoffer",
            name="from_syllabus",
            field=models.ManyToManyField(help_text="Syllabus from which the plan is offered", to="admissions.Syllabus"),
        ),
        migrations.AlterField(
            model_name="planoffer",
            name="original_plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="original_plan", to="payments.plan"
            ),
        ),
        migrations.AlterField(
            model_name="planoffer",
            name="suggested_plans",
            field=models.ManyToManyField(
                help_text="Suggested plans", related_name="_payments_planoffer_suggested_plans_+", to="payments.Plan"
            ),
        ),
        migrations.AlterField(
            model_name="planoffertranslation",
            name="description",
            field=models.CharField(help_text="Description of the plan offer", max_length=255),
        ),
        migrations.AlterField(
            model_name="planoffertranslation",
            name="lang",
            field=models.CharField(
                help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                max_length=5,
                validators=[breathecode.utils.validators.language.validate_language_code],
            ),
        ),
        migrations.AlterField(
            model_name="planoffertranslation",
            name="offer",
            field=models.ForeignKey(
                help_text="Plan offer", on_delete=django.db.models.deletion.CASCADE, to="payments.planoffer"
            ),
        ),
        migrations.AlterField(
            model_name="planoffertranslation",
            name="short_description",
            field=models.CharField(help_text="Short description of the plan offer", max_length=255),
        ),
        migrations.AlterField(
            model_name="planoffertranslation",
            name="title",
            field=models.CharField(help_text="Title of the plan offer", max_length=60),
        ),
        migrations.AlterField(
            model_name="planserviceitem",
            name="cohort_pattern",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Cohort pattern to find cohorts to be sold in this plan",
                max_length=80,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="planserviceitem",
            name="cohorts",
            field=models.ManyToManyField(
                blank=True,
                help_text="Available cohorts to be sold in this this service and plan",
                to="admissions.Cohort",
            ),
        ),
        migrations.AlterField(
            model_name="planserviceitem",
            name="plan",
            field=models.ForeignKey(help_text="Plan", on_delete=django.db.models.deletion.CASCADE, to="payments.plan"),
        ),
        migrations.AlterField(
            model_name="planserviceitem",
            name="service_item",
            field=models.ForeignKey(
                help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
            ),
        ),
        migrations.AlterField(
            model_name="planserviceitemhandler",
            name="handler",
            field=models.ForeignKey(
                help_text="Plan service item",
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.planserviceitem",
            ),
        ),
        migrations.AlterField(
            model_name="planserviceitemhandler",
            name="plan_financing",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Plan financing",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.planfinancing",
            ),
        ),
        migrations.AlterField(
            model_name="planserviceitemhandler",
            name="subscription",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Subscription",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.subscription",
            ),
        ),
        migrations.AlterField(
            model_name="plantranslation",
            name="description",
            field=models.CharField(help_text="Description of the plan", max_length=255),
        ),
        migrations.AlterField(
            model_name="plantranslation",
            name="lang",
            field=models.CharField(
                help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                max_length=5,
                validators=[breathecode.utils.validators.language.validate_language_code],
            ),
        ),
        migrations.AlterField(
            model_name="plantranslation",
            name="title",
            field=models.CharField(help_text="Title of the plan", max_length=60),
        ),
        migrations.AlterField(
            model_name="service",
            name="currency",
            field=models.ForeignKey(
                help_text="Currency", on_delete=django.db.models.deletion.CASCADE, to="payments.currency"
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="groups",
            field=models.ManyToManyField(
                blank=True, help_text="Groups that can access the customer that bought this service", to="auth.Group"
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                help_text="Academy owner",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="admissions.academy",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="price_per_unit",
            field=models.FloatField(default=0, help_text="Price per unit"),
        ),
        migrations.AlterField(
            model_name="service",
            name="private",
            field=models.BooleanField(default=True, help_text="If the asset is private or not"),
        ),
        migrations.AlterField(
            model_name="service",
            name="slug",
            field=models.CharField(
                help_text="A human-readable identifier, it must be unique and it can only contain letters, numbers and hyphens",
                max_length=60,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="trial_duration",
            field=models.IntegerField(default=1, help_text="Trial duration (e.g. 1, 2, 3, ...)"),
        ),
        migrations.AlterField(
            model_name="service",
            name="trial_duration_unit",
            field=models.CharField(
                choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                default="MONTH",
                help_text="Trial duration unit (e.g. DAY, WEEK, MONTH or YEAR)",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="how_many",
            field=models.IntegerField(default=-1, help_text="How many units of this service can be used"),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="is_renewable",
            field=models.BooleanField(default=False, help_text="If the service is renewable or not"),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="renew_at",
            field=models.IntegerField(
                default=1, help_text="Renew at (e.g. 1, 2, 3, ...) it going to be used to build the balance of customer"
            ),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="renew_at_unit",
            field=models.CharField(
                choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                default="MONTH",
                help_text="Renew at unit (e.g. DAY, WEEK, MONTH or YEAR)",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="service",
            field=models.ForeignKey(
                help_text="Service", on_delete=django.db.models.deletion.CASCADE, to="payments.service"
            ),
        ),
        migrations.AlterField(
            model_name="serviceitem",
            name="unit_type",
            field=models.CharField(
                choices=[("UNIT", "Unit")], default="UNIT", help_text="Unit type (e.g. UNIT))", max_length=10
            ),
        ),
        migrations.AlterField(
            model_name="serviceitemfeature",
            name="description",
            field=models.CharField(help_text="Description of the service item", max_length=255),
        ),
        migrations.AlterField(
            model_name="serviceitemfeature",
            name="lang",
            field=models.CharField(
                help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                max_length=5,
                validators=[breathecode.utils.validators.language.validate_language_code],
            ),
        ),
        migrations.AlterField(
            model_name="serviceitemfeature",
            name="one_line_desc",
            field=models.CharField(help_text="One line description of the service item", max_length=30),
        ),
        migrations.AlterField(
            model_name="serviceitemfeature",
            name="service_item",
            field=models.ForeignKey(
                help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
            ),
        ),
        migrations.AlterField(
            model_name="servicestockscheduler",
            name="consumables",
            field=models.ManyToManyField(blank=True, help_text="Consumables", to="payments.Consumable"),
        ),
        migrations.AlterField(
            model_name="servicestockscheduler",
            name="plan_handler",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Plan service item handler",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.planserviceitemhandler",
            ),
        ),
        migrations.AlterField(
            model_name="servicestockscheduler",
            name="subscription_handler",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Subscription service item",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.subscriptionserviceitem",
            ),
        ),
        migrations.AlterField(
            model_name="servicestockscheduler",
            name="valid_until",
            field=models.DateTimeField(
                blank=True,
                default=None,
                help_text="Valid until, after this date the consumables will be renewed",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="servicetranslation",
            name="description",
            field=models.CharField(help_text="Description of the service", max_length=255),
        ),
        migrations.AlterField(
            model_name="servicetranslation",
            name="lang",
            field=models.CharField(
                help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                max_length=5,
                validators=[breathecode.utils.validators.language.validate_language_code],
            ),
        ),
        migrations.AlterField(
            model_name="servicetranslation",
            name="service",
            field=models.ForeignKey(
                help_text="Service", on_delete=django.db.models.deletion.CASCADE, to="payments.service"
            ),
        ),
        migrations.AlterField(
            model_name="servicetranslation",
            name="title",
            field=models.CharField(help_text="Title of the service", max_length=60),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="academy",
            field=models.ForeignKey(
                help_text="Academy owner", on_delete=django.db.models.deletion.CASCADE, to="admissions.academy"
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="invoices",
            field=models.ManyToManyField(blank=True, help_text="Invoices", to="payments.Invoice"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="is_refundable",
            field=models.BooleanField(default=True, help_text="Is it refundable?"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="next_payment_at",
            field=models.DateTimeField(help_text="Next payment date"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="paid_at",
            field=models.DateTimeField(help_text="Last time the subscription was paid"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="pay_every",
            field=models.IntegerField(default=1, help_text="Pay every X units (e.g. 1, 2, 3, ...)"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="pay_every_unit",
            field=models.CharField(
                choices=[("DAY", "Day"), ("WEEK", "Week"), ("MONTH", "Month"), ("YEAR", "Year")],
                default="MONTH",
                help_text="Pay every unit (e.g. DAY, WEEK, MONTH or YEAR)",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="plans",
            field=models.ManyToManyField(blank=True, help_text="Plans to be suplied", to="payments.Plan"),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="service_items",
            field=models.ManyToManyField(
                blank=True,
                help_text="Service items to be suplied",
                through="payments.SubscriptionServiceItem",
                to="payments.ServiceItem",
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="status",
            field=models.CharField(
                choices=[
                    ("FREE_TRIAL", "Free trial"),
                    ("ACTIVE", "Active"),
                    ("CANCELLED", "Cancelled"),
                    ("DEPRECATED", "Deprecated"),
                    ("PAYMENT_ISSUE", "Payment issue"),
                    ("ERROR", "Error"),
                    ("FULLY_PAID", "Fully Paid"),
                ],
                default="ACTIVE",
                help_text="Status",
                max_length=13,
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="status_message",
            field=models.CharField(
                blank=True, default=None, help_text="Error message if status is ERROR", max_length=250, null=True
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="user",
            field=models.ForeignKey(
                help_text="Customer", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="valid_until",
            field=models.DateTimeField(
                blank=True,
                default=None,
                help_text="Valid until, after this date the subscription will be destroyed",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionserviceitem",
            name="cohorts",
            field=models.ManyToManyField(blank=True, help_text="Cohorts", to="admissions.Cohort"),
        ),
        migrations.AlterField(
            model_name="subscriptionserviceitem",
            name="mentorship_service_set",
            field=models.ForeignKey(
                blank=True,
                help_text="Mentorship service set",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.mentorshipserviceset",
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionserviceitem",
            name="service_item",
            field=models.ForeignKey(
                help_text="Service item", on_delete=django.db.models.deletion.CASCADE, to="payments.serviceitem"
            ),
        ),
        migrations.AlterField(
            model_name="subscriptionserviceitem",
            name="subscription",
            field=models.ForeignKey(
                help_text="Subscription", on_delete=django.db.models.deletion.CASCADE, to="payments.subscription"
            ),
        ),
        migrations.CreateModel(
            name="MentorshipServiceSetTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the mentorship service set", max_length=60)),
                (
                    "description",
                    models.CharField(help_text="Description of the mentorship service set", max_length=255),
                ),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the mentorship service set", max_length=255),
                ),
                (
                    "mentorship_service_set",
                    models.ForeignKey(
                        help_text="Mentorship service set",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.mentorshipserviceset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventTypeSetTranslation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "lang",
                    models.CharField(
                        help_text="ISO 639-1 language code + ISO 3166-1 alpha-2 country code, e.g. en-US",
                        max_length=5,
                        validators=[breathecode.utils.validators.language.validate_language_code],
                    ),
                ),
                ("title", models.CharField(help_text="Title of the event type set", max_length=60)),
                ("description", models.CharField(help_text="Description of the event type set", max_length=255)),
                (
                    "short_description",
                    models.CharField(help_text="Short description of the event type set", max_length=255),
                ),
                (
                    "event_type_set",
                    models.ForeignKey(
                        help_text="Event type set",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.eventtypeset",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="bag",
            name="selected_event_type_sets",
            field=models.ManyToManyField(
                blank=True, help_text="Selected event type sets for the plans of services", to="payments.EventTypeSet"
            ),
        ),
        migrations.AddField(
            model_name="planfinancing",
            name="event_type_set_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Event type set which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.eventtypeset",
            ),
        ),
        migrations.AddField(
            model_name="planserviceitem",
            name="event_type_sets",
            field=models.ManyToManyField(
                blank=True,
                help_text="Available mentorship service sets to be sold in this service and plan",
                to="payments.EventTypeSet",
            ),
        ),
        migrations.AddField(
            model_name="subscription",
            name="event_type_set_selected",
            field=models.ForeignKey(
                blank=True,
                default=None,
                help_text="Event type set which the plans and services is for",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="payments.eventtypeset",
            ),
        ),
    ]
